(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    521748,      10173]
NotebookOptionsPosition[    220536,       4539]
NotebookOutlinePosition[    509078,       9996]
CellTagsIndexPosition[    508594,       9976]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Using ML Models for Accelerometer-based Gesture Recognition", "Title",
 CellChangeTimes->{{3.664883308949333*^9, 3.664883313536722*^9}, 
   3.740499476267229*^9},ExpressionUUID->"09ce18dc-0378-4ff7-99dc-\
92bce9c94c59"],

Cell[TextData[StyleBox["Euan Ong", "Author"]], "Author",
 CellChangeTimes->{{3.555342901015277*^9, 3.555342903568449*^9}, 
   3.740499504375328*^9},ExpressionUUID->"eaa2d651-f2e4-4177-bf1d-\
5c2e571e002c"],

Cell["Wolfram High School Summer Camp 2018", "Institution",
 CellChangeTimes->{{3.60553067105511*^9, 3.605530672875778*^9}, 
   3.6055307185521317`*^9, 3.7318545489043007`*^9, 
   3.740499508023995*^9},ExpressionUUID->"b90d85e5-92c7-497a-8a7a-\
72f6c772b91d"],

Cell["\<\
As technology advances, we are constantly seeking new, more intuitive methods \
of interfacing with our devices and the digital world; one such method is \
gesture recognition. Although touchless human interface devices (kinetic user \
interfaces) exist and are in development, the cost and configuration required \
for these sometimes makes them impractical, particularly for mobile \
applications. A simpler method would be to use devices the user already has \
on their person - such as a phone or a smartwatch - to detect basic gestures, \
taking advantage of the wide array of sensors included in such devices. In an \
attempt to assess the feasibility of such a method, methods of asynchronous \
communication between a mobile device and the Wolfram Language are \
investigated, and a gesture recognition system based around an accelerometer \
sensor is implemented, using a machine learning model to classify a few \
simple gestures from mobile accelerometer data.\
\>", "Abstract",
 CellChangeTimes->{{3.56087739812619*^9, 3.560877402361278*^9}, {
  3.605972186581604*^9, 3.605972191416107*^9}, {3.722081098402473*^9, 
  3.722081109198687*^9}, {3.740499515817791*^9, 
  3.740499539039014*^9}},ExpressionUUID->"96df135a-45e0-4684-9b85-\
cba600d8ee18"],

Cell[TextData[{
 StyleBox["Keywords",
  FontSlant->"Italic"],
 ": sample paper; formatting systems; equations and mathematical symbols; \
about the references"
}], "Keywords",
 CellMargins->{{54, 86}, {32, 6}},
 CellChangeTimes->{{3.722020124141131*^9, 3.722020180745096*^9}, {
   3.722020654806406*^9, 3.722020672387948*^9}, 3.722021186865041*^9, {
   3.722080943781378*^9, 3.7220809500982943`*^9}, {3.730116505181128*^9, 
   3.7301165079869747`*^9}},
 ExpressionUUID -> "1b54805e-3865-451b-9d9f-7226483db154"],

Cell[CellGroupData[{

Cell["Investigating Methods of Asynchronous Communication", "Section",
 CellChangeTimes->{{3.640538207759239*^9, 3.64053820946832*^9}, 
   3.663595324864025*^9, 
   3.740499555252009*^9},ExpressionUUID->"3363828f-e108-4eb5-ac80-\
c4fec6f92a0e"],

Cell["\<\
To implement an accelerometer-based gesture recognition system, we must \
devise a suitable means for a mobile device to transmit accelerometer data to \
a computer running the Wolfram Language (WL). On a high level, the WL has \
baked-in support for a variety of devices - specifically the Raspberry Pi, \
Vernier Go!Link compatible sensors, Arduino microcontrollers, webcams and \
devices using the RS-232 or RS-422 serial protocol \
(http://reference.wolfram.com/language/guide/UsingConnectedDevices.html); \
unfortunately, there is no easy way to access sensor data from Android or iOS \
mobile devices.

On a low level, the WL natively supports TCP and ZMQ socket functionality, as \
well as receipt and transmission of HTTP requests and Pub-Sub channel \
communication. We investigate the feasibility of both methods for \
transmission of accelerometer data:\
\>", "Text", "NoIndent",
 CellChangeTimes->{{3.56087926913603*^9, 3.560879370486261*^9}, {
   3.560879403136127*^9, 3.560879406925074*^9}, {3.580573976557857*^9, 
   3.580574002262272*^9}, {3.580574117913088*^9, 3.580574170054978*^9}, {
   3.580574211368795*^9, 3.5805742368532877`*^9}, {3.582548093905504*^9, 
   3.582548103295794*^9}, {3.6012435982421117`*^9, 3.6012436055897117`*^9}, 
   3.601296961107171*^9, {3.663596807279188*^9, 3.6635968330618687`*^9}, {
   3.664725949343432*^9, 3.6647259512672997`*^9}, {3.664726738213482*^9, 
   3.66472674516555*^9}, 3.6648832622607937`*^9, 3.6927185505425873`*^9, {
   3.722077963062261*^9, 3.722077979173575*^9}, 3.722081330669018*^9, {
   3.7220813673753233`*^9, 3.722081371583726*^9}, 3.7404996772636347`*^9},
 CellTags->"NoIndent",ExpressionUUID->"93887333-9174-4958-a722-6e816c7b9582"],

Cell[CellGroupData[{

Cell["Socket Transmission", "Subsection",
 CellChangeTimes->{{3.74050026117372*^9, 
  3.7405002640735893`*^9}},ExpressionUUID->"4bff1c31-c67a-46e8-acd6-\
8a425c3bcbca"],

Cell[TextData[{
 "Although a number of tutorials are available for transmission of sensor \
data from an iOS device to the WL \
(http://community.wolfram.com/groups/-/m/t/344278), no such resources are as \
yet available for Android devices - there is some support for exporting \
Android sensor data to the Wolfram Data Drop \
(http://community.wolfram.com/groups/-/m/t/461190), however this has \
extremely high latency (data upload is every 2 minutes) and so is not \
suitable for gesture recognition. \n\nOn the Google Play Store, there exist a \
number of Android apps which can transmit live sensor data to a computer over \
UDP sockets - for instance, \[OpenCurlyDoubleQuote]Sensorstream IMU+GPS\
\[CloseCurlyDoubleQuote] \
(https://play.google.com/store/apps/details?id=de.lorenz_fenster.\
sensorstreamgps). Unfortunately, the WL does not support receipt and \
transmission of data over UDP sockets - while there exists a ",
 StyleBox["Socket",
  FontSlant->"Italic"],
 " library, as of 2018 this is only capable of dealing with TCP. Thus, to use \
UDP sockets in the WL, we must implement our own library using JLink to \
access Java socket packages from the WL. (Credit is due to \
http://community.wolfram.com/groups/-/m/t/344278 - the code here was slightly \
outdated so had to be modified.)"
}], "Text",
 CellChangeTimes->{{3.74050026960961*^9, 3.740500351477257*^9}, {
  3.740500426780994*^9, 3.74050042964312*^9}, {3.7405004646806803`*^9, 
  3.740500491445607*^9}, {3.7405007119702377`*^9, 3.740500713266314*^9}, {
  3.74050074332228*^9, 3.740500771031468*^9}, {3.740659320653721*^9, 
  3.7406593214678183`*^9}},ExpressionUUID->"0e21613e-4066-488f-9bbb-\
7c238d20aff8"],

Cell[CellGroupData[{

Cell["JLink and Sockets", "Subsubsection",
 CellChangeTimes->{{3.740500356731647*^9, 3.7405003612929153`*^9}, {
  3.7405009893317633`*^9, 
  3.74050098950314*^9}},ExpressionUUID->"282e94a3-4356-437a-9125-\
8dbb13e5f3ac"],

Cell["\<\
To send accelerometer (or other sensor) data from your phone to Wolfram over \
UDP sockets:\
\>", "Text",
 CellChangeTimes->{{3.7405008117287188`*^9, 3.740501083651286*^9}, {
   3.740501161633162*^9, 3.740501245970561*^9}, 3.740501304289707*^9, {
   3.740659313781485*^9, 
   3.740659316863894*^9}},ExpressionUUID->"641ba64d-f741-4ec3-a9b9-\
f542c10f4ba1"],

Cell[TextData[{
 "\n1. Install the \"Sensorstream IMU+GPS\" app\n2. Ensure the sensors you \
want to stream to Wolfram are ticked on the 'Toggle Sensors' page.  (If you \
want to stream other sensors besides 'Accelerometer', 'Gyroscope' and \
'Magnetic Field', ensure the 'Include User-Checked Sensor Data in Stream' box \
is ticked. Beware, though - the more sensors are ticked, the more latency the \
sensor stream will have.)\n3. On the \"Preferences\" tab:\na. Change the \
target IP address in the app to the IP address of your computer (ensure your \
computer and phone are connected to the same local network)\nb. Set the \
target port to 5555\nc. Set the sensor update frequency to 'Fastest'\nd. \
Select the 'UDP stream' radio box\ne. Tick 'Run in background'\n4. Switch \
stream ON ",
 StyleBox["before",
  FontWeight->"Bold"],
 " executing code. (nb. ensure your phone does not fall asleep during \
streaming - perhaps use the 'Caffeinate' app \
(https://play.google.com/store/apps/details?id=xyz.omnicron.caffeinate&hl=en_\
US) to ensure this.)\n5. Execute the following WL code (in part from \
http://community.wolfram.com/groups/-/m/t/344278):"
}], "Text",
 CellChangeTimes->{{3.7405008117287188`*^9, 3.740501083651286*^9}, {
  3.740501161633162*^9, 3.740501245970561*^9}, {3.740501787885642*^9, 
  3.740501796875119*^9}, {3.740659310631446*^9, 
  3.740659340570066*^9}},ExpressionUUID->"02ee70d3-fdd4-413f-ae21-\
88670b6f874a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"QuitJava", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"InstallJava", "[", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.740500553775758*^9, 3.740500557907783*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"03234597-02ab-4e1b-94c9-76f685ddd1fb"],

Cell["Initialise JLink", "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 
  3.7405007035561333`*^9}},ExpressionUUID->"d70015af-e342-408f-862e-\
24f75a555bc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"udpSocket", "=", 
   RowBox[{"JavaNew", "[", 
    RowBox[{"\"\<java.net.DatagramSocket\>\"", ",", "5555"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"829e05e8-ff25-414e-a10e-7953a1be5d89"],

Cell[TextData[{
 "Initialise a socket connection - ensure ",
 StyleBox["5555",
  FontSlant->"Italic"],
 " is the target port set"
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 3.7405007035561333`*^9}, {
  3.740500801091223*^9, 3.74050080759653*^9}, {3.7405016608621473`*^9, 
  3.7405016723913107`*^9}},ExpressionUUID->"81b4cf8f-5d37-4990-9211-\
5fa83b8c40aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"readSocket", "[", 
   RowBox[{"sock_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"JavaBlock", "@", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"datagramPacket", "=", 
       RowBox[{"JavaNew", "[", 
        RowBox[{"\"\<java.net.DatagramPacket\>\"", ",", 
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", "size"}], "]"}], ",", "size"}], "]"}]}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"sock", "@", 
       RowBox[{"receive", "[", "datagramPacket", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"datagramPacket", "@", 
       RowBox[{"getData", "[", "]"}]}]}]}], "]"}]}]}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"357db565-c233-4e3a-b4f6-3ea2ae0dfb7b"],

Cell[TextData[{
 "Function that reads ",
 StyleBox["size",
  FontSlant->"Italic"],
 " bytes of a function."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 3.7405007035561333`*^9}, {
  3.740500801091223*^9, 3.74050080759653*^9}, {3.7405016608621473`*^9, 
  3.740501697307526*^9}, {3.740501744673044*^9, 
  3.740501745549375*^9}},ExpressionUUID->"484bdb53-ef63-4fb6-952e-\
e282df6d5f1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listen", "[", "]"}], ":=", 
   RowBox[{"record", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"readSocket", "[", 
         RowBox[{"udpSocket", ",", "1200"}], "]"}], ",", "0"}], "]"}], "//", 
      "FromCharacterCode"}], "//", "Sow"}]}]}], ";"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"e3defc39-b381-41a4-8da4-9218f723759c"],

Cell["\<\
Function that reads from the socket, processes data and \[OpenCurlyQuote]sows\
\[CloseCurlyQuote] it to be collected later\
\>", "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 3.7405007035561333`*^9}, {
  3.740500801091223*^9, 3.74050080759653*^9}, {3.7405016608621473`*^9, 
  3.740501697307526*^9}, {3.740501744673044*^9, 3.740501745549375*^9}, {
  3.7405021333178377`*^9, 
  3.740502208950739*^9}},ExpressionUUID->"d0ecf446-d67b-4d54-a629-\
1e91fa43236a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"results", "=", 
   RowBox[{"{", "}"}]}], ";", 
  RowBox[{"RunScheduledTask", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"results", ",", 
       RowBox[{"Quiet", "[", 
        RowBox[{"Reap", "[", 
         RowBox[{"listen", "[", "]"}], "]"}], "]"}]}], "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "results", "]"}], ">", "700"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{"results", ",", "150"}], "]"}]}], "]"}]}], ",", "0.01"}], 
   "]"}], ";"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"a12031a6-d96a-4f72-b70c-f7d45e8316dd"],

Cell[TextData[{
 "Initialises the ",
 StyleBox["results",
  FontSlant->"Italic"],
 " list and repeatedly appends accelerometer data to it every 0.01 seconds - \
if the list is over 700 elements long, the 150 oldest elements (at start of \
list) are removed."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 3.7405007035561333`*^9}, {
  3.740500801091223*^9, 3.74050080759653*^9}, {3.7405016608621473`*^9, 
  3.740501697307526*^9}, {3.740501744673044*^9, 3.740501745549375*^9}, {
  3.7405021333178377`*^9, 3.740502249760312*^9}, {3.7405023174358892`*^9, 
  3.7405023281400537`*^9}, {3.740502559717064*^9, 
  3.7405025774440937`*^9}},ExpressionUUID->"b05e67a9-9e6e-4927-8e82-\
9dca3776278e"],

Cell[BoxData[
 RowBox[{"stream", ":=", 
  RowBox[{"Refresh", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"ToExpression", "[", 
       RowBox[{"StringSplit", "[", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<,\>\""}], "]"}], "]"}], 
      "&"}], " ", "/@", " ", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"results", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"-", "500"}], ";;"}], "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "#", "]"}], "\[Equal]", "List"}], "&"}]}], 
      "]"}]}], ",", 
    RowBox[{"UpdateInterval", "\[Rule]", " ", "0.01"}]}], "]"}]}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"10bf6784-78e0-422b-92a1-c0768719c1d1"],

Cell[TextData[{
 "Initialises the ",
 StyleBox["stream",
  FontSlant->"Italic"],
 " list to be refreshed every 0.01 seconds with the most recent 500 elements \
of ",
 StyleBox["results",
  FontSlant->"Italic"],
 ". Each element of ",
 StyleBox["results",
  FontSlant->"Italic"],
 " is a string of transmitted socket data (e.g. \
\[OpenCurlyDoubleQuote]225585.00455, 3,  -1.591,  8.624,  5.106, 4,  -0.193, \
-0.690, -0.072\[CloseCurlyDoubleQuote]) - this is split into a list of \
strings {\[OpenCurlyDoubleQuote]225585.00455\[CloseCurlyDoubleQuote], \
\[CloseCurlyDoubleQuote]3\[CloseCurlyDoubleQuote], \
\[CloseCurlyDoubleQuote]-1.591\[CloseCurlyDoubleQuote]...} and each string is \
converted to a numerical expression."
}], "NumberedFigureCaption",
 CellChangeTimes->{{3.74050070012306*^9, 3.7405007035561333`*^9}, {
  3.740500801091223*^9, 3.74050080759653*^9}, {3.7405016608621473`*^9, 
  3.740501697307526*^9}, {3.740501744673044*^9, 3.740501745549375*^9}, {
  3.7405021333178377`*^9, 3.740502249760312*^9}, {3.7405023174358892`*^9, 
  3.7405023281400537`*^9}, {3.740502559717064*^9, 3.7405025774440937`*^9}, {
  3.740502698551454*^9, 
  3.74050279965168*^9}},ExpressionUUID->"898c7f24-9fc6-4bd4-8847-\
dbe5ab4f4428"],

Cell[TextData[{
 StyleBox["Stream",
  FontSlant->"Italic"],
 " now contains the 500 most recent accelerometer readings, stored in an \
array. The values of Stream will be updated whenever the variable is used \
within a ",
 StyleBox["Dynamic",
  FontSlant->"Italic"],
 ". (Note that, with the default sensors enabled - the first three boxes \
ticked on the ",
 StyleBox["Toggle Sensors",
  FontSlant->"Italic"],
 " tab - the x, y and z coordinates of the accelerometer can be accessed at \
elements 3, 4 and 5 in each list in the array. (e.g. to access the most \
recent accelerometer reading, run stream\[LeftDoubleBracket]-1,3;;5\
\[RightDoubleBracket])"
}], "Text",
 CellChangeTimes->{{3.740502966026466*^9, 3.7405029750901833`*^9}, {
  3.7405031026043043`*^9, 3.740503132460102*^9}, {3.740571376770524*^9, 
  3.740571425099156*^9}, {3.740571502918407*^9, 3.740571559684432*^9}, {
  3.740571862580652*^9, 3.740571885283987*^9}, {3.740571917128221*^9, 
  3.740571967843706*^9}, {3.740582111056473*^9, 
  3.740582125589628*^9}},ExpressionUUID->"5e8c0e07-f938-492f-9f6c-\
932adc4129a4"],

Cell[TextData[{
 "The accelerometer data can then be visualised using a ",
 StyleBox["ListLinePlot",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.7405719886457376`*^9, 3.740571998501439*^9}, {
  3.740582100805916*^9, 3.7405821374422293`*^9}, {3.740584394642514*^9, 
  3.740584396309717*^9}},ExpressionUUID->"4ff1089f-4108-4f76-a376-\
822785e22a29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "results", "]"}], "<", "500"}], ",", 
    RowBox[{"Pause", "[", "2", "]"}]}], "]"}], ";", 
  RowBox[{"Dynamic", "[", 
   RowBox[{"Refresh", "[", 
    RowBox[{
     RowBox[{"ListLinePlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"stream", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", 
         RowBox[{"stream", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "4"}], "]"}], "]"}], ",", 
         RowBox[{"stream", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "5"}], "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
     RowBox[{"UpdateInterval", "\[Rule]", "0.1"}]}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"5d3d52a3-860b-4382-bc18-2f9484ca72bb"],

Cell[BoxData[
 RowBox[{"<", 
  RowBox[{"Insert", " ", "Visualisation", " ", "Here"}], ">"}]], "Input",
 CellChangeTimes->{{3.740584357894174*^9, 
  3.7405843643063583`*^9}},ExpressionUUID->"f3510f67-62cc-447c-a608-\
ea4802dead92"],

Cell["To get the most recent accelerometer data, run", "Text",
 CellChangeTimes->{{3.740611188729369*^9, 
  3.740611206898098*^9}},ExpressionUUID->"7f96f123-30cf-4cc7-873f-\
fa2da3b769e1"],

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"stream", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"3", ";;", "5"}]}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740611207682407*^9, 
  3.740611214301572*^9}},ExpressionUUID->"d7f167bf-6109-458c-9b9b-\
c116f3012b8b"],

Cell["\<\
To end socket transmission, turn off the stream on the app, run\
\>", "Text",
 CellChangeTimes->{{3.7405025863604603`*^9, 
  3.7405026126234083`*^9}},ExpressionUUID->"924282ca-e474-42e3-a69a-\
d1ae37f7deb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RemoveScheduledTask", "[", 
   RowBox[{"ScheduledTasks", "[", "]"}], "]"}], ";"}]], "Input",ExpressionUUID\
->"eb6437a2-f69c-490b-8ed9-36c040445993"],

Cell["and run", "Text",
 CellChangeTimes->{{3.740502614140226*^9, 
  3.740502616561573*^9}},ExpressionUUID->"151fb008-b589-4027-a040-\
a12e6e274c70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"QuitJava", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.74050263077238*^9, 
  3.7405026363699207`*^9}},ExpressionUUID->"26a9a474-6d65-4883-9915-\
fca256bd211a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Channel Transmission", "Subsection",
 CellChangeTimes->{{3.740584744277606*^9, 
  3.740584751659577*^9}},ExpressionUUID->"010c671a-2ea3-4c1b-9f43-\
7c7fe399a0c1"],

Cell[CellGroupData[{

Cell["Channel Basics", "Subsubsection",
 CellChangeTimes->{{3.740616303031152*^9, 
  3.740616304848942*^9}},ExpressionUUID->"7cea955e-2881-44a2-961a-\
70ceb090f3c1"],

Cell["\<\
An alternative way to send data from a phone to the Wolfram Cloud is by using \
the Channel framework. Introduced in version 11 of the Wolfram Language. the \
Channel framework allows asynchronous communication between Wolfram sessions \
as well as external systems, with communication being brokered in the Wolfram \
Cloud. A key point to note about the Channel framework is that it is based on \
a publish-subscribe model, allowing messages to be sent and received through \
a \[OpenCurlyQuote]channel\[CloseCurlyQuote] rather than pairing specific \
senders and receivers.

Setting up a channel is as easy as connecting to the Wolfram Cloud\
\>", "Text",
 CellChangeTimes->{{3.740584752763665*^9, 3.7405847703166513`*^9}, {
  3.740584819417202*^9, 3.7405848959432487`*^9}, {3.740584970190806*^9, 
  3.7405849828818502`*^9}, {3.740605572149523*^9, 3.740605603031979*^9}, {
  3.740607975175705*^9, 3.740607978744331*^9}, {3.740612166134139*^9, 
  3.740612207980466*^9}, {3.740638171985239*^9, 3.740638183275828*^9}, {
  3.740839011207355*^9, 
  3.740839012005838*^9}},ExpressionUUID->"683aaad3-7791-46ba-be0c-\
508a9531e01c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CloudConnect", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.740638186810268*^9, 3.7406381925555267`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"e36bc533-874c-47dd-83f6-1657823a48ad"],

Cell["and typing", "Text",
 CellChangeTimes->{{3.740584752763665*^9, 3.7405847703166513`*^9}, {
  3.740584819417202*^9, 3.7405848959432487`*^9}, {3.740584970190806*^9, 
  3.7405849828818502`*^9}, {3.740605572149523*^9, 3.740605603031979*^9}, {
  3.740607975175705*^9, 3.740607978744331*^9}, {3.740612166134139*^9, 
  3.740612207980466*^9}, {3.740638171985239*^9, 
  3.74063818577564*^9}},ExpressionUUID->"74cd64fd-834a-4c1d-8305-\
b7a56f84ad16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"current", "=", "\"\<\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.740638663377019*^9, 3.740638664434128*^9}, {
  3.740658964713429*^9, 3.740658965440158*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"5ba28b25-da37-465f-bd8b-496fb1fa5890"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Func", "[", "x_", "]"}], ":=", 
   RowBox[{"current", "=", "x"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740638650703459*^9, 3.740638661946288*^9}, {
  3.7406589671899157`*^9, 3.740658968703505*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"152926e5-e37c-4159-bdd9-faca45d89fbc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listener", "=", 
  RowBox[{"ChannelListen", "[", 
   RowBox[{"\"\<NameOfChannel\>\"", ",", 
    RowBox[{
     RowBox[{"Func", "[", "#Message", "]"}], "&"}], ",", " ", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7406160640027533`*^9, 3.740616079746608*^9}, 
   3.74063733238741*^9, {3.740638141617961*^9, 3.740638144310651*^9}, {
   3.74063864609549*^9, 3.7406386834018*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"d51780ea-1c18-49d6-8a03-ad0dd44d9cd6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ChannelListener",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"], 
               ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.04], 
              FaceForm[{
                RGBColor[0.537, 0.537, 0.537], 
                Opacity[1.]}], 
              
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQLeYR8EdCWMchu6JqqY6zvoP/H4ni659UHJZVHte0
MjJ0SKq/aVu5Q9UhXSkHqELLwcHuxc01VjIOkV933ur6q+HgeD7t6nMvZYd1
zM97NHSV4fJRG/e/mbdHyuHK8yztb9tVHTh+LkjfnCXucChlVUII0PwLV8Pe
6O/+b9+54eHLqUI6Dn9mckjPi+NxCDXQWinMYODQwDfHeNGW4/bzbHSuzPpm
CJffPW0Cf1WbqcOHmNyj/zb9tzcCaVA2dXh38rDT2kxxh2DWxZOsPlo4cKho
1PXslHIACt4rjDKDuw8mv1EvbzHjHw0HoCttdFRMHYCeSf2+RMuBv8pstV27
qcMD3QkLfhgaOqR2JMfeAdp/7wH35JVO+nD3TTpd77H/r5EDAGj4jZA=
                "], {{14.846299999999998`, 15.034199999999998`}, {16.0003, 
                17.0092}, {17.1543, 15.034199999999998`}, {16.0003, 
                13.560199999999998`}}, {{13.265299999999998`, 
                14.252199999999998`}, {12.577299999999997`, 
                15.180199999999997`}, {13.928299999999998`, 
                14.587199999999998`}, {14.546299999999999`, 
                13.796199999999999`}}, {{18.0733, 14.586199999999998`}, {
                19.423299999999998`, 15.179199999999998`}, {18.7353, 
                14.252199999999998`}, {17.455299999999998`, 
                13.797199999999998`}}, {{19.5403, 13.661199999999997`}, {
                20.2673, 14.640199999999998`}, {20.1143, 
                13.108199999999998`}, {19.502299999999998`, 12.2412}}, {{
                11.887299999999998`, 13.111199999999998`}, {
                11.734299999999998`, 14.640199999999998`}, {
                12.458299999999998`, 13.661199999999997`}, {12.4973, 
                12.243199999999998`}}, {{16.499299999999998`, 
                12.396199999999999`}, {18.5263, 13.1162}, {
                18.467299999999998`, 10.963199999999999`}, {
                16.499299999999998`, 10.300199999999997`}}, {{
                13.533299999999999`, 10.963199999999999`}, {
                13.474299999999998`, 13.1162}, {15.499299999999998`, 
                12.396199999999999`}, {15.499299999999998`, 
                10.300199999999997`}}, {{8.9423, 11.882199999999997`}, {
                11.184299999999999`, 12.370199999999997`}, {
                12.259299999999998`, 10.843199999999998`}, {
                10.462299999999999`, 10.176199999999998`}}, {{19.7393, 
                10.843199999999998`}, {20.8153, 12.369199999999998`}, {
                23.058299999999996`, 11.881199999999998`}, {21.5383, 
                10.175199999999997`}}, {{16.8083, 9.350199999999997}, {
                18.778299999999998`, 10.013199999999998`}, {20.0873, 
                8.312199999999997}, {18.021299999999997`, 
                7.704199999999998}}, {{11.913299999999998`, 
                8.312199999999997}, {13.222299999999999`, 
                10.013199999999998`}, {15.191299999999998`, 
                9.350199999999997}, {13.978299999999999`, 
                7.704199999999998}}, {{10.607299999999999`, 
                9.164199999999997}, {11.585299999999998`, 9.5262}, {
                10.768299999999998`, 8.464199999999998}, {9.6403, 
                8.079199999999998}}, {{21.2323, 8.463199999999999}, {
                20.414299999999997`, 9.525199999999998}, {21.393299999999996`,
                 9.163199999999998}, {22.3603, 8.077199999999998}}, {{
                14.786299999999999`, 7.1141999999999985`}, {16.0003, 
                8.761199999999999}, {17.214299999999998`, 
                7.1141999999999985`}, {16.0003, 5.342199999999998}}, {{
                19.5373, 7.107199999999999}, {20.917299999999997`, 
                7.515199999999998}, {22.1423, 7.095199999999998}, {
                20.621299999999998`, 6.764199999999997}}, {{9.858299999999998,
                 7.096199999999998}, {11.083299999999998`, 
                7.514199999999999}, {12.462299999999999`, 
                7.108199999999998}, {11.377299999999998`, 
                6.764199999999997}}, {{11.866299999999999`, 
                5.871199999999998}, {13.689299999999998`, 
                6.447199999999999}, {13.735299999999999`, 
                4.5051999999999985`}, {11.6383, 3.5851999999999986`}}, {{
                18.263299999999997`, 4.5051999999999985`}, {18.3113, 
                6.447199999999999}, {20.1333, 5.870199999999999}, {
                20.361299999999996`, 3.584199999999999}}, {{
                14.740299999999998`, 4.323199999999998}, {14.713299999999998`,
                 5.452199999999998}, {15.499299999999998`, 
                4.303199999999999}, {15.499299999999998`, 
                3.023199999999999}}, {{16.499299999999998`, 
                4.303199999999999}, {17.286299999999997`, 
                5.451199999999998}, {17.2593, 4.323199999999998}, {
                16.499299999999998`, 3.0241999999999987`}}, {{
                0.7933000000000003, 14.500199999999998`}, {
                3.6462999999999983`, 11.647199999999998`}, {4.353299999999999,
                 12.353199999999998`}, {2.7072999999999983`, 
                14.000199999999998`}, {7.000299999999998, 
                14.000199999999998`}, {7.000299999999998, 
                15.000199999999998`}, {2.7072999999999983`, 
                15.000199999999998`}, {4.353299999999999, 
                16.646199999999997`}, {3.6462999999999983`, 17.3542}}, {{
                3.6462999999999983`, 6.646199999999997}, {5.2933, 
                5.0001999999999995`}, {1.0002999999999993`, 
                5.0001999999999995`}, {1.0002999999999993`, 
                3.9991999999999983`}, {5.2933, 3.9991999999999983`}, {
                3.6462999999999983`, 2.3531999999999993`}, {4.353299999999999,
                 1.6461999999999968`}, {7.207299999999998, 
                4.5001999999999995`}, {4.353299999999999, 
                7.354199999999999}}}]}, AspectRatio -> Automatic, 
             ImageSize -> {Automatic, 
               Dynamic[
               3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                Magnification]]}, PlotRange -> {{0., 25.}, {0., 19.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Channel: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"euan.l.y.ong@gmail.com:NameOfChannel\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"UAhA1e\"", "SummaryItem"]}]}, {
               TagBox[
                DynamicModuleBox[{ChannelFramework`Private`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, ChannelFramework`Private`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2], 
                    Opacity[0.2]}, 
                  ChannelFramework`Private`status$$ = {
                   "Active", "Stopped", "Inactive"}, 
                  ChannelFramework`Private`hlen$$ = DirectedInfinity[1], 
                  ChannelFramework`Private`d$$ = "UAhA1e", 
                  ChannelFramework`Private`stat$$ = 3, 
                  ChannelFramework`Private`ind$$ = 3, 
                  ChannelFramework`Private`cnt$$ = 0, 
                  ChannelFramework`Private`tot$$}, 
                 TemplateBox[{
                   RowBox[{
                    TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ChannelFramework`Private`stat$$ = 
                    ChannelFramework`Private`listenerStatus[
                    ChannelFramework`Private`d$$]; 
                    ChannelFramework`Private`ind$$ = If[
                    IntegerQ[ChannelFramework`Private`stat$$], 
                    ChannelFramework`Private`stat$$, 3]; Style[
                    Row[{
                    Part[
                    ChannelFramework`Private`lights$$, 
                    ChannelFramework`Private`ind$$], 
                    Part[
                    ChannelFramework`Private`status$$, 
                    ChannelFramework`Private`ind$$]}], 
                    Part[ChannelFramework`Private`opacities$$, 1]], 
                    StandardForm]], "SummaryItem"]}], 
                   TemplateBox[{20}, "Spacer1"], 
                   RowBox[{
                    TagBox["\"Message count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    DynamicBox[
                    ToBoxes[
                    ChannelListener["UAhA1e"]; 
                    ChannelFramework`Private`cnt$$ = 
                    Function[{
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"], 
                    StandardForm]], "\"\""}, "RowDefault"], "SummaryItem"]}]},
                   "RowDefault"], DynamicModuleValues :> {}, 
                 Initialization :> (If[Context["ChannelObject"] =!= "System`", 
                    Get["ChannelFramework`"]]; 
                  Clear[ChannelFramework`Private`cnt$$])], "SummaryItem"], 
               ""}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.04], 
              FaceForm[{
                RGBColor[0.537, 0.537, 0.537], 
                Opacity[1.]}], 
              
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQLeYR8EdCWMchu6JqqY6zvoP/H4ni659UHJZVHte0
MjJ0SKq/aVu5Q9UhXSkHqELLwcHuxc01VjIOkV933ur6q+HgeD7t6nMvZYd1
zM97NHSV4fJRG/e/mbdHyuHK8yztb9tVHTh+LkjfnCXucChlVUII0PwLV8Pe
6O/+b9+54eHLqUI6Dn9mckjPi+NxCDXQWinMYODQwDfHeNGW4/bzbHSuzPpm
CJffPW0Cf1WbqcOHmNyj/zb9tzcCaVA2dXh38rDT2kxxh2DWxZOsPlo4cKho
1PXslHIACt4rjDKDuw8mv1EvbzHjHw0HoCttdFRMHYCeSf2+RMuBv8pstV27
qcMD3QkLfhgaOqR2JMfeAdp/7wH35JVO+nD3TTpd77H/r5EDAGj4jZA=
                "], {{14.846299999999998`, 15.034199999999998`}, {16.0003, 
                17.0092}, {17.1543, 15.034199999999998`}, {16.0003, 
                13.560199999999998`}}, {{13.265299999999998`, 
                14.252199999999998`}, {12.577299999999997`, 
                15.180199999999997`}, {13.928299999999998`, 
                14.587199999999998`}, {14.546299999999999`, 
                13.796199999999999`}}, {{18.0733, 14.586199999999998`}, {
                19.423299999999998`, 15.179199999999998`}, {18.7353, 
                14.252199999999998`}, {17.455299999999998`, 
                13.797199999999998`}}, {{19.5403, 13.661199999999997`}, {
                20.2673, 14.640199999999998`}, {20.1143, 
                13.108199999999998`}, {19.502299999999998`, 12.2412}}, {{
                11.887299999999998`, 13.111199999999998`}, {
                11.734299999999998`, 14.640199999999998`}, {
                12.458299999999998`, 13.661199999999997`}, {12.4973, 
                12.243199999999998`}}, {{16.499299999999998`, 
                12.396199999999999`}, {18.5263, 13.1162}, {
                18.467299999999998`, 10.963199999999999`}, {
                16.499299999999998`, 10.300199999999997`}}, {{
                13.533299999999999`, 10.963199999999999`}, {
                13.474299999999998`, 13.1162}, {15.499299999999998`, 
                12.396199999999999`}, {15.499299999999998`, 
                10.300199999999997`}}, {{8.9423, 11.882199999999997`}, {
                11.184299999999999`, 12.370199999999997`}, {
                12.259299999999998`, 10.843199999999998`}, {
                10.462299999999999`, 10.176199999999998`}}, {{19.7393, 
                10.843199999999998`}, {20.8153, 12.369199999999998`}, {
                23.058299999999996`, 11.881199999999998`}, {21.5383, 
                10.175199999999997`}}, {{16.8083, 9.350199999999997}, {
                18.778299999999998`, 10.013199999999998`}, {20.0873, 
                8.312199999999997}, {18.021299999999997`, 
                7.704199999999998}}, {{11.913299999999998`, 
                8.312199999999997}, {13.222299999999999`, 
                10.013199999999998`}, {15.191299999999998`, 
                9.350199999999997}, {13.978299999999999`, 
                7.704199999999998}}, {{10.607299999999999`, 
                9.164199999999997}, {11.585299999999998`, 9.5262}, {
                10.768299999999998`, 8.464199999999998}, {9.6403, 
                8.079199999999998}}, {{21.2323, 8.463199999999999}, {
                20.414299999999997`, 9.525199999999998}, {21.393299999999996`,
                 9.163199999999998}, {22.3603, 8.077199999999998}}, {{
                14.786299999999999`, 7.1141999999999985`}, {16.0003, 
                8.761199999999999}, {17.214299999999998`, 
                7.1141999999999985`}, {16.0003, 5.342199999999998}}, {{
                19.5373, 7.107199999999999}, {20.917299999999997`, 
                7.515199999999998}, {22.1423, 7.095199999999998}, {
                20.621299999999998`, 6.764199999999997}}, {{9.858299999999998,
                 7.096199999999998}, {11.083299999999998`, 
                7.514199999999999}, {12.462299999999999`, 
                7.108199999999998}, {11.377299999999998`, 
                6.764199999999997}}, {{11.866299999999999`, 
                5.871199999999998}, {13.689299999999998`, 
                6.447199999999999}, {13.735299999999999`, 
                4.5051999999999985`}, {11.6383, 3.5851999999999986`}}, {{
                18.263299999999997`, 4.5051999999999985`}, {18.3113, 
                6.447199999999999}, {20.1333, 5.870199999999999}, {
                20.361299999999996`, 3.584199999999999}}, {{
                14.740299999999998`, 4.323199999999998}, {14.713299999999998`,
                 5.452199999999998}, {15.499299999999998`, 
                4.303199999999999}, {15.499299999999998`, 
                3.023199999999999}}, {{16.499299999999998`, 
                4.303199999999999}, {17.286299999999997`, 
                5.451199999999998}, {17.2593, 4.323199999999998}, {
                16.499299999999998`, 3.0241999999999987`}}, {{
                0.7933000000000003, 14.500199999999998`}, {
                3.6462999999999983`, 11.647199999999998`}, {4.353299999999999,
                 12.353199999999998`}, {2.7072999999999983`, 
                14.000199999999998`}, {7.000299999999998, 
                14.000199999999998`}, {7.000299999999998, 
                15.000199999999998`}, {2.7072999999999983`, 
                15.000199999999998`}, {4.353299999999999, 
                16.646199999999997`}, {3.6462999999999983`, 17.3542}}, {{
                3.6462999999999983`, 6.646199999999997}, {5.2933, 
                5.0001999999999995`}, {1.0002999999999993`, 
                5.0001999999999995`}, {1.0002999999999993`, 
                3.9991999999999983`}, {5.2933, 3.9991999999999983`}, {
                3.6462999999999983`, 2.3531999999999993`}, {4.353299999999999,
                 1.6461999999999968`}, {7.207299999999998, 
                4.5001999999999995`}, {4.353299999999999, 
                7.354199999999999}}}]}, AspectRatio -> Automatic, 
             ImageSize -> {Automatic, 
               Dynamic[
               3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                Magnification]]}, PlotRange -> {{0., 25.}, {0., 19.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Channel: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"euan.l.y.ong@gmail.com:NameOfChannel\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"UAhA1e\"", "SummaryItem"]}]}, {
               TagBox[
                DynamicModuleBox[{ChannelFramework`Private`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, ChannelFramework`Private`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2], 
                    Opacity[0.2]}, 
                  ChannelFramework`Private`status$$ = {
                   "Active", "Stopped", "Inactive"}, 
                  ChannelFramework`Private`hlen$$ = DirectedInfinity[1], 
                  ChannelFramework`Private`d$$ = "UAhA1e", 
                  ChannelFramework`Private`stat$$, 
                  ChannelFramework`Private`ind$$, 
                  ChannelFramework`Private`cnt$$, 
                  ChannelFramework`Private`tot$$}, 
                 TemplateBox[{
                   RowBox[{
                    TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ChannelFramework`Private`stat$$ = 
                    ChannelFramework`Private`listenerStatus[
                    ChannelFramework`Private`d$$]; 
                    ChannelFramework`Private`ind$$ = If[
                    IntegerQ[ChannelFramework`Private`stat$$], 
                    ChannelFramework`Private`stat$$, 3]; Style[
                    Row[{
                    Part[
                    ChannelFramework`Private`lights$$, 
                    ChannelFramework`Private`ind$$], 
                    Part[
                    ChannelFramework`Private`status$$, 
                    ChannelFramework`Private`ind$$]}], 
                    Part[ChannelFramework`Private`opacities$$, 1]], 
                    StandardForm]], "SummaryItem"]}], 
                   TemplateBox[{20}, "Spacer1"], 
                   RowBox[{
                    TagBox["\"Message count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    DynamicBox[
                    ToBoxes[
                    ChannelListener["UAhA1e"]; 
                    ChannelFramework`Private`cnt$$ = 
                    Function[{
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"], 
                    StandardForm]], "\"\""}, "RowDefault"], "SummaryItem"]}]},
                   "RowDefault"], DynamicModuleValues :> {}, 
                 Initialization :> (If[Context["ChannelObject"] =!= "System`", 
                    Get["ChannelFramework`"]]; 
                  Clear[ChannelFramework`Private`cnt$$])], "SummaryItem"], 
               ""}, {
               TagBox[
                
                DynamicModuleBox[{
                 ChannelFramework`Private`as$$ = 
                  Association[
                   "URLRendering" -> Automatic, ChannelBase -> 
                    "https://channelbroker.wolframcloud.com:443", Permissions -> 
                    "Public", NotificationFunction -> Inherited, 
                    MetaInformation -> {}, Initialization -> Automatic, 
                    HandlerFunctions -> Automatic, ChannelPreSendFunction -> 
                    Automatic, ChannelBrokerAction -> Automatic, "Scheme" -> 
                    "https", "Domain" -> "channelbroker.wolframcloud.com", 
                    "Port" -> 443, "Path" -> 
                    "/users/euan.l.y.ong@gmail.com/NameOfChannel", "URL" -> 
                    "https://channelbroker.wolframcloud.com:443/users/euan.l.\
y.ong@gmail.com/NameOfChannel", "DisplayURL" -> 
                    "https://channelbroker.wolframcloud.com/users/euan.l.y.\
ong@gmail.com/NameOfChannel"], ChannelFramework`Private`owner$$ = 
                  "euan.l.y.ong@gmail.com", ChannelFramework`Private`d$$ = 
                  "UAhA1e", ChannelFramework`Private`bin$$ = None, 
                  ChannelFramework`Private`cnt$$}, 
                 DynamicBox[
                  ToBoxes[
                  ChannelFramework`Private`cnt$$ = 
                    Function[{
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"]; 
                   Column[{
                    Apply[Sequence, 
                    If[ChannelFramework`Private`cnt$$ > 0, 
                    ChannelFramework`Private`cloudDynamic[{
                    BoxForm`SummaryItem[{"Latest message: ", 
                    ChannelFramework`Private`shorten[
                    ChannelListener["UAhA1e"]["Message"]]}], 
                    BoxForm`SummaryItem[{"Message from: ", 
                    ChannelListener["UAhA1e"]["RequesterWolframID"]}], 
                    BoxForm`SummaryItem[{"Requester address: ", 
                    ChannelListener["UAhA1e"]["RequesterAddress"]}], 
                    BoxForm`SummaryItem[{"Timestamp: ", 
                    DateString[
                    ChannelListener["UAhA1e"]["Timestamp"]]}]}], {}]], 
                    If[ChannelFramework`Private`owner$$ === "", 
                    Apply[Sequence, {}], 
                    
                    BoxForm`SummaryItem[{
                    "Channel owner: ", ChannelFramework`Private`owner$$}]], 
                    If[ChannelFramework`Private`bin$$ === None, 
                    Apply[Sequence, {}], 
                    
                    BoxForm`SummaryItem[{
                    "Databin ID: ", ChannelFramework`Private`bin$$}]], 
                    BoxForm`SummaryItem[{"Channel base: ", 
                    ChannelFramework`Private`urlStringAuto[
                    ChannelFramework`Private`as$$[ChannelBase]]}]}], 
                   StandardForm]], DynamicModuleValues :> {}, Initialization :> 
                 Clear[ChannelFramework`Private`cnt$$]], "SummaryItem"], ""}},
              AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ChannelListener["UAhA1e"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7406373413953247`*^9, 3.740638176768181*^9, 3.7406384814956617`*^9, {
   3.74063868429954*^9, 3.7406386957598867`*^9}, 3.7406387452306757`*^9, 
   3.7406589835308847`*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"8cbd378c-6a6a-4a3a-ad3e-6cee16abd73c"]
}, Open  ]],

Cell[TextData[{
 "Here, ",
 StyleBox["Func",
  FontSlant->"Italic"],
 " is a function that will be called each time the channel receives a message \
(the message is supplied as an argument to the function) - it simply sets the \
variable \[OpenCurlyQuote]current\[CloseCurlyQuote] to the data last sent to \
the channel (in the form of key-value pairs - e.g. <|x=3, y=4, z=1|>. To make \
the channel accessible to other users, ensure the channel has Permissions set \
to Public."
}], "Text",
 CellChangeTimes->{{3.740616097902761*^9, 3.7406161539491377`*^9}, {
  3.740616212407905*^9, 3.740616249471428*^9}, {3.740638149146346*^9, 
  3.7406381493776617`*^9}, {3.740658991267777*^9, 
  3.740659130937109*^9}},ExpressionUUID->"2e40aa6f-4f87-4fb7-bd3a-\
0c9343139fe1"],

Cell["To delete the channel (useful when debugging), call", "Text",
 CellChangeTimes->{{3.740616268124374*^9, 
  3.740616285048081*^9}},ExpressionUUID->"a13f9e51-8b5b-4dd5-816d-\
cccddb445436"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RemoveChannelListener", "[", "listener", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.740616285682701*^9, 3.740616290071815*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"b9d7ca39-98c2-4829-951e-ba039972fa83"],

Cell[TextData[{
 "\nOne particularly useful feature of the Channel is that it has built-in \
support for receiving and parsing HTTP requests - simply send a GET request \
to the channel URL (given by ",
 StyleBox["listener[\[OpenCurlyDoubleQuote]URL\[CloseCurlyDoubleQuote]]",
  FontSlant->"Italic"],
 ") and the WL will automatically parse the parameters and make the data \
available to the user: \n\nFor instance, if we send an HTTP GET request to ",
 StyleBox["https://channelbroker.wolframcloud.com/users/<your Wolfram Cloud \
email address>/NameOfChannel",
  FontSlant->"Italic"],
 " and append the parameters \[OpenCurlyDoubleQuote]",
 StyleBox["operation=send",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] (indicates data is being sent to the channel) and \
\[OpenCurlyDoubleQuote]",
 StyleBox["test=5",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]:"
}], "Text",
 CellChangeTimes->{{3.740584752763665*^9, 3.7405847703166513`*^9}, {
  3.740584819417202*^9, 3.7405848959432487`*^9}, {3.740584970190806*^9, 
  3.7405849828818502`*^9}, {3.740605572149523*^9, 3.740605603031979*^9}, {
  3.740607975175705*^9, 3.740607978744331*^9}, {3.740612166134139*^9, 
  3.740612197474669*^9}, {3.740616324859397*^9, 3.740616391076889*^9}, {
  3.7406169189073277`*^9, 3.7406169286905413`*^9}, {3.740637361167616*^9, 
  3.740637364583343*^9}, {3.740637822065074*^9, 3.74063790669284*^9}, {
  3.740658869825337*^9, 
  3.740658902550177*^9}},ExpressionUUID->"67dd2c53-28c0-4b6b-b313-\
5bd86cc96be8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BaseURL", "=", 
  RowBox[{"listener", "[", "\"\<URL\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.740637934041142*^9, 3.740637950780508*^9}, {
  3.740637988829789*^9, 3.7406379923929462`*^9}, {3.740638078976313*^9, 
  3.740638081661508*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"963aca0f-b094-4ed1-b42c-25ddac9df03d"],

Cell[BoxData["\<\"https://channelbroker.wolframcloud.com/users/euan.l.y.ong@\
gmail.com/NameOfChannel\"\>"], "Output",
 CellChangeTimes->{3.74063808205066*^9, 3.7406387100962543`*^9, 
  3.740659169845237*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"74c1807a-78c0-472e-89db-70a124db2872"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Params", " ", "=", " ", "\"\<?operation=send&test=5\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.740637953118451*^9, 3.740637960132885*^9}, {
  3.7406380682973833`*^9, 3.7406380723552103`*^9}, {3.74063863013227*^9, 
  3.740638639723324*^9}, {3.740638783352714*^9, 3.740638783873461*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"7ca7abf6-4b7d-48a0-b14c-a628afd265ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"URLRead", "[", 
  RowBox[{"HTTPRequest", "[", 
   RowBox[{
    RowBox[{"BaseURL", "<>", "Params"}], ",", 
    RowBox[{"<|", 
     RowBox[{"Method", "->", "\"\<Get\>\""}], "|>"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740637961812787*^9, 3.740637974954419*^9}, {
  3.740638297572653*^9, 3.74063834167559*^9}, {3.740638854939899*^9, 
  3.7406388575753193`*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"6a566a24-b946-4dad-b4cc-d949439ae9c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["HTTPResponse",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            GraphicsBox[{
              RGBColor[0, 
               NCache[
                Rational[2, 3], 0.6666666666666666], 0], 
              DiskBox[{0, 0}], 
              InsetBox[
               FormBox[
                StyleBox["\"200\"", 
                 Directive[10, 
                  GrayLevel[1], Bold], StripOnInput -> False], 
                TraditionalForm], 
               Scaled[{0.53, 0.48}]]}, ImageSize -> 
             Dynamic[{
               Automatic, (3 CurrentValue["FontCapHeight"])/
                AbsoluteCurrentValue[Magnification]}], Background -> None], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"OK\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Content type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"text/plain;charset=iso-8859-1\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GraphicsBox[{
              RGBColor[0, 
               NCache[
                Rational[2, 3], 0.6666666666666666], 0], 
              DiskBox[{0, 0}], 
              InsetBox[
               FormBox[
                StyleBox["\"200\"", 
                 Directive[10, 
                  GrayLevel[1], Bold], StripOnInput -> False], 
                TraditionalForm], 
               Scaled[{0.53, 0.48}]]}, ImageSize -> 
             Dynamic[{
               Automatic, (3 CurrentValue["FontCapHeight"])/
                AbsoluteCurrentValue[Magnification]}], Background -> None], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"OK\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Content type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"text/plain;charset=iso-8859-1\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  HTTPResponse[
   ByteArray[{56, 53, 52, 54, 102, 52, 100, 98, 45, 56, 54, 97, 50, 45, 52, 
    100, 101, 48, 45, 98, 57, 53, 100, 45, 98, 55, 101, 52, 55, 55, 55, 97, 
    100, 100, 49, 101}], 
   Association[
   "Headers" -> {{"Access-Control-Allow-Origin", "*"}, {
      "Content-Type", "text/plain"}, {
      "Date", "Sun, 15 Jul 2018 15:59:33 GMT"}, {
      "Connection", "keep-alive"}, {"Transfer-Encoding", "chunked"}}, 
    "StatusCode" -> 200, "Cookies" -> {
      Association[
      "Domain" -> "channelbroker.wolframcloud.com", "Path" -> "/", "Name" -> 
       "WR_CBR_SID", "Content" -> "36a96d8792b7b24", "ExpirationDate" -> 
       Automatic, "AllowSubdomains" -> False, "ConnectionType" -> "HTTPS", 
       "ScriptAccessible" -> True], 
      Association[
      "Domain" -> "github.com", "Path" -> "/", "Name" -> "_gh_sess", 
       "Content" -> 
       "aS9QSFJpdytVc295anB3Qkg3VDBuOGpjQ2Z3TWErakk1TGl0MlBuWGcvM2M3WnZLdDZZaT\
hGTDdmeGRKQVlnMlN2WmRzSDJHUEJHOGQzRkV3bXg2U1QvL24xOFNERXFhWHdBQ08wWWd5ZlcrVTNP\
UGNxMHUzQkRGaTlWWnF2bGVYZFZIdWtlWjZxRFo2am0weHdOUExVUUkzdm82cDduRUhFM2wySklFNj\
NsYmRZVHIyQlJ5RURJQis4M3BWbWx5LS02dVVveE55ZHI1T2tkZmhPN20xNC9nPT0%3D--\
f4fc3db6001ce2be9d2a657d38e3a913b5958bf3", "ExpirationDate" -> Automatic, 
       "AllowSubdomains" -> False, "ConnectionType" -> "HTTPS", 
       "ScriptAccessible" -> False], 
      Association[
      "Domain" -> "wolframcloud.com", "Path" -> "/", "Name" -> "JSESSIONID", 
       "Content" -> "0B16634C63821D37F9A3F35BEBB265EB", "ExpirationDate" -> 
       Automatic, "AllowSubdomains" -> True, "ConnectionType" -> All, 
       "ScriptAccessible" -> False]}], CharacterEncoding -> Automatic],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.740637975918343*^9, 3.74063799479237*^9}, 
   3.7406380864082613`*^9, {3.740638121500651*^9, 3.740638125306827*^9}, 
   3.7406382376559963`*^9, 3.740638342359578*^9, 3.7406384934674377`*^9, 
   3.7406386423928413`*^9, {3.740638700559898*^9, 3.740638714625613*^9}, 
   3.740638769587788*^9, 3.7406388379411297`*^9, 3.7406388701254272`*^9, 
   3.740659174126089*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"daa3fdb8-8da1-4cc8-ae78-ca988c8a561f"]
}, Open  ]],

Cell["\<\
The variable \[OpenCurlyQuote]current\[CloseCurlyQuote] has now been updated \
and contains the key-value pair \[OpenCurlyQuote]test->5\[CloseCurlyQuote] \
which we just sent to the channel.\
\>", "Text",
 CellChangeTimes->{{3.7406589121064997`*^9, 3.740658930507453*^9}, {
  3.74065914948884*^9, 
  3.740659216947672*^9}},ExpressionUUID->"e31f430e-6502-40f2-8145-\
c1374d3032ae"],

Cell[CellGroupData[{

Cell[BoxData["current"], "Input",
 CellChangeTimes->{{3.740638357838969*^9, 3.7406383890776453`*^9}, {
  3.740658956837775*^9, 3.7406589784724894`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"aae15a0a-bc36-46c8-9009-107dcecb7c08"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"test\"\>", "\[Rule]", "\<\"5\"\>"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7406589573691874`*^9, 3.7406589788104353`*^9}, 
   3.740659175896956*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"936c6175-ec17-4eee-b5b1-621959879129"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"current", "[", 
  RowBox[{"[", "\"\<test\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740659218851359*^9, 3.7406592247886972`*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"3915de66-c6e1-4850-a5d2-2f0bad25d285"],

Cell[BoxData["\<\"5\"\>"], "Output",
 CellChangeTimes->{3.740659225176886*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"037c354e-3643-425c-a9e5-258efa44510a"]
}, Open  ]],

Cell["\<\
An alternative way of viewing the data from the channel is to call\
\>", "Text",
 CellChangeTimes->{{3.740659226351543*^9, 
  3.740659245794341*^9}},ExpressionUUID->"50a46eec-cce5-4b06-865f-\
acc2478c75d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listener", "[", "\"\<TimeSeries\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.740659160182232*^9, 3.7406591639015007`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"8364fbf7-bac7-4b6d-a1b4-c4fb883392c7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"test\"\>", "\[Rule]", 
   InterpretationBox[
    RowBox[{
     TagBox["TimeSeries",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{}, {{}, {}, {
                  GrayLevel[0.5], 
                  PointSize[0.125], 
                  AbsoluteThickness[1.5], 
                  StyleBox[
                   LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                AspectRatio -> 1, Axes -> {False, False}, 
               AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
               GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
               DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{0., 50.}, {-7.030970816185017, 
                4.273359296964368}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{1, 1}, {1, 1}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:59:33.921\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:59:33.921\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{}, {{}, {}, {
                  GrayLevel[0.5], 
                  PointSize[0.125], 
                  AbsoluteThickness[1.5], 
                  StyleBox[
                   LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                AspectRatio -> 1, Axes -> {False, False}, 
               AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
               GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
               DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{0., 50.}, {-7.030970816185017, 
                4.273359296964368}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{1, 1}, {1, 1}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:59:33.921\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:59:33.921\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["True", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\"Day\""}], "}"}], "SummaryItem"]}]}, {
                 TagBox["\"\"", "SummaryItem"], 
                 RowBox[{
                   TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"HoldValueFromLeft\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TemporalData[TimeSeries, {{{"5"}}, {
       TemporalData`DateSpecification[{
        2018, 7, 15, 11, 59, 33.9210000038147}, {
        2018, 7, 15, 11, 59, 33.9210000038147}, {1, "Day"}]}, 1, {
      "Continuous", 1}, {"Discrete", 1}, 1, {
      ResamplingMethod -> {"Interpolation", InterpolationOrder -> 0}, 
       ValueDimensions -> 1, DateFunction -> Automatic}}, True, 11.3],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.740659164721632*^9, 3.7406591776302013`*^9}},
 CellLabel->
  "Out[129]=",ExpressionUUID->"4a63fe8f-b7af-4526-8eda-46b92aa5e255"]
}, Open  ]],

Cell["\<\
This allows the data sent to the channel to be stored as a time series, which \
can be useful in applications such as collecting time-based sensor data.\
\>", "Text",
 CellChangeTimes->{{3.740659248932763*^9, 
  3.740659280625848*^9}},ExpressionUUID->"3464e72d-68a2-4c3e-9c23-\
e1cb4aac91f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transmission of Sensor Data over Channels", "Subsubsection",
 CellChangeTimes->{{3.740659287773325*^9, 3.740659296848886*^9}, {
  3.7406593494109097`*^9, 
  3.740659374568205*^9}},ExpressionUUID->"e88787be-3545-4ec5-aae7-\
58ff454d18f3"],

Cell["\<\
As demonstrated earlier, a nice feature of Channels is that data can be sent \
to the Wolfram Language over HTTP - instead of fiddling with JLink and \
sockets (which tend to be laggy and break easily), one can simply create a \
web page that streams sensor data to a channel.

For Android devices (running Google Chrome), there exist a range of built-in \
sensor APIs giving a web page access to raw accelerometer, gyroscope, light \
sensor and magnetometer data, and processed linear acceleration (i.e. total \
acceleration experienced by a device disregarding that produced by gravity), \
absolute orientation and relative orientation sensors. Documentation for \
these sensors exists online at \
https://developers.google.com/web/updates/2017/09/sensors-for-the-web.

Unfortunately, for iOS devices there does not exist an easy way to access \
sensors from the web - although one can use DeviceMotion events \
(https://developers.google.com/web/fundamentals/native-hardware/device-\
orientation/), the data these give can vary significantly from browser to \
browser (e.g. different browsers might use different coordinate systems), so \
training a machine learning model on gesture data produced by this method \
would require either retraining a model for each browser or significant \
processing of data based on browser.

However, there is another solution - namely, the gyronorm.js API \
(https://github.com/dorukeker/gyronorm.js), which claims to return \
\[OpenCurlyQuote]consistent [gyroscope and accelerometer] values across \
different devices\[CloseCurlyQuote]. Using this, we construct a simple web \
page to transmit accelerometer data to a Wolfram Language channel called \
\[OpenCurlyQuote]Sensors\[CloseCurlyQuote]: (While the following code focuses \
on extracting accelerometer data, it is a trivial task to change the sensor \
being polled to read, for instance, gyroscope data in the Wolfram Language \
instead.)\
\>", "Text",
 CellChangeTimes->{{3.740659376288744*^9, 3.740659488740855*^9}, {
  3.74066003980931*^9, 3.7406602648653383`*^9}, {3.7406610734064703`*^9, 
  3.740661088318653*^9}, {3.7406611349517527`*^9, 3.7406613237541656`*^9}, {
  3.74066303780254*^9, 
  3.740663191010949*^9}},ExpressionUUID->"d2debdf9-46f8-461e-9f13-\
13c8c83d3af9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"<", 
    RowBox[{"!", 
     RowBox[{
      RowBox[{"DOCTYPE", " ", "html"}], ">", "\n", "<", 
      RowBox[{"html", " ", "lang"}]}]}]}], "=", 
   RowBox[{
    RowBox[{"en", ">", "\n", "<", 
     RowBox[{"meta", " ", "charset"}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"UTF", "-", "8"}], ">", "\n", "<", "title", ">", "Sensors", "<", 
      RowBox[{"/", "title"}], ">", "\n", "<", 
      RowBox[{"script", " ", "src"}]}], "=", 
     RowBox[{
      RowBox[{"https", ":"}], "//", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"cdn", ".", "jsdelivr", ".", "net"}], "/", "npm"}], "/", 
         RowBox[{"gyronorm", "@", "2.0"}]}], 
        RowBox[{
         RowBox[{".6", "/", "dist"}], "/", 
         RowBox[{"gyronorm", ".", "complete", ".", "min", ".", "js"}]}]}], 
       ">", "<", 
       RowBox[{"/", "script"}], ">", "\n", "\n", "<", "script", ">", "\n", 
       RowBox[{"function", " ", "makeXHR", 
        RowBox[{"(", 
         RowBox[{"x", ",", "y", ",", "z"}], ")"}], 
        RowBox[{"{", "\n", "\t", 
         RowBox[{
          RowBox[{
           RowBox[{"var", " ", "t"}], "=", 
           RowBox[{
            RowBox[{"Date", ".", "now"}], 
            RowBox[{"(", ")"}]}]}], ";", "\n", "\t", 
          RowBox[{"r", "=", 
           RowBox[{"new", " ", "XMLHttpRequest"}]}], ";", "\n", "\t", 
          RowBox[{
           RowBox[{"r", ".", "withCredentials"}], "=", "true"}], ";", "\n", 
          "\t", 
          RowBox[{
           RowBox[{"var", " ", "i"}], "=", 
           RowBox[{
           "\"\<https://channelbroker.wolframcloud.com/users/euan.l.y.ong@\
gmail.com/Sensors?operation=send&time=\>\"", "+", 
            RowBox[{
             RowBox[{"t", ".", "toString"}], 
             RowBox[{"(", ")"}]}], "+", "\"\<&x=\>\"", "+", 
            RowBox[{
             RowBox[{"x", ".", "toString"}], 
             RowBox[{"(", ")"}]}], "+", "\"\<&y=\>\"", "+", 
            RowBox[{
             RowBox[{"y", ".", "toString"}], 
             RowBox[{"(", ")"}]}], "+", "\"\<&z=\>\"", "+", 
            RowBox[{
             RowBox[{"z", ".", "toString"}], 
             RowBox[{"(", ")"}]}]}]}], ";", "\n", "\t", 
          RowBox[{
           RowBox[{"r", ".", "open"}], 
           RowBox[{"(", 
            RowBox[{"\"\<GET\>\"", ",", "i", ",", 
             RowBox[{"!", "0"}]}], ")"}]}], ";", "\n", "\t", 
          RowBox[{
           RowBox[{"r", ".", "send"}], 
           RowBox[{"(", ")"}]}]}], "\n", "}"}]}]}]}]}]}]}], "\n"}], "\n", 
 RowBox[{"function", " ", "init", 
  RowBox[{"(", ")"}], 
  RowBox[{"{", "\n", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"//", 
      RowBox[{
      "Explanations", " ", "are", " ", "from", " ", "the", " ", "GyroNorm", 
       " ", "GitHub", " ", 
       RowBox[{"page", ".", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"https", ":"}], "//", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"github", ".", "com"}], "/", "dorukeker"}], "/", 
            RowBox[{"gyronorm", ".", "js"}]}], "/"}]}], ")"}]}], "\n", "\t", 
       "var", " ", "n"}]}], "=", 
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
       RowBox[{"frequency", ":", "100"}], ",", " ", 
       RowBox[{"//", 
        RowBox[{
        "send", " ", "values", " ", "every", " ", "100", " ", "milliseconds", 
         "\n", "\t\t", 
         RowBox[{"gravityNormalized", ":", 
          RowBox[{"!", "0"}]}]}]}], ",", " ", 
       RowBox[{"//", " ", 
        RowBox[{
         RowBox[{
         "Whether", " ", "or", " ", "not", " ", "to", " ", "normalise", " ", 
          "gravity"}], "-", 
         RowBox[{"related", " ", "values", "\n", "\t\t", 
          RowBox[{"orientationBase", ":", 
           RowBox[{"GyroNorm", ".", "WORLD"}]}]}]}]}], ",", " ", 
       RowBox[{"//", " ", 
        RowBox[{
         RowBox[{"(", " ", 
          RowBox[{"Can", " ", "be", " ", 
           RowBox[{"Gyronorm", ".", "GAME"}], " ", "or", " ", 
           RowBox[{"GyroNorm", ".", "WORLD", ".", " ", "gn", ".", "GAME"}], 
           " ", "returns", " ", "orientation", " ", "values", " ", "with", 
           " ", "respect", " ", "to", " ", "the", " ", "head", " ", 
           "direction", " ", "of", " ", "the", " ", 
           RowBox[{"device", ".", " ", "gn", ".", "WORLD"}], " ", "returns", 
           " ", "the", " ", "orientation", " ", "values", " ", "with", " ", 
           "respect", " ", "to", " ", "the", " ", "actual", " ", "north", " ",
            "direction", " ", "of", " ", "the", " ", 
           RowBox[{"world", "."}]}], " ", ")"}], "\n", "\t\t", 
         RowBox[{"decimalCount", ":", "2"}]}]}], ",", " ", 
       RowBox[{"//", " ", 
        RowBox[{
        "How", " ", "many", " ", "digits", " ", "after", " ", "the", " ", 
         "decimal", " ", "point", " ", "to", " ", "return", " ", "for", " ", 
         "each", " ", "value", "\n", "\t\t", 
         RowBox[{"logger", ":", "null"}]}]}], ",", "\n", "\t\t", 
       RowBox[{"screenAdjusted", ":", 
        RowBox[{"!", "1"}]}]}], "\n", "\t", "}"}]}], ";", "\n", "\t", 
    RowBox[{"t", "=", 
     RowBox[{"new", " ", "GyroNorm"}]}], ";", "\n", "\t", 
    RowBox[{
     RowBox[{"t", ".", "init"}], 
     RowBox[{
      RowBox[{"(", "n", ")"}], ".", "then"}], 
     RowBox[{"(", 
      RowBox[{"function", 
       RowBox[{"(", ")"}], 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
         RowBox[{"t", ".", "start"}], 
         RowBox[{"(", 
          RowBox[{"function", 
           RowBox[{"(", "data", ")"}], 
           RowBox[{"{", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{
              RowBox[{"makeXHR", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"data", ".", "dm", ".", "x"}], ",", 
                 RowBox[{"data", ".", "dm", ".", "y"}], ",", 
                 RowBox[{"data", ".", "dm", ".", "z"}]}], ")"}]}], "\n", 
              "\t\t\t", "//", 
              RowBox[{
              "Other", " ", "possible", " ", "values", " ", "to", " ", 
               "substitute", " ", "for", " ", 
               RowBox[{"data", ".", "dm", ".", "x"}]}]}], ",", " ", 
             RowBox[{"data", ".", "dm", ".", "y"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"data", ".", "dm", ".", "z"}], " ", 
                    RowBox[{"are", ":"}]}], "\n", "\t\t\t", "//", " ", 
                    RowBox[{
                    RowBox[{"data", ".", "do", ".", "alpha"}], "\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "deviceorientation", " ", "event", " ", "alpha", " ", 
                    "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//", " ", 
                    RowBox[{
                    RowBox[{"data", ".", "do", ".", "beta"}], "\t\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "deviceorientation", " ", "event", " ", "beta", " ", 
                    "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//", " ", 
                    RowBox[{
                    RowBox[{"data", ".", "do", ".", "gamma"}], "\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "deviceorientation", " ", "event", " ", "gamma", " ", 
                    "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//", " ", 
                    RowBox[{
                    RowBox[{"data", ".", "do", ".", "absolute"}], "\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "deviceorientation", " ", "event", " ", "absolute", " ", 
                    "value"}], " ", ")"}]}]}], "\n", "\n", "\t\t    ", "//", 
                    " ", 
                    RowBox[{
                    RowBox[{"data", ".", "dm", ".", "x"}], "\t\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "devicemotion", " ", "event", " ", "acceleration", " ", 
                    "x", " ", "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//",
                     " ", 
                    RowBox[{
                    RowBox[{"data", ".", "dm", ".", "y"}], "\t\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "devicemotion", " ", "event", " ", "acceleration", " ", 
                    "y", " ", "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//",
                     " ", 
                    RowBox[{
                    RowBox[{"data", ".", "dm", ".", "z"}], "\t\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "devicemotion", " ", "event", " ", "acceleration", " ", 
                    "z", " ", "value"}], " ", ")"}]}]}], "\n", "\n", 
                   "\t\t    ", "//", " ", 
                   RowBox[{
                    RowBox[{"data", ".", "dm", ".", "gx"}], "\t\t", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    "devicemotion", " ", "event", " ", 
                    "accelerationIncludingGravity", " ", "x", " ", "value"}], 
                    " ", ")"}]}]}], "\n", "\t\t    ", "//", " ", 
                  RowBox[{
                   RowBox[{"data", ".", "dm", ".", "gy"}], "\t\t", 
                   RowBox[{"(", " ", 
                    RowBox[{
                    "devicemotion", " ", "event", " ", 
                    "accelerationIncludingGravity", " ", "y", " ", "value"}], 
                    " ", ")"}]}]}], "\n", "\t\t    ", "//", " ", 
                 RowBox[{
                  RowBox[{"data", ".", "dm", ".", "gz"}], "\t\t", 
                  RowBox[{"(", " ", 
                   RowBox[{
                   "devicemotion", " ", "event", " ", 
                    "accelerationIncludingGravity", " ", "z", " ", "value"}], 
                   " ", ")"}]}]}], "\n", "\n", "\t\t    ", "//", " ", 
                RowBox[{
                 RowBox[{"data", ".", "dm", ".", "alpha"}], "\t", 
                 RowBox[{"(", " ", 
                  RowBox[{
                  "devicemotion", " ", "event", " ", "rotationRate", " ", 
                   "alpha", " ", "value"}], " ", ")"}]}]}], "\n", "\t\t    ", 
               "//", " ", 
               RowBox[{
                RowBox[{"data", ".", "dm", ".", "beta"}], "\t\t", 
                RowBox[{"(", " ", 
                 RowBox[{
                 "devicemotion", " ", "event", " ", "rotationRate", " ", 
                  "beta", " ", "value"}], " ", ")"}]}]}], "\n", "\t\t    ", "//",
               " ", 
              RowBox[{
               RowBox[{"data", ".", "dm", ".", "gamma"}], "\t", 
               RowBox[{"(", " ", 
                RowBox[{
                "devicemotion", " ", "event", " ", "rotationRate", " ", 
                 "gamma", " ", "value"}], " ", ")"}]}]}]}], "\n", "\t\t", 
            "}"}]}], ")"}]}], "\n", "\t", "}"}]}], ")"}]}]}], "\n", 
   "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"window", ".", "onload"}], "=", "init"}], ";"}], "\n", 
 RowBox[{"<", 
  RowBox[{"/", "script"}], ">", "\n", "<", 
  RowBox[{"/", "html"}], ">"}]}], "Code",
 CellChangeTimes->{{3.7406640712412987`*^9, 3.740664102614552*^9}, {
   3.740664148429537*^9, 3.740664150648528*^9}, 3.740664189822956*^9},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"7d4e5226-8900-4547-861c-91d02e4ecb83"],

Cell["\<\
This webpage, when opened on an Android or iOS phone, will stream data to the \
\[OpenCurlyQuote]Sensors\[CloseCurlyQuote] channel, sending a new HTTP \
request every 100 milliseconds. (Decreasing the \[OpenCurlyQuote]frequency\
\[CloseCurlyQuote] leads to more frequent results, but can cause atrocious \
levels of lag.)\
\>", "Text",
 CellChangeTimes->{{3.74066415606522*^9, 3.74066420373277*^9}, {
  3.7406643245582457`*^9, 3.740664325168152*^9}, {3.7406645192160378`*^9, 
  3.7406645693301*^9}},ExpressionUUID->"71a52a75-82ef-4742-9cff-61d494f6dce3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Producing the ChannelDeploySensorPage function", "Subsubsection",
 CellChangeTimes->{{3.740664705298215*^9, 3.740664712448574*^9}, {
  3.740664783975945*^9, 3.740664786055026*^9}, {3.740665348132327*^9, 
  3.74066535960071*^9}},ExpressionUUID->"bdd94af0-23ac-43ef-88c4-\
d476bf0e9d42"],

Cell[TextData[{
 "Although this webpage allows accelerometer data to be transmitted from a \
phone to a computer, for it to be used it must be deployed on a server. To \
change, for instance, the channel name, one would need to edit the file on \
the server itself, which can quickly become a tiresome process. Thus, we \
developed a function which autogenerates the required HTML code and stores it \
in the Wolfram Cloud as a CloudObject where it can easily be accessed. The \
function also outputs a QR code, to allow mobile users to quickly navigate to \
the web page. (The argument ",
 StyleBox["func",
  FontSlant->"Italic"],
 " is simply the function to be called whenever the channel receives a new \
point of data from the phone.)"
}], "Text",
 CellChangeTimes->{{3.740664571975482*^9, 3.740664593499413*^9}, {
  3.7406653645754757`*^9, 3.740665382788045*^9}, {3.740665450672789*^9, 
  3.7406655399522257`*^9}, {3.740665577125832*^9, 3.74066566662994*^9}, {
  3.740731822672798*^9, 
  3.74073182275916*^9}},ExpressionUUID->"70232321-d010-439d-9bda-\
3389e3f6614c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChannelDeploySensorPage", "[", "func_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "listener", ",", "listenerurl", ",", "SensorHTML", ",", "c", ",", "url", 
      ",", "u"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"CloudConnect", "[", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"listener", "=", 
      RowBox[{"ChannelListen", "[", 
       RowBox[{"\"\<Sensors\>\"", ",", 
        RowBox[{
         RowBox[{"func", "[", "#Message", "]"}], "&"}], ",", 
        RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"listenerurl", " ", "=", " ", 
      RowBox[{"listener", "[", "\"\<URL\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SensorHTML", "=", 
      RowBox[{
      "\"\<<!DOCTYPE html><html lang=en><meta \
charset=UTF-8><title>Sensors</title><script \
src=https://cdn.jsdelivr.net/npm/gyronorm@2.0.6/dist/gyronorm.complete.min.js>\
</script><script>function makeXHR(n,t,o){var \
e=Date.now(),r=(Math.random(),new XMLHttpRequest);r.withCredentials=!0;var i=\
\\\"\>\"", "<>", "listenerurl", "<>", 
       "\"\<?operation=send&time=\\\"+e.toString()+\\\"&x=\\\"+n.toString()+\\\
\"&y=\\\"+t.toString()+\\\"&z=\\\"+o.toString();r.open(\\\"GET\\\",i,!0),r.\
send()}function init(){var \
n={frequency:100,gravityNormalized:!0,orientationBase:GyroNorm.WORLD,\
decimalCount:2,logger:null,screenAdjusted:!1},t=new \
GyroNorm;t.init(n).then(function(){t.start(function(n){makeXHR(n.dm.x,n.dm.y,\
n.dm.z)})})}window.onload=init</script>\>\""}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"To", " ", "use", " ", "with", " ", "other", " ", "sensors"}], 
       ",", " ", 
       RowBox[{
        RowBox[{
        "copy", " ", "the", " ", "HTML", " ", "code", " ", "in", " ", "the", 
         " ", "previous", " ", "section", " ", "and", " ", "replace", " ", 
         RowBox[{"https", ":"}]}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"channelbroker", ".", "wolframcloud", ".", "com"}], "/", 
            "users"}], "/", 
           RowBox[{"euan", ".", "l", ".", "y", ".", 
            RowBox[{"ong", "@", "gmail"}], ".", "com"}]}], "/", "Sensors"}], 
         " ", "with", " ", "\"\<<>listenerurl<>\>\""}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"CloudExport", "[", 
       RowBox[{"SensorHTML", ",", "\"\<HTML\>\"", ",", 
        RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"u", "=", 
      RowBox[{"URLShorten", "[", 
       RowBox[{"c", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"u", ",", 
        RowBox[{"BarcodeImage", "[", 
         RowBox[{"u", ",", "\"\<QR\>\""}], "]"}], ",", "listener"}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.740665759030249*^9, 
  3.740665892402666*^9}},ExpressionUUID->"3264d91d-0204-49b7-95ac-\
4e428704474c"],

Cell[TextData[{
 "Example Usage: (using the ",
 StyleBox["Func",
  FontSlant->"Italic"],
 " function from above)"
}], "Text",
 CellChangeTimes->{{3.7406656794256*^9, 3.740665722677307*^9}, {
  3.740667858970667*^9, 
  3.740667859352577*^9}},ExpressionUUID->"a7dc6085-909f-42ea-a8aa-\
1330601be6dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", " ", "=", " ", 
  RowBox[{"ChannelDeploySensorPage", "[", "Func", "]"}]}]], "Input",
 CellChangeTimes->{{3.740665732520893*^9, 3.740665741579636*^9}, {
  3.740665897832901*^9, 3.740665901352027*^9}, {3.740667744548564*^9, 
  3.740667745160884*^9}, {3.7406678537522783`*^9, 3.740667854195281*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"00d3309e-c12a-4ff5-bce4-c49dd3ad5275"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"https://wolfr.am/w8fPPb4i\"\>", ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzt0E1Kw2AUheHEkUO34C6cOnRacQEtpsVJhFQQN+J6reAgEM7h5MdBv++9
0JLe3J/n9v7wvjveNE1zvr187fafj8Ow/3q+u/x46c9vp757feo/ulM3PBx+
y77/Pnm0o1iT2TZQoSpD1doY18zd5Z1qFypUdarUTF/j5/jrkl5UqFCp+Wq7
ClSoUK1XLTOgQoUqUSXzE3Nynd+FClVtqiSUYe7ztoEK1bWr2pmhepPM/wUq
VNermm5R83PJNNRbb0CFqh6V2jV967WJU03L/wFUqEpVJRmfz2/3lahQ1aMa
Z7x5Wrn+3sSJClXZqsSQTPN5r/WVqFCVrdr2LiX0lXN7UaEqSTWdoKb5LjXH
C/29qFDVoEoq/cw1+TV+VKjKUKkur/WRV869BRWq8lRzI7lx2b3TCahQ1aDK
I78l6VVvUaGqU5VsURk1wc/3BlSo6lSpStWV9/rwl6JChcoLE6eq9DWoUKFS
kmXyvBcVqjpVfo7f6C/yXXkeFapSVUn47X7athJUqEpS/QCs8jfb
      "], {{0, 150}, {150, 0}}, {0, 1},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{150, 150},
    PlotRange->{{0, 150}, {0, 150}}], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["ChannelListener",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.04], 
                FaceForm[{
                  RGBColor[0.537, 0.537, 0.537], 
                  Opacity[1.]}], 
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
                  1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQLeYR8EdCWMchu6JqqY6zvoP/H4ni659UHJZVHte0
MjJ0SKq/aVu5Q9UhXSkHqELLwcHuxc01VjIOkV933ur6q+HgeD7t6nMvZYd1
zM97NHSV4fJRG/e/mbdHyuHK8yztb9tVHTh+LkjfnCXucChlVUII0PwLV8Pe
6O/+b9+54eHLqUI6Dn9mckjPi+NxCDXQWinMYODQwDfHeNGW4/bzbHSuzPpm
CJffPW0Cf1WbqcOHmNyj/zb9tzcCaVA2dXh38rDT2kxxh2DWxZOsPlo4cKho
1PXslHIACt4rjDKDuw8mv1EvbzHjHw0HoCttdFRMHYCeSf2+RMuBv8pstV27
qcMD3QkLfhgaOqR2JMfeAdp/7wH35JVO+nD3TTpd77H/r5EDAGj4jZA=
                  "], {{14.846299999999998`, 15.034199999999998`}, {16.0003, 
                  17.0092}, {17.1543, 15.034199999999998`}, {16.0003, 
                  13.560199999999998`}}, {{13.265299999999998`, 
                  14.252199999999998`}, {12.577299999999997`, 
                  15.180199999999997`}, {13.928299999999998`, 
                  14.587199999999998`}, {14.546299999999999`, 
                  13.796199999999999`}}, {{18.0733, 14.586199999999998`}, {
                  19.423299999999998`, 15.179199999999998`}, {18.7353, 
                  14.252199999999998`}, {17.455299999999998`, 
                  13.797199999999998`}}, {{19.5403, 13.661199999999997`}, {
                  20.2673, 14.640199999999998`}, {20.1143, 
                  13.108199999999998`}, {19.502299999999998`, 12.2412}}, {{
                  11.887299999999998`, 13.111199999999998`}, {
                  11.734299999999998`, 14.640199999999998`}, {
                  12.458299999999998`, 13.661199999999997`}, {12.4973, 
                  12.243199999999998`}}, {{16.499299999999998`, 
                  12.396199999999999`}, {18.5263, 13.1162}, {
                  18.467299999999998`, 10.963199999999999`}, {
                  16.499299999999998`, 10.300199999999997`}}, {{
                  13.533299999999999`, 10.963199999999999`}, {
                  13.474299999999998`, 13.1162}, {15.499299999999998`, 
                  12.396199999999999`}, {15.499299999999998`, 
                  10.300199999999997`}}, {{8.9423, 11.882199999999997`}, {
                  11.184299999999999`, 12.370199999999997`}, {
                  12.259299999999998`, 10.843199999999998`}, {
                  10.462299999999999`, 10.176199999999998`}}, {{19.7393, 
                  10.843199999999998`}, {20.8153, 12.369199999999998`}, {
                  23.058299999999996`, 11.881199999999998`}, {21.5383, 
                  10.175199999999997`}}, {{16.8083, 9.350199999999997}, {
                  18.778299999999998`, 10.013199999999998`}, {20.0873, 
                  8.312199999999997}, {18.021299999999997`, 
                  7.704199999999998}}, {{11.913299999999998`, 
                  8.312199999999997}, {13.222299999999999`, 
                  10.013199999999998`}, {15.191299999999998`, 
                  9.350199999999997}, {13.978299999999999`, 
                  7.704199999999998}}, {{10.607299999999999`, 
                  9.164199999999997}, {11.585299999999998`, 9.5262}, {
                  10.768299999999998`, 8.464199999999998}, {9.6403, 
                  8.079199999999998}}, {{21.2323, 8.463199999999999}, {
                  20.414299999999997`, 9.525199999999998}, {
                  21.393299999999996`, 9.163199999999998}, {22.3603, 
                  8.077199999999998}}, {{14.786299999999999`, 
                  7.1141999999999985`}, {16.0003, 8.761199999999999}, {
                  17.214299999999998`, 7.1141999999999985`}, {16.0003, 
                  5.342199999999998}}, {{19.5373, 7.107199999999999}, {
                  20.917299999999997`, 7.515199999999998}, {22.1423, 
                  7.095199999999998}, {20.621299999999998`, 
                  6.764199999999997}}, {{9.858299999999998, 
                  7.096199999999998}, {11.083299999999998`, 
                  7.514199999999999}, {12.462299999999999`, 
                  7.108199999999998}, {11.377299999999998`, 
                  6.764199999999997}}, {{11.866299999999999`, 
                  5.871199999999998}, {13.689299999999998`, 
                  6.447199999999999}, {13.735299999999999`, 
                  4.5051999999999985`}, {11.6383, 3.5851999999999986`}}, {{
                  18.263299999999997`, 4.5051999999999985`}, {18.3113, 
                  6.447199999999999}, {20.1333, 5.870199999999999}, {
                  20.361299999999996`, 3.584199999999999}}, {{
                  14.740299999999998`, 4.323199999999998}, {
                  14.713299999999998`, 5.452199999999998}, {
                  15.499299999999998`, 4.303199999999999}, {
                  15.499299999999998`, 3.023199999999999}}, {{
                  16.499299999999998`, 4.303199999999999}, {
                  17.286299999999997`, 5.451199999999998}, {17.2593, 
                  4.323199999999998}, {16.499299999999998`, 
                  3.0241999999999987`}}, {{0.7933000000000003, 
                  14.500199999999998`}, {3.6462999999999983`, 
                  11.647199999999998`}, {4.353299999999999, 
                  12.353199999999998`}, {2.7072999999999983`, 
                  14.000199999999998`}, {7.000299999999998, 
                  14.000199999999998`}, {7.000299999999998, 
                  15.000199999999998`}, {2.7072999999999983`, 
                  15.000199999999998`}, {4.353299999999999, 
                  16.646199999999997`}, {3.6462999999999983`, 17.3542}}, {{
                  3.6462999999999983`, 6.646199999999997}, {5.2933, 
                  5.0001999999999995`}, {1.0002999999999993`, 
                  5.0001999999999995`}, {1.0002999999999993`, 
                  3.9991999999999983`}, {5.2933, 3.9991999999999983`}, {
                  3.6462999999999983`, 2.3531999999999993`}, {
                  4.353299999999999, 1.6461999999999968`}, {7.207299999999998,
                   4.5001999999999995`}, {4.353299999999999, 
                  7.354199999999999}}}]}, AspectRatio -> Automatic, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification]]}, PlotRange -> {{0., 25.}, {0., 19.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Channel: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"euan.l.y.ong@gmail.com:Sensors\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"k477pG\"", "SummaryItem"]}]}, {
                 TagBox[
                  DynamicModuleBox[{ChannelFramework`Private`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, ChannelFramework`Private`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2], 
                    Opacity[0.2]}, 
                    ChannelFramework`Private`status$$ = {
                    "Active", "Stopped", "Inactive"}, 
                    ChannelFramework`Private`hlen$$ = DirectedInfinity[1], 
                    ChannelFramework`Private`d$$ = "k477pG", 
                    ChannelFramework`Private`stat$$ = 3, 
                    ChannelFramework`Private`ind$$ = 3, 
                    ChannelFramework`Private`cnt$$ = 0, 
                    ChannelFramework`Private`tot$$}, 
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ChannelFramework`Private`stat$$ = 
                    ChannelFramework`Private`listenerStatus[
                    ChannelFramework`Private`d$$]; 
                    ChannelFramework`Private`ind$$ = If[
                    IntegerQ[ChannelFramework`Private`stat$$], 
                    ChannelFramework`Private`stat$$, 3]; Style[
                    Row[{
                    Part[
                    ChannelFramework`Private`lights$$, 
                    ChannelFramework`Private`ind$$], 
                    Part[
                    ChannelFramework`Private`status$$, 
                    ChannelFramework`Private`ind$$]}], 
                    Part[ChannelFramework`Private`opacities$$, 1]], 
                    StandardForm]], "SummaryItem"]}], 
                    TemplateBox[{20}, "Spacer1"], 
                    RowBox[{
                    TagBox["\"Message count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    DynamicBox[
                    ToBoxes[
                    ChannelListener["k477pG"]; 
                    ChannelFramework`Private`cnt$$ = 
                    Function[{ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"], 
                    StandardForm]], "\"\""}, "RowDefault"], "SummaryItem"]}]},
                     "RowDefault"], DynamicModuleValues :> {}, 
                   Initialization :> (
                    If[Context["ChannelObject"] =!= "System`", 
                    Get["ChannelFramework`"]]; 
                    Clear[ChannelFramework`Private`cnt$$])], "SummaryItem"], 
                 ""}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.04], 
                FaceForm[{
                  RGBColor[0.537, 0.537, 0.537], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
                  1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQLeYR8EdCWMchu6JqqY6zvoP/H4ni659UHJZVHte0
MjJ0SKq/aVu5Q9UhXSkHqELLwcHuxc01VjIOkV933ur6q+HgeD7t6nMvZYd1
zM97NHSV4fJRG/e/mbdHyuHK8yztb9tVHTh+LkjfnCXucChlVUII0PwLV8Pe
6O/+b9+54eHLqUI6Dn9mckjPi+NxCDXQWinMYODQwDfHeNGW4/bzbHSuzPpm
CJffPW0Cf1WbqcOHmNyj/zb9tzcCaVA2dXh38rDT2kxxh2DWxZOsPlo4cKho
1PXslHIACt4rjDKDuw8mv1EvbzHjHw0HoCttdFRMHYCeSf2+RMuBv8pstV27
qcMD3QkLfhgaOqR2JMfeAdp/7wH35JVO+nD3TTpd77H/r5EDAGj4jZA=
                  "], {{14.846299999999998`, 15.034199999999998`}, {16.0003, 
                  17.0092}, {17.1543, 15.034199999999998`}, {16.0003, 
                  13.560199999999998`}}, {{13.265299999999998`, 
                  14.252199999999998`}, {12.577299999999997`, 
                  15.180199999999997`}, {13.928299999999998`, 
                  14.587199999999998`}, {14.546299999999999`, 
                  13.796199999999999`}}, {{18.0733, 14.586199999999998`}, {
                  19.423299999999998`, 15.179199999999998`}, {18.7353, 
                  14.252199999999998`}, {17.455299999999998`, 
                  13.797199999999998`}}, {{19.5403, 13.661199999999997`}, {
                  20.2673, 14.640199999999998`}, {20.1143, 
                  13.108199999999998`}, {19.502299999999998`, 12.2412}}, {{
                  11.887299999999998`, 13.111199999999998`}, {
                  11.734299999999998`, 14.640199999999998`}, {
                  12.458299999999998`, 13.661199999999997`}, {12.4973, 
                  12.243199999999998`}}, {{16.499299999999998`, 
                  12.396199999999999`}, {18.5263, 13.1162}, {
                  18.467299999999998`, 10.963199999999999`}, {
                  16.499299999999998`, 10.300199999999997`}}, {{
                  13.533299999999999`, 10.963199999999999`}, {
                  13.474299999999998`, 13.1162}, {15.499299999999998`, 
                  12.396199999999999`}, {15.499299999999998`, 
                  10.300199999999997`}}, {{8.9423, 11.882199999999997`}, {
                  11.184299999999999`, 12.370199999999997`}, {
                  12.259299999999998`, 10.843199999999998`}, {
                  10.462299999999999`, 10.176199999999998`}}, {{19.7393, 
                  10.843199999999998`}, {20.8153, 12.369199999999998`}, {
                  23.058299999999996`, 11.881199999999998`}, {21.5383, 
                  10.175199999999997`}}, {{16.8083, 9.350199999999997}, {
                  18.778299999999998`, 10.013199999999998`}, {20.0873, 
                  8.312199999999997}, {18.021299999999997`, 
                  7.704199999999998}}, {{11.913299999999998`, 
                  8.312199999999997}, {13.222299999999999`, 
                  10.013199999999998`}, {15.191299999999998`, 
                  9.350199999999997}, {13.978299999999999`, 
                  7.704199999999998}}, {{10.607299999999999`, 
                  9.164199999999997}, {11.585299999999998`, 9.5262}, {
                  10.768299999999998`, 8.464199999999998}, {9.6403, 
                  8.079199999999998}}, {{21.2323, 8.463199999999999}, {
                  20.414299999999997`, 9.525199999999998}, {
                  21.393299999999996`, 9.163199999999998}, {22.3603, 
                  8.077199999999998}}, {{14.786299999999999`, 
                  7.1141999999999985`}, {16.0003, 8.761199999999999}, {
                  17.214299999999998`, 7.1141999999999985`}, {16.0003, 
                  5.342199999999998}}, {{19.5373, 7.107199999999999}, {
                  20.917299999999997`, 7.515199999999998}, {22.1423, 
                  7.095199999999998}, {20.621299999999998`, 
                  6.764199999999997}}, {{9.858299999999998, 
                  7.096199999999998}, {11.083299999999998`, 
                  7.514199999999999}, {12.462299999999999`, 
                  7.108199999999998}, {11.377299999999998`, 
                  6.764199999999997}}, {{11.866299999999999`, 
                  5.871199999999998}, {13.689299999999998`, 
                  6.447199999999999}, {13.735299999999999`, 
                  4.5051999999999985`}, {11.6383, 3.5851999999999986`}}, {{
                  18.263299999999997`, 4.5051999999999985`}, {18.3113, 
                  6.447199999999999}, {20.1333, 5.870199999999999}, {
                  20.361299999999996`, 3.584199999999999}}, {{
                  14.740299999999998`, 4.323199999999998}, {
                  14.713299999999998`, 5.452199999999998}, {
                  15.499299999999998`, 4.303199999999999}, {
                  15.499299999999998`, 3.023199999999999}}, {{
                  16.499299999999998`, 4.303199999999999}, {
                  17.286299999999997`, 5.451199999999998}, {17.2593, 
                  4.323199999999998}, {16.499299999999998`, 
                  3.0241999999999987`}}, {{0.7933000000000003, 
                  14.500199999999998`}, {3.6462999999999983`, 
                  11.647199999999998`}, {4.353299999999999, 
                  12.353199999999998`}, {2.7072999999999983`, 
                  14.000199999999998`}, {7.000299999999998, 
                  14.000199999999998`}, {7.000299999999998, 
                  15.000199999999998`}, {2.7072999999999983`, 
                  15.000199999999998`}, {4.353299999999999, 
                  16.646199999999997`}, {3.6462999999999983`, 17.3542}}, {{
                  3.6462999999999983`, 6.646199999999997}, {5.2933, 
                  5.0001999999999995`}, {1.0002999999999993`, 
                  5.0001999999999995`}, {1.0002999999999993`, 
                  3.9991999999999983`}, {5.2933, 3.9991999999999983`}, {
                  3.6462999999999983`, 2.3531999999999993`}, {
                  4.353299999999999, 1.6461999999999968`}, {7.207299999999998,
                   4.5001999999999995`}, {4.353299999999999, 
                  7.354199999999999}}}]}, AspectRatio -> Automatic, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification]]}, PlotRange -> {{0., 25.}, {0., 19.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Channel: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"euan.l.y.ong@gmail.com:Sensors\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"k477pG\"", "SummaryItem"]}]}, {
                 TagBox[
                  DynamicModuleBox[{ChannelFramework`Private`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, ChannelFramework`Private`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2], 
                    Opacity[0.2]}, 
                    ChannelFramework`Private`status$$ = {
                    "Active", "Stopped", "Inactive"}, 
                    ChannelFramework`Private`hlen$$ = DirectedInfinity[1], 
                    ChannelFramework`Private`d$$ = "k477pG", 
                    ChannelFramework`Private`stat$$, 
                    ChannelFramework`Private`ind$$, 
                    ChannelFramework`Private`cnt$$, 
                    ChannelFramework`Private`tot$$}, 
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ChannelFramework`Private`stat$$ = 
                    ChannelFramework`Private`listenerStatus[
                    ChannelFramework`Private`d$$]; 
                    ChannelFramework`Private`ind$$ = If[
                    IntegerQ[ChannelFramework`Private`stat$$], 
                    ChannelFramework`Private`stat$$, 3]; Style[
                    Row[{
                    Part[
                    ChannelFramework`Private`lights$$, 
                    ChannelFramework`Private`ind$$], 
                    Part[
                    ChannelFramework`Private`status$$, 
                    ChannelFramework`Private`ind$$]}], 
                    Part[ChannelFramework`Private`opacities$$, 1]], 
                    StandardForm]], "SummaryItem"]}], 
                    TemplateBox[{20}, "Spacer1"], 
                    RowBox[{
                    TagBox["\"Message count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    DynamicBox[
                    ToBoxes[
                    ChannelListener["k477pG"]; 
                    ChannelFramework`Private`cnt$$ = 
                    Function[{ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"], 
                    StandardForm]], "\"\""}, "RowDefault"], "SummaryItem"]}]},
                     "RowDefault"], DynamicModuleValues :> {}, 
                   Initialization :> (
                    If[Context["ChannelObject"] =!= "System`", 
                    Get["ChannelFramework`"]]; 
                    Clear[ChannelFramework`Private`cnt$$])], "SummaryItem"], 
                 ""}, {
                 TagBox[
                  
                  DynamicModuleBox[{
                   ChannelFramework`Private`as$$ = 
                    Association[
                    "URLRendering" -> Automatic, ChannelBase -> 
                    "https://channelbroker.wolframcloud.com:443", Permissions -> 
                    "Public", NotificationFunction -> Inherited, 
                    MetaInformation -> {}, Initialization -> Automatic, 
                    HandlerFunctions -> Automatic, ChannelPreSendFunction -> 
                    Automatic, ChannelBrokerAction -> Automatic, "Scheme" -> 
                    "https", "Domain" -> "channelbroker.wolframcloud.com", 
                    "Port" -> 443, "Path" -> 
                    "/users/euan.l.y.ong@gmail.com/Sensors", "URL" -> 
                    "https://channelbroker.wolframcloud.com:443/users/euan.l.\
y.ong@gmail.com/Sensors", "DisplayURL" -> 
                    "https://channelbroker.wolframcloud.com/users/euan.l.y.\
ong@gmail.com/Sensors"], ChannelFramework`Private`owner$$ = 
                    "euan.l.y.ong@gmail.com", ChannelFramework`Private`d$$ = 
                    "k477pG", ChannelFramework`Private`bin$$ = None, 
                    ChannelFramework`Private`cnt$$}, 
                   DynamicBox[
                    ToBoxes[
                    ChannelFramework`Private`cnt$$ = 
                    Function[{
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop}, 
                    If[
                    Or[DownValues[ChannelFramework`Private`msgCount] === {}, 
                    Not[
                    IntegerQ[
                    Quiet[
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]]]], 0, 
                    ChannelFramework`Private`msgCount[
                    ChannelFramework`Private`idx, 
                    ChannelFramework`Private`prop]]][
                    ChannelFramework`Private`d$$, "AvailableMessageCount"]; 
                    Column[{
                    Apply[Sequence, 
                    If[ChannelFramework`Private`cnt$$ > 0, 
                    ChannelFramework`Private`cloudDynamic[{
                    BoxForm`SummaryItem[{"Latest message: ", 
                    ChannelFramework`Private`shorten[
                    ChannelListener["k477pG"]["Message"]]}], 
                    BoxForm`SummaryItem[{"Message from: ", 
                    ChannelListener["k477pG"]["RequesterWolframID"]}], 
                    BoxForm`SummaryItem[{"Requester address: ", 
                    ChannelListener["k477pG"]["RequesterAddress"]}], 
                    BoxForm`SummaryItem[{"Timestamp: ", 
                    DateString[
                    ChannelListener["k477pG"]["Timestamp"]]}]}], {}]], 
                    If[ChannelFramework`Private`owner$$ === "", 
                    Apply[Sequence, {}], 
                    
                    BoxForm`SummaryItem[{
                    "Channel owner: ", ChannelFramework`Private`owner$$}]], 
                    If[ChannelFramework`Private`bin$$ === None, 
                    Apply[Sequence, {}], 
                    
                    BoxForm`SummaryItem[{
                    "Databin ID: ", ChannelFramework`Private`bin$$}]], 
                    BoxForm`SummaryItem[{"Channel base: ", 
                    ChannelFramework`Private`urlStringAuto[
                    ChannelFramework`Private`as$$[ChannelBase]]}]}], 
                    StandardForm]], DynamicModuleValues :> {}, Initialization :> 
                   Clear[ChannelFramework`Private`cnt$$]], "SummaryItem"], 
                 ""}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    ChannelListener["k477pG"],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.740665915350501*^9, 3.740667749272872*^9, 
  3.740667823203005*^9, 3.740667863339353*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"b688850b-8ddb-4b80-b1cb-02033b428f0c"]
}, Open  ]],

Cell["\<\
A user can now simply scan the above QR code and sensor data will be streamed \
from their phone to the computer.
The data can be viewed as a time series as follows:\
\>", "Text",
 CellChangeTimes->{{3.740665926093586*^9, 3.740665998228347*^9}, {
  3.740667619114959*^9, 3.740667659221389*^9}, {3.740667703029675*^9, 
  3.740667706224249*^9}},ExpressionUUID->"bdffd4fd-bc76-4b6c-a17c-\
006017b1ec09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "[", 
   RowBox[{"[", "3", "]"}], "]"}], "[", "\"\<TimeSeries\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.740667661537781*^9, 3.740667698596589*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"51f1d4fd-6170-428d-92d0-b8443a8e1819"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"time\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TimeSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1.157875414247866`*^-8", ",", "\"Day\""}], "}"}],
                     "SummaryItem"]}]}, {
                  TagBox["\"\"", "SummaryItem"], 
                  RowBox[{
                    TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[
     TimeSeries, {{{
        "1531678694178", "1531678694275", "1531678694374", "1531678694474", 
         "1531678694574", "1531678694674", "1531678694774", "1531678695074", 
         "1531678694974", "1531678694874", "1531678695174", "1531678695275", 
         "1531678695374", "1531678695475", "1531678695575", "1531678695674", 
         "1531678695775", "1531678695875", "1531678695974", "1531678696074", 
         "1531678696175", "1531678696275", "1531678696375", "1531678696475", 
         "1531678696575", "1531678696674", "1531678696774", "1531678696874", 
         "1531678696974", "1531678697074", "1531678697174", "1531678697275", 
         "1531678697374", "1531678697474", "1531678697574", "1531678697675", 
         "1531678697774", "1531678697875", "1531678697974", "1531678698074", 
         "1531678698174", "1531678698274", "1531678698374", "1531678698474", 
         "1531678698574", "1531678698674", "1531678698774", "1531678698874", 
         "1531678698974", "1531678699074", "1531678699173", "1531678699274", 
         "1531678699374", "1531678699475", "1531678699574", "1531678699674", 
         "1531678699774", "1531678699874", "1531678699974", "1531678700074", 
         "1531678700174", "1531678700275", "1531678700374", "1531678700474", 
         "1531678700575", "1531678700674", "1531678700774", "1531678700874", 
         "1531678700974", "1531678701074", "1531678701174", "1531678701274", 
         "1531678701375", "1531678701474", "1531678701574", "1531678701674", 
         "1531678701774", "1531678701874", "1531678701974", "1531678702074", 
         "1531678702174", "1531678702275", "1531678702374", "1531678702474", 
         "1531678702574", "1531678702674", "1531678702775", "1531678702874", 
         "1531678702974", "1531678703074", "1531678703175", "1531678703274", 
         "1531678703375", "1531678703474", "1531678703574", "1531678703675", 
         "1531678703775", "1531678703875", "1531678703975", "1531678704074", 
         "1531678704174", "1531678704275", "1531678704375", "1531678704475", 
         "1531678704574", "1531678704675", "1531678704774", "1531678704875", 
         "1531678704974", "1531678705075", "1531678705174", "1531678705274", 
         "1531678705375", "1531678705474", "1531678705575", "1531678705675", 
         "1531678705775", "1531678705874", "1531678705974", "1531678706074", 
         "1531678706175", "1531678706275", "1531678706374", "1531678706474", 
         "1531678706575", "1531678706674", "1531678706774", "1531678706874", 
         "1531678706975", "1531678707075", "1531678707174", "1531678707274", 
         "1531678707375", "1531678707475", "1531678707575", "1531678707675", 
         "1531678707775", "1531678707875", "1531678707974", "1531678708074", 
         "1531678708174", "1531678708274", "1531678708375", "1531678708475", 
         "1531678708575", "1531678708674", "1531678708774", "1531678708874", 
         "1531678708975", "1531678709074", "1531678709174", "1531678709275", 
         "1531678709375", "1531678709475", "1531678709575", "1531678709674", 
         "1531678709774", "1531678709875", "1531678709975", "1531678710075", 
         "1531678710174", "1531678710274", "1531678710374", "1531678710474", 
         "1531678710575", "1531678710675", "1531678710775", "1531678710875", 
         "1531678710974", "1531678711075", "1531678711175", "1531678711274", 
         "1531678711375", "1531678711474", "1531678711575", "1531678711674", 
         "1531678711774"}}, CompressedData["
1:eJwt02tIE2AUBuClToaOVeJCVIxGmiEhCSOjtJI0zTJYKFZiJSgWkiZZS6nQ
GBgDw2IkrEZYSqVoCYqZ+EPcN6FQssxEUhoJ2sLIkqyVXd7z/hgPbIdzvnPZ
hqJyS3GgRqNZxc+Tf5/h8z+H+qZ9ewquiw23RH2AH+42r8DmdLHVqXH/V9cu
nu4XV16L+oBAmHZCC73VOth1JxSumzTAiKAwaPMZ4bmbETBkIgpenI+B7zaa
oLkwDn77HQ9dnxNYLxHu1yfBS7vMMM+QAg9sEzPfp7JuGnx1MAPGBmfBnTPZ
fF8OrAm3wJlDubDn6xHYl1XAusf5/UnWK+bvpfBxZRlU2eVwzn8WfoyrgtFH
rfBDSw28MHAFlpTUMc4Gw67WwxibHVp6G5ivES6OOTi/JsY5GefiXJrdsr9W
9vuQc26DL02djOvi/LphcO1T9tMPp34McH6DjHPDiXvD3P8L5htl3Bjn/Ibz
mYQZPVPc7zTremHHvlnWnYf52z8xboH7WORdLcHNBX7O8Re8G/mH+9AqqR+s
ZC46qofLh1fD9ugwWNpo5O8RcHIkCqaGrIdBeSZ4vyJWyd3HK5lfguL9KbnT
JLgm38y4ZDj6fYeSPlKV9JEGIxPTlew3k/my4aMvOUruwAIrS3OVzDlfyZ0c
U7KPQliRUqRkH8Vw3HoKbtpaxrgz7LeS76tiv1bWrWHdy0r+73Xs18b31cPw
Djv7aICGLTeU/D8cMKeoCdY6nMznYnwz67ZAb/UDzrmN8+tkvi722w332nv5
vmfMM8D3DcLka27GDSv5/z5n3AjnPMa5jDPuLfuY4n5neCdevm+W/c6xro99
LDDfIvMtwdtDy0ru2c85ryi55wCP3LPWI/l0Huk31CPvM0Cbb61H5meEfwFR
X2tX
       "], 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, 
        ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, 
      True, 11.3],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TimeSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1.157875414247866`*^-8", ",", "\"Day\""}], "}"}],
                     "SummaryItem"]}]}, {
                  TagBox["\"\"", "SummaryItem"], 
                  RowBox[{
                    TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[
     TimeSeries, {{{
        "-0.23", "-0.36", "0.2", "-0.25", "-0.35", "-0.21", "-0.48", "-0.49", 
         "-0.39", "-0.41", "-0.06", "0.16", "-0.36", "-0.61", "-1.01", 
         "-1.01", "-0.03", "0.58", "0.73", "0.08", "-0.43", "-0.73", "-0.34", 
         "-0.37", "-0.37", "-0.45", "-0.49", "-0.33", "-0.41", "-0.18", 
         "-0.34", "-0.27", "-0.23", "-0.3", "-0.16", "-0.4", "-0.26", "-0.37",
          "-0.27", "-0.27", "-0.23", "-0.21", "-0.44", "-0.21", "-0.36", 
         "-0.16", "-0.26", "-0.21", "-0.25", "-0.26", "-0.28", "-0.41", 
         "-0.15", "-0.35", "-0.12", "-0.34", "-0.17", "-0.14", "-0.22", 
         "-0.5", "-0.83", "-0.58", "-0.59", "-0.57", "-0.27", "1.77", "1.02", 
         "1.1", "-1.1", "0.5", "0.47", "-0.41", "-0.32", "-0.21", "0.2", 
         "-0.48", "-0.44", "-0.11", "-0.12", "0.02", "-0.2", "-0.22", "0.16", 
         "-0.64", "-0.11", "-0.14", "0.02", "-0.59", "0.05", "-0.13", "-0.98",
          "0.17", "0.69", "0.32", "-0.4", "-0.35", "1.01", "-1.4", "-6.53", 
         "-4.03", "-18.8", "-4.61", "-1.37", "-17.39", "-0.5", "0.76", "0.38",
          "0.19", "-0.09", "-0.06", "-0.06", "-0.02", "0.04", "-0.19", 
         "-0.31", "-0.04", "-0.23", "-0.05", "-0.09", "0.01", "-0.01", "-0.3",
          "-0.28", "-0.03", "-0.2", "0.09", "-0.3", "0.02", "-0.06", "-0.22", 
         "-0.06", "-0.12", "0.21", "-0.28", "-0.34", "-0.21", "-0.45", 
         "-0.23", "-0.15", "-0.13", "0.02", "-0.27", "0.08", "-0.19", "-0.2", 
         "-0.05", "-0.09", "0.05", "0.05", "-0.3", "-0.22", "0.06", "-0.03", 
         "-0.15", "-0.15", "-0.05", "0", "-0.07", "-0.36", "-0.3", "-0.73", 
         "-3.75", "-7.16", "-5.49", "-3.16", "-0.57", "10.64", "-28.74", 
         "0.35", "1.24", "-2.21", "-0.49", "-0.45", "0.32", "-0.07", "0.07", 
         "-1.33"}}, CompressedData["
1:eJwt02tIE2AUBuClToaOVeJCVIxGmiEhCSOjtJI0zTJYKFZiJSgWkiZZS6nQ
GBgDw2IkrEZYSqVoCYqZ+EPcN6FQssxEUhoJ2sLIkqyVXd7z/hgPbIdzvnPZ
hqJyS3GgRqNZxc+Tf5/h8z+H+qZ9ewquiw23RH2AH+42r8DmdLHVqXH/V9cu
nu4XV16L+oBAmHZCC73VOth1JxSumzTAiKAwaPMZ4bmbETBkIgpenI+B7zaa
oLkwDn77HQ9dnxNYLxHu1yfBS7vMMM+QAg9sEzPfp7JuGnx1MAPGBmfBnTPZ
fF8OrAm3wJlDubDn6xHYl1XAusf5/UnWK+bvpfBxZRlU2eVwzn8WfoyrgtFH
rfBDSw28MHAFlpTUMc4Gw67WwxibHVp6G5ivES6OOTi/JsY5GefiXJrdsr9W
9vuQc26DL02djOvi/LphcO1T9tMPp34McH6DjHPDiXvD3P8L5htl3Bjn/Ibz
mYQZPVPc7zTremHHvlnWnYf52z8xboH7WORdLcHNBX7O8Re8G/mH+9AqqR+s
ZC46qofLh1fD9ugwWNpo5O8RcHIkCqaGrIdBeSZ4vyJWyd3HK5lfguL9KbnT
JLgm38y4ZDj6fYeSPlKV9JEGIxPTlew3k/my4aMvOUruwAIrS3OVzDlfyZ0c
U7KPQliRUqRkH8Vw3HoKbtpaxrgz7LeS76tiv1bWrWHdy0r+73Xs18b31cPw
Djv7aICGLTeU/D8cMKeoCdY6nMznYnwz67ZAb/UDzrmN8+tkvi722w332nv5
vmfMM8D3DcLka27GDSv5/z5n3AjnPMa5jDPuLfuY4n5neCdevm+W/c6xro99
LDDfIvMtwdtDy0ru2c85ryi55wCP3LPWI/l0Huk31CPvM0Cbb61H5meEfwFR
X2tX
       "], 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, 
        ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, 
      True, 11.3],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TimeSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1.157875414247866`*^-8", ",", "\"Day\""}], "}"}],
                     "SummaryItem"]}]}, {
                  TagBox["\"\"", "SummaryItem"], 
                  RowBox[{
                    TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[
     TimeSeries, {{{
        "-0.03", "0.16", "-0.08", "-0.07", "-0.04", "0.05", "0.14", "-0.04", 
         "-0.03", "0.02", "0.12", "-0.33", "0.04", "0.26", "0.44", "0.23", 
         "-0.12", "-0.32", "-0.39", "-0.12", "0.13", "-0.2", "0.01", "0.06", 
         "0.16", "0", "0", "0", "-0.01", "0.01", "-0.02", "0.04", "-0.13", 
         "0", "-0.07", "0", "0", "-0.01", "-0.04", "-0.12", "0", "-0.15", 
         "0.07", "-0.05", "0.05", "-0.01", "-0.01", "0", "-0.07", "0.02", 
         "-0.11", "0.03", "-0.06", "0", "-0.03", "0.06", "0", "-0.05", 
         "-0.07", "0.01", "0.03", "0.36", "0.31", "0", "0.07", "-1.31", 
         "-0.11", "-2.22", "0.82", "-0.41", "-0.57", "-0.34", "0.91", "0.3", 
         "-0.27", "-0.66", "0.37", "-0.09", "-0.23", "0.05", "-0.08", "0.42", 
         "0.01", "0.23", "0.83", "0.7", "0.1", "0.78", "-0.89", "-1.77", 
         "-1.06", "0.48", "1.17", "0.07", "-0.29", "-1.1", "-2.37", "-5.51", 
         "11.28", "24.85", "-24.25", "4.93", "22.99", "-7.42", "-0.4", "4", 
         "-0.43", "-0.19", "0", "-0.15", "-0.11", "0.02", "-0.22", "-0.23", 
         "-0.1", "-0.1", "0.1", "-0.12", "-0.06", "-0.21", "-0.05", "0.01", 
         "-0.3", "-0.09", "-0.01", "-0.08", "0.13", "0.1", "0.2", "-0.33", 
         "-0.11", "0.17", "-0.25", "-0.29", "0.03", "0.67", "-0.5", "0.09", 
         "-0.04", "-0.24", "-0.01", "-0.2", "0.07", "-0.12", "0", "0.14", 
         "-0.05", "0", "0.01", "-0.05", "-0.22", "-0.03", "-0.04", "-0.01", 
         "-0.12", "-0.07", "0.08", "-0.03", "-0.3", "-0.78", "-0.97", "-4.09",
          "-2.04", "3.95", "7", "7.02", "35.36", "-11.24", "-2.95", "-0.98", 
         "-0.67", "-0.3", "-0.34", "-0.47", "0.05", "0.76", 
         "0.14"}}, CompressedData["
1:eJwt02tIE2AUBuClToaOVeJCVIxGmiEhCSOjtJI0zTJYKFZiJSgWkiZZS6nQ
GBgDw2IkrEZYSqVoCYqZ+EPcN6FQssxEUhoJ2sLIkqyVXd7z/hgPbIdzvnPZ
hqJyS3GgRqNZxc+Tf5/h8z+H+qZ9ewquiw23RH2AH+42r8DmdLHVqXH/V9cu
nu4XV16L+oBAmHZCC73VOth1JxSumzTAiKAwaPMZ4bmbETBkIgpenI+B7zaa
oLkwDn77HQ9dnxNYLxHu1yfBS7vMMM+QAg9sEzPfp7JuGnx1MAPGBmfBnTPZ
fF8OrAm3wJlDubDn6xHYl1XAusf5/UnWK+bvpfBxZRlU2eVwzn8WfoyrgtFH
rfBDSw28MHAFlpTUMc4Gw67WwxibHVp6G5ivES6OOTi/JsY5GefiXJrdsr9W
9vuQc26DL02djOvi/LphcO1T9tMPp34McH6DjHPDiXvD3P8L5htl3Bjn/Ibz
mYQZPVPc7zTremHHvlnWnYf52z8xboH7WORdLcHNBX7O8Re8G/mH+9AqqR+s
ZC46qofLh1fD9ugwWNpo5O8RcHIkCqaGrIdBeSZ4vyJWyd3HK5lfguL9KbnT
JLgm38y4ZDj6fYeSPlKV9JEGIxPTlew3k/my4aMvOUruwAIrS3OVzDlfyZ0c
U7KPQliRUqRkH8Vw3HoKbtpaxrgz7LeS76tiv1bWrWHdy0r+73Xs18b31cPw
Djv7aICGLTeU/D8cMKeoCdY6nMznYnwz67ZAb/UDzrmN8+tkvi722w332nv5
vmfMM8D3DcLka27GDSv5/z5n3AjnPMa5jDPuLfuY4n5neCdevm+W/c6xro99
LDDfIvMtwdtDy0ru2c85ryi55wCP3LPWI/l0Huk31CPvM0Cbb61H5meEfwFR
X2tX
       "], 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, 
        ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, 
      True, 11.3],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TimeSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{}, {{}, {}, {
                   GrayLevel[0.5], 
                   PointSize[0.125], 
                   AbsoluteThickness[1.5], 
                   StyleBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEf7Fl11LwinD7aQwUcXn2Jtl8b9ArK53Bw3utt
q3f4M5Qv4CC+Otg/K43RAcIXcfi+f0F40nsYX8JBX1jtBbsrL5Qv45DtoBvW
xcwP5Ss4NFwMEp60GWafksOc359Whf/9BeWrOARoR64NnnwNyldzMHERNjG5
+no/hK/hIKRdVZBY8w3K13LIMJWbeIH9L5Sv4zDLV7txKvsXKF/PoWzi1MhL
TFwHIHwDB/cgkWNzBTmgfEOHQ2p/W4VucUL5Rg7G79Iu8t1mg/KNHcrd9WVC
ixmhfBOHrX+2zedZ8B9qvqnDPJ3j61kKGKDyZg5FiwwE9lTA7DN3qN+4vmmS
siiUb+HAtbzy3bJ4ISjf0oFzYux88dMCUL6VQ5zaARf5axJQvrWDmCZL36VN
UlC+jYPfBC+BlBJxKN/WoX+K14Vt8jJQvp3DgYTiXbPeiUD59g48fy+4bYoW
g/IdHL4IXz2XEgqVb3BwONa2ilHOixsq7+jg3yuU9L5AECrv6NBaqXjidDLM
vU4OTZOznfNi2KHyTg4WG+6H/hWBhY+zQ5qveFfD7s+Q8Glwdviw+EOTxY2j
0Ph0cVj18NqRC96XIfwGF4dlb2fpWLbB0perwzqzL3Nnz/wElXd1YCgOSXoi
cRUq7+ZgkHHN7dvHG1Dz3RxO/X996GnXG2h8uDusTTv5fqPlTai8u4O3Uoqa
3YkrUP0eDlu+ZYpfimJwgMh7OPwpNvZ9PpcDwmfwdPgt/Kj+tbigAwD0Q951

                    "]], FontFamily -> "Arial", StripOnInput -> False]}}, {}},
                 AspectRatio -> 1, Axes -> {False, False}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, Background -> 
                GrayLevel[0.93], BaseStyle -> {FontFamily -> "Arial"}, 
                DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{0., 50.}, {-7.030970816185017, 
                 4.273359296964368}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{1, 1}, {1, 1}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:15.826\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14:18:32.665\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["177", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1.157875414247866`*^-8", ",", "\"Day\""}], "}"}],
                     "SummaryItem"]}]}, {
                  TagBox["\"\"", "SummaryItem"], 
                  RowBox[{
                    TagBox["\"Resampling: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LinearInterpolation\"", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[
     TimeSeries, {{{
        "-0.35", "0.2", "0.16", "0.37", "0.18", "-0.32", "0.12", "-0.38", 
         "-0.12", "-0.08", "-0.27", "-0.09", "-0.01", "-0.2", "0.09", "-0.61",
          "-0.09", "-0.25", "-0.04", "0.04", "-0.25", "-0.62", "-0.35", "0.1",
          "-0.16", "-0.13", "-0.28", "-0.32", "-0.07", "-0.2", "0.1", "-0.11",
          "-0.23", "-0.04", "-0.17", "-0.12", "-0.32", "0.05", "-0.27", 
         "-0.23", "-0.15", "-0.18", "-0.05", "-0.27", "-0.02", "-0.4", "0.04",
          "-0.25", "-0.07", "-0.23", "-0.09", "0", "-0.36", "0.05", "-0.34", 
         "0.08", "-0.23", "-0.05", "-0.27", "-0.23", "-0.49", "-0.29", "0.05",
          "-0.22", "0.22", "-0.43", "-0.03", "1.18", "-1.83", "0", "1.3", 
         "0.2", "-0.75", "-1.12", "-0.03", "0.58", "-1.16", "0.74", "0.31", 
         "0.03", "-0.85", "-0.79", "0.56", "-1.1", "-0.06", "-0.44", "0.63", 
         "0.41", "0.88", "-0.6", "0.2", "-0.66", "-0.66", "0.97", "0.44", 
         "-1.41", "-2.98", "12.48", "12.56", "-30.15", "4.24", "28.02", 
         "-14.29", "-20.76", "20.06", "-3.27", "-2.31", "-0.02", "-0.06", 
         "-0.09", "-0.06", "0", "0.13", "-0.15", "-0.25", "-0.13", "0.06", 
         "0.13", "-0.11", "-0.33", "0.18", "-0.06", "0.16", "0.28", "0.15", 
         "-0.03", "-0.46", "0.12", "-0.26", "0.17", "-0.23", "-0.02", "-0.13",
          "-0.27", "0.12", "-0.23", "0.22", "-0.29", "-0.08", "-0.1", "0.14", 
         "-0.56", "0.53", "-0.03", "-0.16", "-0.17", "-0.13", "-0.07", "0.06",
          "-0.45", "-0.18", "0.21", "-0.12", "-0.31", "-0.1", "0.22", "0.17", 
         "-0.08", "-0.57", "0.04", "0.66", "-0.63", "-3.62", "-1.91", "0.35", 
         "1.49", "-1.41", "13.14", "-0.71", "2.17", "-1.06", "1.01", "-0.9", 
         "0.55", "0.03", "0.7", "-0.05"}}, CompressedData["
1:eJwt02tIE2AUBuClToaOVeJCVIxGmiEhCSOjtJI0zTJYKFZiJSgWkiZZS6nQ
GBgDw2IkrEZYSqVoCYqZ+EPcN6FQssxEUhoJ2sLIkqyVXd7z/hgPbIdzvnPZ
hqJyS3GgRqNZxc+Tf5/h8z+H+qZ9ewquiw23RH2AH+42r8DmdLHVqXH/V9cu
nu4XV16L+oBAmHZCC73VOth1JxSumzTAiKAwaPMZ4bmbETBkIgpenI+B7zaa
oLkwDn77HQ9dnxNYLxHu1yfBS7vMMM+QAg9sEzPfp7JuGnx1MAPGBmfBnTPZ
fF8OrAm3wJlDubDn6xHYl1XAusf5/UnWK+bvpfBxZRlU2eVwzn8WfoyrgtFH
rfBDSw28MHAFlpTUMc4Gw67WwxibHVp6G5ivES6OOTi/JsY5GefiXJrdsr9W
9vuQc26DL02djOvi/LphcO1T9tMPp34McH6DjHPDiXvD3P8L5htl3Bjn/Ibz
mYQZPVPc7zTremHHvlnWnYf52z8xboH7WORdLcHNBX7O8Re8G/mH+9AqqR+s
ZC46qofLh1fD9ugwWNpo5O8RcHIkCqaGrIdBeSZ4vyJWyd3HK5lfguL9KbnT
JLgm38y4ZDj6fYeSPlKV9JEGIxPTlew3k/my4aMvOUruwAIrS3OVzDlfyZ0c
U7KPQliRUqRkH8Vw3HoKbtpaxrgz7LeS76tiv1bWrWHdy0r+73Xs18b31cPw
Djv7aICGLTeU/D8cMKeoCdY6nMznYnwz67ZAb/UDzrmN8+tkvi722w332nv5
vmfMM8D3DcLka27GDSv5/z5n3AjnPMa5jDPuLfuY4n5neCdevm+W/c6xro99
LDDfIvMtwdtDy0ru2c85ryi55wCP3LPWI/l0Huk31CPvM0Cbb61H5meEfwFR
X2tX
       "], 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, 
        ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, 
      True, 11.3],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.740667673328669*^9, 3.740667699109222*^9}},
 CellLabel->
  "Out[139]=",ExpressionUUID->"e6c3a7bc-03c1-4f01-a8f2-6566443580b7"]
}, Open  ]],

Cell["\<\

The accelerometer data can also be plotted with the following Dynamic: (red \
--> x, green --> y, blue --> z)\
\>", "Text",
 CellChangeTimes->{{3.740665926093586*^9, 3.740665998228347*^9}, {
  3.740667619114959*^9, 
  3.740667637823498*^9}},ExpressionUUID->"2ad88a11-4caa-4280-b860-\
9f0d8ca5ba3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"ToExpression", "/@", 
       RowBox[{"Reverse", "[", 
        RowBox[{"Take", "[", 
         RowBox[{
          RowBox[{"Reverse", "[", 
           RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "]"}], ",", 
          RowBox[{"UpTo", "[", "100", "]"}]}], "]"}], "]"}]}], "&"}], "/@", 
     RowBox[{
      RowBox[{
       RowBox[{"c", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
       "[", "\"\<TimeSeries\>\"", "]"}], "\[LeftDoubleBracket]", 
      RowBox[{"2", ";;", "4"}], "\[RightDoubleBracket]"}]}], ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"All", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "50"}], ",", "50"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"PlotStyle", "->", 
     RowBox[{"{", 
      RowBox[{"Red", ",", " ", "Green", ",", " ", "Blue"}], "}"}]}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.740667892403247*^9, 3.7406679029649687`*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"c71dea1e-0845-4660-97ac-dc1512db4e43"],

Cell[BoxData[
 DynamicBox[ToBoxes[
   ListLinePlot[
    Map[Map[ToExpression, 
      Reverse[
       Take[
        Reverse[
         #["Values"]], 
        UpTo[100]]]]& , 
     Part[
      Part[$CellContext`c, 3]["TimeSeries"], 
      Span[2, 4]]], PlotRange -> {All, {-50, 50}}, 
    PlotStyle -> {Red, Green, Blue}], StandardForm],
  ImageSizeCache->{527., {127., 134.}}]], "Output",
 CellChangeTimes->{{3.740667876689383*^9, 3.740667904267539*^9}},
 CellLabel->
  "Out[148]=",ExpressionUUID->"3b6da9a0-5cd0-4d0c-9bd0-2852cf6a7a75"]
}, Open  ]],

Cell["When you\[CloseCurlyQuote]re done, delete the channel by running", \
"Text",
 CellChangeTimes->{{3.740667609407413*^9, 3.740667613996648*^9}, {
  3.7406677177862988`*^9, 
  3.740667731300632*^9}},ExpressionUUID->"60661c2e-0bf9-4570-a462-\
50d86bba52a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RemoveChannelListener", "[", 
  RowBox[{"c", "[", 
   RowBox[{"[", "3", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7406677317575483`*^9, 3.7406677361057158`*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"b0dac091-8e11-4f3d-9e65-6a7e12a41bf3"],

Cell[BoxData[
 RowBox[{"ChannelListener", "[", "\<\"bHQbnl\"\>", "]"}]], "Output",
 CellChangeTimes->{
  3.7406677372688026`*^9, {3.74066781713756*^9, 3.740667832944873*^9}},
 CellLabel->
  "Out[144]=",ExpressionUUID->"5b7c5baf-c906-45d6-9797-9b19bfa18a4c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gesture Classification using Neural Networks", "Section",
 CellChangeTimes->{{3.740616897964136*^9, 
  3.740616911330059*^9}},ExpressionUUID->"a734c7bd-0b14-4dfe-833a-\
6a768b8421a8"],

Cell["\<\
Now that we are able to stream accelerometer data to the WL, we may proceed \
to implement gesture recognition / classification. Due to limited time at \
camp, we used the UDP socket method to do this - in the future, we hope to \
move the system over to the (more user-friendly) channel interface.\
\>", "Text",
 CellChangeTimes->{{3.7407309556181297`*^9, 3.740731033462574*^9}, {
  3.740731718213249*^9, 3.740731775779958*^9}, {3.7407318335280647`*^9, 
  3.740731957432919*^9}, {3.74073291564328*^9, 3.740732943498994*^9}, {
  3.740732999436255*^9, 3.740733014453898*^9}, {3.740733049579632*^9, 
  3.7407331661929903`*^9}, {3.740839039663804*^9, 
  3.7408390401341457`*^9}},ExpressionUUID->"09aff1f7-ab98-4c02-9b7d-\
7d01fa9404f6"],

Cell["\<\
We open the \"Sensorstream IMU+GPS\" app \
(https://play.google.com/store/apps/details?id=de.lorenz_fenster.\
sensorstreamgps), set the target IP address to the IP address of the computer \
running Wolfram Language (on the same local area network as the phone), \
ensure the first three sensors on the 'Toggle Sensors' page are checked and \
that the 'UDP Stream' option is selected and switch the stream ON:

 the following code to initialise data streaming:\
\>", "Text",
 CellChangeTimes->{{3.7407309556181297`*^9, 3.740731033462574*^9}, {
   3.740731718213249*^9, 3.740731775779958*^9}, {3.7407318335280647`*^9, 
   3.740731957432919*^9}, {3.74073291564328*^9, 3.740732943498994*^9}, {
   3.740732999436255*^9, 3.740733014453898*^9}, {3.740733049579632*^9, 
   3.740733157027501*^9}, 
   3.740839038643306*^9},ExpressionUUID->"48441846-c2e4-41ae-a779-\
65b44ccd95a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"a6179da4-eb50-4eba-a755-0302675e8914"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"QuitJava", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"InstallJava", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"udpSocket", "=", 
   RowBox[{"JavaNew", "[", 
    RowBox[{"\"\<java.net.DatagramSocket\>\"", ",", "5555"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7397501778030367`*^9, 3.739750198406887*^9}, {
  3.739751145943766*^9, 3.73975116315908*^9}, {3.739751227440393*^9, 
  3.739751252153933*^9}, {3.7401560447814913`*^9, 3.740156053494109*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"fcd49587-53e2-418c-a09e-28475e315ce3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"readSocket", "[", 
   RowBox[{"sock_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"JavaBlock", "@", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"datagramPacket", "=", 
       RowBox[{"JavaNew", "[", 
        RowBox[{"\"\<java.net.DatagramPacket\>\"", ",", 
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", "size"}], "]"}], ",", "size"}], "]"}]}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"sock", "@", 
       RowBox[{"receive", "[", "datagramPacket", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"datagramPacket", "@", 
       RowBox[{"getData", "[", "]"}]}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7397502050300913`*^9, 3.739750205032803*^9}, {
  3.740050344994492*^9, 3.740050345971442*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"73646c7c-d419-4f7e-b5df-ef0f1308ee42"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listen", "[", "]"}], ":=", 
   RowBox[{"record", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"readSocket", "[", 
         RowBox[{"udpSocket", ",", "1200"}], "]"}], ",", "0"}], "]"}], "//", 
      "FromCharacterCode"}], "//", "Sow"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73975032607619*^9, 3.7397503319278097`*^9}, 
   3.739750384802672*^9, {3.739750474320266*^9, 3.739750489693359*^9}, {
   3.739750664898992*^9, 3.73975066523312*^9}, 3.7401414548201923`*^9},
 CellLabel->"In[56]:=",ExpressionUUID->"a359bee2-0468-4cac-94e0-8420016888d8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.740732924670741*^9, 
  3.740732925082225*^9}},ExpressionUUID->"c594befe-2c10-479b-a86e-\
ca6f280dca9d"],

Cell["\<\

On a technical level, the problem is as follows: given a continuous stream of \
accelerometer data (or similar), 

1. distinguish periods during which the user is performing a given gesture \
from other activities / noise and 

2. identify / classify a particular gesture based on accelerometer data \
during that period. This essentially boils down to classification of a time \
series dataset, in which we can observe a series of emissions (accelerometer \
data) but not the states generating the emissions (gestures). 

A solution to (1) is relatively straightforward: one can \
\>", "Text",
 CellChangeTimes->{{3.7407309556181297`*^9, 3.740731033462574*^9}, {
  3.740731718213249*^9, 3.740731775779958*^9}, {3.7407318335280647`*^9, 
  3.740731957432919*^9}, {3.74073291564328*^9, 
  3.740732919766128*^9}},ExpressionUUID->"71e492dc-d22c-4576-b7bc-\
13ab85a5a1a1"],

Cell["", "Text",
 CellChangeTimes->{{3.7406171666701*^9, 3.7406171672000237`*^9}, {
  3.740687221916333*^9, 3.7406872234445553`*^9}, {3.740730890939645*^9, 
  3.740730894613983*^9}},ExpressionUUID->"a5249397-0ccf-4312-8b95-\
385954fb832b"],

Cell[CellGroupData[{

Cell["Data Collection", "Subsection",
 CellChangeTimes->{{3.740617172174205*^9, 
  3.740617175884116*^9}},ExpressionUUID->"07401dfd-6bf1-452d-a492-\
d78b76231be2"],

Cell["To train the network, ", "Text",
 CellChangeTimes->{{3.740617188282687*^9, 
  3.7406171992994633`*^9}},ExpressionUUID->"8dd30cfb-1179-47b1-b141-\
73f7afd86f53"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["About the References", "Section",
 CellChangeTimes->{3.664645711805661*^9},
 ExpressionUUID -> "08eae83a-c7b7-497c-a800-aa27b7730341"],

Cell["\<\
References should give pointers to background material and related work. They \
should record credit due to other authors. \
\>", "Text", "NoIndent",
 CellChangeTimes->{{3.605972868204238*^9, 3.6059728786753407`*^9}},
 ExpressionUUID -> "0bc594b8-fd43-4c30-a452-a5e1874dc4d0"],

Cell[TextData[{
 "References are numbered sequentially throughout the text. Each item should \
be given a separate number (except when citations are made to different \
portions of the same document: these should be indicated as \
\[OpenCurlyDoubleQuote][",
 
 CounterBox["Reference", "text-a"],
 ", pp. 3\[Dash]56]\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote][",
 
 CounterBox["Reference", "text-a"],
 ", Chapter 14]\[CloseCurlyDoubleQuote]). "
}], "Text",
 CellChangeTimes->{{3.561122954040134*^9, 3.561123010715437*^9}, 
   3.6012988652299337`*^9, {3.605972924913355*^9, 3.605972928018064*^9}},
 ExpressionUUID -> "68aeeb35-9884-4dc4-ba3c-afc93154d5c6"],

Cell[TextData[{
 StyleBox["Full titles of papers should be given", "TI"],
 ". They should be enclosed in quotation marks, with all important words \
capitalized. Titles of printed items should be followed by a comma inside the \
quotation marks. Include the paper\[CloseCurlyQuote]s digital object \
identifier (DOI) name (number) if it is available (",
 ButtonBox["www.doi.org/hb.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.doi.org/hb.html"], None},
  ButtonNote->"http://www.doi.org/hb.html"],
 "). Titles accessible only via the internet are treated differently based on \
their type. See the examples described in the References section of this \
sample paper."
}], "Text",
 CellChangeTimes->{{3.561123047667046*^9, 3.561123049290382*^9}, {
  3.605972978184272*^9, 3.6059729906690903`*^9}, {3.605973030755376*^9, 
  3.6059730739974623`*^9}, {3.60597362089433*^9, 3.605973631342835*^9}, {
  3.605973712851347*^9, 3.605973766938497*^9}, {3.605973866355365*^9, 
  3.6059738890906973`*^9}, {3.6059743166138353`*^9, 3.6059743331489*^9}, {
  3.605974957423963*^9, 3.605974971921732*^9}, {3.606131604412448*^9, 
  3.606131606559536*^9}, {3.606131733604926*^9, 3.606131747401297*^9}, {
  3.722085817227024*^9, 
  3.722085822701687*^9}},ExpressionUUID->"ad482503-381e-4bb1-a810-\
f9f6ab1409a6"],

Cell[TextData[{
 "To cater to a wide variety of disciplines, it is important that ",
 StyleBox["all names of journals be spelled out in full", "TI"],
 " and italicized. (Use ",
 StyleBox["Physical Review Letters", "TI"],
 ", not ",
 StyleBox["Phys. Rev. Lett.", "TI"],
 ", and ",
 StyleBox["Journal of Computer and System Science", "TI"],
 ", not ",
 StyleBox["J. Comput. Sys. Sci", "TI"],
 ".) "
}], "Text",
 CellChangeTimes->{3.5611230585159388`*^9, 3.6647262730566587`*^9},
 ExpressionUUID -> "e188a325-5748-47c1-871b-5220cbd13af8"],

Cell[TextData[{
 "For printed items, give the journal\[CloseCurlyQuote]s volume number in \
boldface (do not write the word \[OpenCurlyDoubleQuote]volume\
\[CloseCurlyDoubleQuote] explicitly). The issue number should be placed in \
parentheses immediately following the volume number, but not in bold: for \
example, ",
 StyleBox["4", "TB"],
 "(1). Include months only when necessary, using their three-letter \
abbreviation. Give starting and ending page numbers."
}], "Text",
 CellChangeTimes->{{3.561123092818915*^9, 3.561123098490479*^9}, 
   3.561125570396636*^9, {3.605973981836677*^9, 3.605974076719665*^9}, 
   3.6647263418936234`*^9},
 ExpressionUUID -> "2fd5c342-e438-4ee7-be8d-f630b56e4203"],

Cell["\<\
Author names should be given with initials first, with spaces after each \
period. For sources that list more than 10 authors, the names of the first \
seven authors should be given, followed by \[OpenCurlyDoubleQuote]et al.\
\[CloseCurlyDoubleQuote] For sources with fewer than 10 authors, all names \
are listed.\
\>", "Text",
 CellChangeTimes->{{3.558950712931851*^9, 3.558950725700157*^9}, {
   3.5611231170434504`*^9, 3.561123127378819*^9}, {3.5611231602541027`*^9, 
   3.561123178941156*^9}, {3.56112604038769*^9, 3.561126052422633*^9}, {
   3.6059740882512493`*^9, 3.605974112919759*^9}, {3.6647263517596703`*^9, 
   3.664726359904786*^9}, {3.722019392473055*^9, 3.7220194043064327`*^9}, {
   3.724166526268537*^9, 3.724166557878673*^9}, 
   3.739034378623726*^9},ExpressionUUID->"1cac7e0a-9129-45f9-88d6-\
aac1dafdd759"],

Cell["\<\
Titles of books (i.e., published material with ISBN numbers) should be \
italicized. Names and cities of publishers and dates of publication should \
always be given. Conference proceedings that are distributed through ordinary \
publishers should be cited like books. \
\>", "Text",
 CellChangeTimes->{
  3.561123198304194*^9, {3.605974452052342*^9, 3.605974453388608*^9}},
 ExpressionUUID -> "dd5c1a12-9a09-4eea-85af-4e3d2fb94bba"],

Cell["\<\
Titles of proceedings and reports that are distributed in other ways or via \
the internet should be given in full in the standard roman typeface. URLs or \
other information on how to obtain them should be given following the title. \
Pricing information should not be included.\
\>", "Text",
 CellChangeTimes->{{3.605974159451647*^9, 3.6059741698557796`*^9}, {
  3.6059744898406553`*^9, 3.605974497949785*^9}, {3.605974528054536*^9, 
  3.605974550835655*^9}, {3.6059794771091537`*^9, 3.60597948657902*^9}, {
  3.6647263837915277`*^9, 3.664726384013818*^9}},
 ExpressionUUID -> "1fae204c-269c-4516-83e0-32016316a889"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgments", "SectionAlt",
 ExpressionUUID -> "079f9c64-1889-4963-8731-1e029c68de10"],

Cell[TextData[{
 "Acknowledgments should thank individuals and organizations for their \
contributions to the work. All funding information should be placed in the \
acknowledgments. If acknowledgments imply some endorsement of the paper \
(e.g., \[OpenCurlyDoubleQuote]We thank X for checking",
 Cell[BoxData[
  FormBox["\[Ellipsis]", TraditionalForm]], "InlineFormula",ExpressionUUID->
  "f9ddccaa-3ac0-4995-b3b8-8415cfb1642e"],
 "\[CloseCurlyDoubleQuote]), make sure the parties involved approve the \
statements made."
}], "Text", "NoIndent",
 CellChangeTimes->{3.561122890016822*^9, 3.664645709914509*^9, 
  3.7241654361835127`*^9},ExpressionUUID->"2cbd47dd-a66e-4bc8-b6d0-\
c40c6fac5260"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "SectionAlt",
 ExpressionUUID -> "55ac9c15-9dfa-41e0-8795-65a9b010628a"],

Cell[TextData[{
 "F. Authorlast and S. Authorlast, \[OpenCurlyDoubleQuote]Article Title,\
\[CloseCurlyDoubleQuote] ",
 StyleBox["Full Name of Journal", "TI"],
 ", ",
 StyleBox["volume", "TB"],
 "(issue number), year pp. #\[Dash]#. doi:name.\nR. Albert and A.\[Hyphen]L. \
Barab\[AAcute]si, \[OpenCurlyDoubleQuote]Statistical Mechanics of Complex \
Networks,\[CloseCurlyDoubleQuote] ",
 StyleBox["Reviews of Modern Physics",
  FontSlant->"Italic"],
 ", ",
 StyleBox["74", "TB"],
 "(1), 2002 pp. 47\[Dash]97. ",
 ButtonBox["doi:10.1103/RevModPhys.74.47",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://dx.doi.org/10.1103/RevModPhys.74.47"], None},
  ButtonNote->"https://dx.doi.org/10.1103/RevModPhys.74.47"],
 "."
}], "Reference",
 CellChangeTimes->{
  3.558879617932534*^9, {3.5611232259933453`*^9, 3.561123243654132*^9}, {
   3.561123613170761*^9, 3.5611236158444643`*^9}, {3.561126085136642*^9, 
   3.5611260889734077`*^9}, {3.580640578521758*^9, 3.580640598807787*^9}, {
   3.580641251322032*^9, 3.580641301427042*^9}, {3.605891366120865*^9, 
   3.605891372384671*^9}, {3.6059748815857153`*^9, 3.605974882192141*^9}, {
   3.605974988708982*^9, 3.6059750051428967`*^9}, 3.605975043957737*^9, {
   3.605978929944962*^9, 3.605978930495921*^9}, 3.605979425933279*^9, {
   3.606131853351387*^9, 3.606131853878768*^9}},
 CellTags->"a-review",
 ExpressionUUID -> "7584f889-3ffc-43d7-8f7d-7194b1b2c0f0"],

Cell[TextData[{
 "I. J. Authorlast, ",
 StyleBox["Book Title", "TI"],
 ", Publisher Location: Publisher Name, year. \nT. C. Schelling, ",
 StyleBox["Micromotives and Macrobehavior", "TI"],
 ", New York: Norton, 1978. "
}], "Reference",
 CellChangeTimes->{
  3.558879620721168*^9, {3.561123250316575*^9, 3.561123263253798*^9}, {
   3.561126101512393*^9, 3.56112610184802*^9}, {3.580641003586261*^9, 
   3.580641003887291*^9}, {3.5806410438122826`*^9, 3.580641050305932*^9}, 
   3.605528544170505*^9, {3.6058730575862093`*^9, 3.605873063096257*^9}, {
   3.6059789622756977`*^9, 3.605978962668887*^9}, 3.605979429485363*^9, {
   3.606132219650105*^9, 3.6061322200195227`*^9}, {3.617460286805935*^9, 
   3.61746029299212*^9}},
 CellTags->"text-a",ExpressionUUID->"2b05c214-2895-4b40-9bd3-888902eb02fd"],

Cell[TextData[{
 "A. Authorlast, \[OpenCurlyDoubleQuote]Paper Title,\[CloseCurlyDoubleQuote] \
in ",
 StyleBox["A Collection", "TI"],
 " (F. Editor and S. Editor, eds.), Publisher Location: Publisher Name, year \
pp. #\[Dash]#. doi:name.\nS. Hou, J. Sterling, S. Chen and G. Doolen, \
\[OpenCurlyDoubleQuote]A Lattice Boltzmann Subgrid Model for High Reynolds \
Number Flows,\[CloseCurlyDoubleQuote] in ",
 StyleBox["Pattern Formation and Lattice Gas Automata", "TI"],
 " (A. T. Lawniczak and R. Kapral, eds.), Toronto: Fields Institute \
Communications, ",
 StyleBox["6", "TB"],
 ", 1996 pp. 151\[Dash]166. "
}], "Reference",
 CellChangeTimes->{
  3.5588796235226383`*^9, {3.5611232781559973`*^9, 3.561123320091846*^9}, {
   3.561126110648458*^9, 3.5611261109603243`*^9}, {3.5806409968345857`*^9, 
   3.5806409978046827`*^9}, {3.5806410573986416`*^9, 3.580641062317133*^9}, {
   3.601298354796323*^9, 3.60129838583267*^9}, 3.605873069106515*^9, {
   3.605974869358102*^9, 3.605974885803236*^9}, {3.6059750496713467`*^9, 
   3.605975050604144*^9}, 3.605979093045223*^9, 3.6059791441999474`*^9, 
   3.605979434345457*^9, {3.606132435762272*^9, 3.606132438560533*^9}, 
   3.606132757286819*^9, 3.606136443413127*^9, {3.617460298943493*^9, 
   3.617460302588326*^9}, 3.722019657653809*^9},
 CellTags->"text-b",
 ExpressionUUID -> "c7983db0-1bb9-40c9-b3c1-ccf83b74499d"],

Cell[TextData[{
 "A. Editor, ed., ",
 StyleBox["Book Title", "TI"],
 ", nth ed., Publisher Location: Publisher Name, year. \nA. Law and D. \
Kelton, eds., ",
 StyleBox["Simulation Modeling and Analysis",
  FontSlant->"Italic"],
 ", 3rd ed., Boston: McGraw-Hill, 2000."
}], "Reference",
 CellChangeTimes->{
  3.558879626593897*^9, {3.561123330406437*^9, 3.561123331941943*^9}, {
   3.561123518868252*^9, 3.5611235469808197`*^9}, {3.580640882240127*^9, 
   3.580640887025606*^9}, {3.5806409892538276`*^9, 3.58064098977888*^9}, {
   3.580641090807982*^9, 3.580641096378539*^9}, 3.6059790985793457`*^9, 
   3.605979438226679*^9, {3.606132444039514*^9, 3.606132444489702*^9}, 
   3.606132891262876*^9, 3.6061368410072603`*^9, {3.6071853980842333`*^9, 
   3.607185401201757*^9}, {3.61746014515732*^9, 3.6174601498697367`*^9}, {
   3.617460315491871*^9, 3.6174603214994287`*^9}},
 CellTags->"edbook",ExpressionUUID->"74754f72-77d7-4fb7-82e3-545f01a12088"],

Cell[TextData[{
 "A. Authorlast, \[OpenCurlyDoubleQuote]Paper Title,\[CloseCurlyDoubleQuote] \
in ",
 StyleBox["Conference Proceedings Title ",
  FontSlant->"Italic"],
 "(",
 StyleBox["Conference Acronym and year",
  FontSlant->"Italic"],
 "), Conference Location (A. Authorlast, ed.), Publisher Location: Publisher \
Name, year pp. #\[Dash]#.\nP. Fritzson, L. Viklund, J. Herber and D. \
Fritzson, \[OpenCurlyDoubleQuote]Industrial ",
 StyleBox["Application",
  HyphenationOptions->{"HyphenationMinLengths"->{2, 5}}],
 " of Object-Oriented Mathematical Modeling and Computer ",
 StyleBox["Algebra",
  Hyphenation->False],
 " in Mechanical Analysis,\[CloseCurlyDoubleQuote] in ",
 StyleBox["Proceedings of the Seventh ",
  FontSlant->"Italic"],
 StyleBox["International",
  HyphenationOptions->{"HyphenationMinLengths"->{2, 8}},
  FontSlant->"Italic"],
 StyleBox[" Conference on Technology of Object-Oriented Languages and ",
  FontSlant->"Italic"],
 StyleBox["Systems",
  Hyphenation->False,
  FontSlant->"Italic"],
 StyleBox[" (TOOLS EUROPE\[CloseCurlyQuote]92)",
  FontSlant->"Italic"],
 ", Dortmund, Germany (G. Heeg,\[LineSeparator]B. Magnosson and B. Meyer, \
eds.), Hertfordshire, UK: Prentice Hall ",
 StyleBox["International",
  Hyphenation->False],
 " (UK) Ltd., 1992 pp. 167\[Dash]181."
}], "Reference",
 CellChangeTimes->{
  3.55887962941757*^9, {3.5611235702830477`*^9, 3.561123592110421*^9}, {
   3.5806406104789543`*^9, 3.580640621106016*^9}, {3.5806407795008545`*^9, 
   3.580640780289933*^9}, {3.5806413082587247`*^9, 3.5806413114000387`*^9}, 
   3.6058730742127743`*^9, 3.605974630060746*^9, {3.605974890157299*^9, 
   3.6059748904156847`*^9}, 3.605975058221459*^9, {3.605979000683278*^9, 
   3.605979001178*^9}, 3.60597944231002*^9, 3.606136481830928*^9, 
   3.606136648286537*^9, {3.6071886219492064`*^9, 3.607188625113929*^9}, {
   3.607188904001935*^9, 3.60718890842094*^9}, {3.609512545431368*^9, 
   3.609512545711763*^9}, {3.722019667282502*^9, 3.722019694972865*^9}},
 CellTags->"proc",
 ExpressionUUID -> "bf7a9dd1-79c0-419f-b436-639250408796"],

Cell[TextData[{
 "A. Authorlast, ",
 StyleBox["Technical Report Title",
  FontSlant->"Italic"],
 ", Classification/Number, Department, University or Organization, Location, \
year. URL if available.\nC. Lemieux, M. Cieslak and K. Luttmer, ",
 StyleBox["RandQMC User\[CloseCurlyQuote]s Guide: A Package for Randomized \
Quasi-Monte Carlo Methods in C",
  FontSlant->"Italic"],
 ", Technical report 2002-712-15, Department of Computer Science, University \
of ",
 StyleBox["Calgary",
  Hyphenation->False],
 ", 2002. ",
 ButtonBox["hdl.handle.net/1880/46569",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://hdl.handle.net/1880/46569"], 
    "http://hdl.handle.net/1880/46569"},
  ButtonNote->"http://hdl.handle.net/1880/46569"],
 "."
}], "Reference",
 CellChangeTimes->{
  3.5588796326687317`*^9, {3.561123642344771*^9, 3.561123657356883*^9}, {
   3.5611236983323383`*^9, 3.5611237268944817`*^9}, 3.561126147549593*^9, {
   3.5806406326671724`*^9, 3.580640683828288*^9}, {3.580641122318133*^9, 
   3.580641155182419*^9}, 3.580641305593458*^9, 3.605873076406127*^9, 
   3.606137188294942*^9, 3.6061375001365232`*^9, 3.6071854320655947`*^9, 
   3.607188603539928*^9, 3.722019701992663*^9},
 CellTags->"report",
 ExpressionUUID -> "ca6669d7-b854-4c1b-ae17-77d600daf87a"],

Cell[TextData[{
 "A. Authorlast, ",
 StyleBox["Preprint Book Title",
  FontSlant->"Italic"],
 ", Publisher Location: Publisher Name, forthcoming. \nJ.\[Hyphen]P. Aubin, \
L. Chen and O. Dordan, ",
 StyleBox["Tychastic Measure of Viability Risk: A Viabilist Portfolio \
Performance and Insurance Approach", "TI"],
 ", ",
 StyleBox["Heidelberg",
  HyphenationOptions->{"HyphenationMinLengths"->{2, 5}}],
 ": Springer, forthcoming.\n",
 ButtonBox["vimades.com/AUBIN/EradicationVPPI-Presentation.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://vimades.com/AUBIN/EradicationVPPI-Presentation.pdf"], None},
  ButtonNote->"http://vimades.com/AUBIN/EradicationVPPI-Presentation.pdf"],
 "."
}], "Reference",
 CellChangeTimes->{
  3.558879635065022*^9, {3.561123760009199*^9, 3.561123767044717*^9}, {
   3.580640699381843*^9, 3.5806407108749924`*^9}, {3.580641183181218*^9, 
   3.5806411867295732`*^9}, 3.605873078386512*^9, {3.6061328227142963`*^9, 
   3.6061328232196407`*^9}, 3.722019712692561*^9},
 CellTags->"preprint",
 ExpressionUUID -> "e5ccc71f-da99-4103-a613-4f1b0ca1dfc4"],

Cell[TextData[{
 "Company Name, ",
 StyleBox["Computer Program Reference Manual",
  FontSlant->"Italic"],
 " (available from Name, address). \nXerox, ",
 StyleBox["InterLISP Reference Manual",
  FontSlant->"Italic"],
 " (available from Xerox Palo Alto ",
 StyleBox["Research",
  Hyphenation->False],
 " Center, Palo Alto, CA)."
}], "Reference",
 CellChangeTimes->{
  3.558879637359968*^9, 3.606137194229218*^9, 3.606137583503261*^9, {
   3.607185495939395*^9, 3.607185496436535*^9}, 3.607188682567498*^9},
 CellTags->"manual",ExpressionUUID->"e6ca8647-2cbc-4ad9-8a21-305307c6ee6b"],

Cell[TextData[{
 "A. Authorlast, \[OpenCurlyDoubleQuote]Future Paper,\[CloseCurlyDoubleQuote] \
",
 StyleBox["Full Name of Journal", "TI"],
 ", forthcoming. \nJ. Riedel and H. Zenil, \[OpenCurlyDoubleQuote]Cross\
\[Hyphen]Boundary Behavioural ",
 StyleBox["Reprogrammability",
  HyphenationOptions->{"HyphenationMinLengths"->{3, 4}}],
 " Reveals Evidence of Pervasive Universality,\[CloseCurlyDoubleQuote] ",
 StyleBox["International Journal of Unconventional Computing",
  FontSlant->"Italic"],
 ", forthcoming. ",
 ButtonBox["arxiv.org/abs/1510.01671",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://arxiv.org/abs/1510.01671"], None},
  ButtonNote->"http://arxiv.org/abs/1510.01671"],
 ". "
}], "Reference",
 CellChangeTimes->{
  3.558879640318778*^9, {3.561123799009512*^9, 3.561123807982319*^9}, 
   3.561126168950844*^9, 3.605528560122624*^9, 3.6058730817275877`*^9, 
   3.606137196749288*^9, 3.6061375874149027`*^9, {3.7241666536805677`*^9, 
   3.72416665446874*^9}, 3.72416683319492*^9, {3.730115361524124*^9, 
   3.730115361922415*^9}},
 CellTags->"future",
 ExpressionUUID -> "185d65bb-6ae2-4cf6-a57f-cd9f9a1e094e"],

Cell[TextData[{
 "A. Authorlast, \[OpenCurlyDoubleQuote]Title,\[CloseCurlyDoubleQuote] \
presentation given at ",
 StyleBox["Conference Name (Conference Acronym and year)",
  FontSlant->"Italic"],
 ", Location. URL of abstract if available.\nA. Banos, \
\[OpenCurlyDoubleQuote]Exploring Network Effects in Schelling\
\[CloseCurlyQuote]s Segregation Model,\[CloseCurlyDoubleQuote] presentation \
given at ",
 StyleBox["S4\[Hyphen]Modus Workshop: Multi\[Hyphen]scale Interactions \
between Urban Forms and Processes", "TI"],
 ", Besan\[CCedilla]on, France, 2009. "
}], "Reference",
 CellChangeTimes->{
  3.558879643525155*^9, {3.5806407255484595`*^9, 3.5806407852824326`*^9}, 
   3.5806413371406126`*^9, 3.605873083189753*^9, {3.606132111707165*^9, 
   3.606132112166226*^9}},
 CellTags->"talk",ExpressionUUID->"bf8eefa5-bcce-400d-a298-f62754722b86"],

Cell[TextData[{
 "Software Name, Release Version Number, Location: Organization, year.\nU. \
Wilensky. \[OpenCurlyDoubleQuote]NetLogo.\[CloseCurlyDoubleQuote] Center for \
Connected Learning and Computer\[Hyphen]Based Modeling, Northwestern \
University, Evanston, IL. (Oct 25, 2012) ",
 ButtonBox["ccl.northwestern.edu/netlogo/index.shtml",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://ccl.northwestern.edu/netlogo/index.shtml"], None},
  ButtonNote->"http://ccl.northwestern.edu/netlogo/index.shtml"],
 "."
}], "Reference",
 CellChangeTimes->{
  3.5588796481601954`*^9, {3.5806408027341776`*^9, 3.5806408214100447`*^9}, {
   3.5806413461665154`*^9, 3.5806413468515835`*^9}, {3.606132045319989*^9, 
   3.606132045656708*^9}},
 CellTags->"program",ExpressionUUID->"d3aa0187-a2f5-4efd-9bd2-da61f40d4a9b"],

Cell[TextData[{
 "A. Authorlast. \[OpenCurlyDoubleQuote]Website (or page) Title.\
\[CloseCurlyDoubleQuote] (Month Day, Year) URL.\n",
 "OnlineAtlas.us. \[OpenCurlyDoubleQuote]United States Interstate Highway \
Map.\[CloseCurlyDoubleQuote] (May 7, 2012)",
 " ",
 ButtonBox["www.onlineatlas.us/interstate-highways.htm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.onlineatlas.us/interstate-highways.htm"], None},
  ButtonNote->"http://www.onlineatlas.us/interstate-highways.htm"],
 "."
}], "Reference",
 CellChangeTimes->{{3.580641389309829*^9, 3.5806414294458427`*^9}, {
   3.580641466349532*^9, 3.5806414697368712`*^9}, 3.580645554303068*^9, {
   3.605528510611186*^9, 3.6055285126799726`*^9}, 3.605873086587585*^9, {
   3.6061368759948874`*^9, 3.60613688422561*^9}, {3.6061369744724207`*^9, 
   3.6061369790859537`*^9}},
 CellTags->"website",ExpressionUUID->"c475cb14-12fc-4a83-b6f6-73c723fea7bf"],

Cell[TextData[{
 "A. Authorlast. \[OpenCurlyDoubleQuote]Blog Title,\[CloseCurlyDoubleQuote] \
Blog Series Name (blog). (Month Day, Year) URL.\nB. Yorgey, \
\[OpenCurlyDoubleQuote]Recounting the Rationals, Part II,\
\[CloseCurlyDoubleQuote] ",
 StyleBox["The Math Less Traveled",
  FontSlant->"Italic"],
 " (blog). (Apr 2, 2010) ",
 ButtonBox["www.mathlesstraveled.com/?p=97",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.mathlesstraveled.com/?p=97"], None},
  ButtonNote->"http://www.mathlesstraveled.com/?p=97"],
 "."
}], "Reference",
 CellChangeTimes->{{3.580641389309829*^9, 3.5806414294458427`*^9}, {
   3.580641466349532*^9, 3.5806414697368712`*^9}, 3.580645554303068*^9, {
   3.6012440808913116`*^9, 3.6012441037141113`*^9}, {3.601298518561881*^9, 
   3.601298527638369*^9}, {3.6055285168200417`*^9, 3.605528518203725*^9}, 
   3.60587309310215*^9, {3.606137396137158*^9, 3.606137396717661*^9}},
 CellTags->"blog",ExpressionUUID->"f366baaf-231e-4f67-99a4-fb73cd9f149c"],

Cell[TextData[{
 "A. Authorlast. \[OpenCurlyDoubleQuote]Forum Post\[CloseCurlyDoubleQuote] \
from Forum Name. (Month Day, Year) URL.\nT. Rowland. \
\[OpenCurlyDoubleQuote]Enumerating Strings\[CloseCurlyDoubleQuote] from The \
NKS Forum\[LongDash]A Wolfram Web Resource. (Apr 2, 2010)\n",
 ButtonBox["forum.wolframscience.com/showthread.php?s=&threadid=929",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://forum.wolframscience.com/showthread.php?s=&threadid=929"], 
    None},
  ButtonNote->
   "http://forum.wolframscience.com/showthread.php?s=&threadid=929"],
 "."
}], "Reference",
 CellChangeTimes->{{3.580641389309829*^9, 3.5806414294458427`*^9}, {
   3.580641466349532*^9, 3.5806414697368712`*^9}, 3.580645554303068*^9, {
   3.6012441188773117`*^9, 3.6012441347113113`*^9}, {3.6012985456746893`*^9, 
   3.60129855940833*^9}, {3.605528522636327*^9, 3.605528523682413*^9}, {
   3.605528606473216*^9, 3.605528606965889*^9}, {3.605528664478541*^9, 
   3.605528675500617*^9}, 3.6058730946426277`*^9, {3.606137294088545*^9, 
   3.606137294545776*^9}, {3.606137327571987*^9, 3.606137341592182*^9}, 
   3.606137754825716*^9, 3.7220860816238337`*^9},
 CellTags->"forum",ExpressionUUID->"98da19ff-c49f-4a81-94c1-b442eda8c176"],

Cell[TextData[{
 "A. Authorlast. \[OpenCurlyDoubleQuote]Demonstration Title\
\[CloseCurlyDoubleQuote] from the Wolfram Demonstrations Project\[LongDash]A \
Wolfram Web Resource. URL.\nE. Pegg Jr. \[OpenCurlyDoubleQuote]Coin Flips\
\[CloseCurlyDoubleQuote] from the Wolfram Demonstrations Project\[LongDash]A \
Wolfram Web Resource. ",
 ButtonBox["www.demonstrations.wolfram.com/CoinFlips",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.demonstrations.wolfram.com/CoinFlips"], None},
  ButtonNote->"http://www.demonstrations.wolfram.com/CoinFlips"],
 "."
}], "Reference",
 CellChangeTimes->{{3.580641389309829*^9, 3.5806414294458427`*^9}, {
   3.580641466349532*^9, 3.5806414697368712`*^9}, 3.580645554303068*^9, {
   3.6012441571753116`*^9, 3.6012441720889115`*^9}, {3.601298588839113*^9, 
   3.601298611788105*^9}, {3.605528527395081*^9, 3.605528528531124*^9}, 
   3.605873096105152*^9, {3.6061372403662243`*^9, 3.6061372695410748`*^9}, 
   3.606137748694728*^9, 3.690976917017345*^9},
 CellTags->
  "demonstration",ExpressionUUID->"a6b9a86f-645b-4c92-9de6-b9add030a138"],

Cell[TextData[{
 "A. Authorlast. \[OpenCurlyDoubleQuote]Wolfram Cloud Article Title.\
\[CloseCurlyDoubleQuote] (Month Day, Year) URL.\nA. A. de Laix. \
\[OpenCurlyDoubleQuote]Encryption with Enigma.\[CloseCurlyDoubleQuote] (Jul \
1, 2014)\n",
 ButtonBox["www.wolframcloud.com/objects/1f52ae4b-0686-4bde-966e-\n\
5e60d8225ae4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolframcloud.com/objects/1f52ae4b-0686-4bde-966e-\
5e60d8225ae4"], None},
  ButtonNote->
   "https://www.wolframcloud.com/objects/1f52ae4b-0686-4bde-966e-\
5e60d8225ae4"],
 "."
}], "Reference",
 CellChangeTimes->{{3.617459844534239*^9, 3.617459887003784*^9}, {
  3.617459921631855*^9, 3.617459921962813*^9}, {3.6174599600497017`*^9, 
  3.617460012467854*^9}},
 ExpressionUUID -> "f5cb6374-7521-4a35-920a-61470e6e1879"]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowToolbars->"EditBar",
WindowSize->{817, 795},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
PrintingOptions->{"PageSize"->Automatic,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
AutoItalicWords->{},
Magnification:>1.5 Inherited,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell[
      "Style Definitions for \nJournal of Complex Systems", "Subtitle", 
       CellMargins -> {{0, Inherited}, {Inherited, 0}}, 
       CellFrameMargins -> {{20, 4}, {8, 20}}, 
       CellChangeTimes -> {{3.4246310250469637`*^9, 3.4246310504158697`*^9}}, 
       FontSize -> 36, FontWeight -> "Bold", FontColor -> GrayLevel[1], 
       Background -> GrayLevel[0]], 
      Cell[
       StyleData[StyleDefinitions -> "Default.nb"]], 
      Cell[
       CellGroupData[{
         Cell[
         "Notes and Details", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "ComplexSystems.nb\n6-15-2018\n\nUse Mathematica Version 11.0.1 for \
correct print results.\n\nPrint Font Set:\nSabonLTStd-Bold.otf\n\
SabonLTStd-BoldItalic.otf\nSabonLTStd-Italic.otf\nSabonLTStd-Roman.otf\n\nYou \
might have to turn off all but these Universe fonts (Mathematica gets the \
font names wrong if there are too many weights to choose from. Or, use \
in-line styles SR, SO, SB, SBO instead of FontWeight->Bold, etc.)\nUnivers LT \
Std\n55 Roman \n55 Oblique\n65 Bold\n65 Bold Oblique\n\nIn-house Mathematica \
code fonts\nWolframCodeSans-Bold.ttf\nWolframCodeSans-BoldItalic.ttf\n\
WolframCodeSans-Italic.ttf\nWolframCodeSans-Regular.ttf\n\
WolframCodeSansLight-Italic.ttf\nWolframCodeSansLight.ttf", "Text", 
          CellChangeTimes -> {{3.4161708457570543`*^9, 
            3.416170856412094*^9}, {3.417203442731956*^9, 
            3.417203442821724*^9}, {3.417367716063292*^9, 
            3.4173677161493483`*^9}, {3.417469196260745*^9, 
            3.417469196320807*^9}, {3.417799958639246*^9, 
            3.4177999598674173`*^9}, {3.418054119812543*^9, 
            3.418054119902001*^9}, {3.418399375087512*^9, 
            3.41839937518683*^9}, {3.418561694629093*^9, 
            3.418561696014886*^9}, {3.419692797708728*^9, 
            3.419692798633512*^9}, {3.419878869424415*^9, 
            3.419878869523601*^9}, {3.41995414812296*^9, 
            3.419954148193243*^9}, {3.422797540734949*^9, 
            3.422797606112104*^9}, {3.422892828249156*^9, 
            3.422892833478475*^9}, {3.42340156681188*^9, 
            3.4234015832738*^9}, {3.4235737200190153`*^9, 
            3.423573743131493*^9}, {3.4250634668687973`*^9, 
            3.425063481121505*^9}, {3.42530785207871*^9, 
            3.425307854606648*^9}, {3.425906769440299*^9, 
            3.4259067762336807`*^9}, {3.4428728490596313`*^9, 
            3.442872924177783*^9}, {3.442872959111434*^9, 
            3.442872986210593*^9}, {3.4464321835547037`*^9, 
            3.4464321875278063`*^9}, {3.448144534868702*^9, 
            3.448144662260363*^9}, {3.459519041330676*^9, 
            3.459519050958424*^9}, {3.459519084177849*^9, 
            3.459519136791443*^9}, {3.4595374827869377`*^9, 
            3.459537607034789*^9}, {3.459541222784503*^9, 
            3.459541232875114*^9}, {3.47731403562704*^9, 
            3.477314083320302*^9}, {3.4773143206815987`*^9, 
            3.477314321235009*^9}, {3.477314381695108*^9, 
            3.477314389702599*^9}, {3.494943762031045*^9, 
            3.494943777079742*^9}, 3.49494381321697*^9, {3.504545702505843*^9,
             3.504545777072167*^9}, {3.504631747355783*^9, 
            3.5046319687762547`*^9}, {3.5046320130027847`*^9, 
            3.504632136289061*^9}, {3.5046321757789087`*^9, 
            3.504632324106305*^9}, {3.5048940112336397`*^9, 
            3.5048940325550327`*^9}, {3.5074728802558823`*^9, 
            3.507472906493259*^9}, {3.507472943145176*^9, 
            3.507473056517303*^9}, {3.507473167989644*^9, 
            3.5074732256546392`*^9}, {3.507476932680332*^9, 
            3.507476967245008*^9}, {3.5074770078551702`*^9, 
            3.5074770381205482`*^9}, {3.5080867665899467`*^9, 
            3.508086833933967*^9}, {3.5100577225150557`*^9, 
            3.5100577889410543`*^9}, {3.510057866650365*^9, 
            3.510057873381969*^9}, {3.5100579543007603`*^9, 
            3.510057978493752*^9}, {3.5100581606834517`*^9, 
            3.510058171531967*^9}, {3.5100582884867992`*^9, 
            3.5100582993883047`*^9}, {3.510058348416402*^9, 
            3.51005835536084*^9}, {3.510586353995545*^9, 
            3.510586398946548*^9}, 3.510586556216723*^9, {
            3.520854780906577*^9, 3.520854806354618*^9}, {
            3.540904669138299*^9, 3.540904688754883*^9}, {
            3.541421117382297*^9, 3.541421119260947*^9}, {
            3.543233109116756*^9, 3.54323312862659*^9}, {3.560774032008048*^9,
             3.5607740490248537`*^9}, {3.560774497814337*^9, 
            3.5607745284224653`*^9}, {3.569081636159639*^9, 
            3.5690817089077387`*^9}, {3.569082985800988*^9, 
            3.56908299076019*^9}, {3.569930261073*^9, 3.569930318073472*^9}, {
            3.569933092514678*^9, 3.569933092682139*^9}, {
            3.5714938570722303`*^9, 3.571493894251113*^9}, {
            3.572621870184101*^9, 3.572621880760684*^9}, {
            3.5825466673068657`*^9, 3.582546697512918*^9}, {
            3.595089940175111*^9, 3.595089972710532*^9}, {
            3.595090201174129*^9, 3.59509020726987*^9}, {
            3.6058731419891233`*^9, 3.605873153714265*^9}, {
            3.605873653554213*^9, 3.6058736690200987`*^9}, {
            3.605873946728549*^9, 3.605873977913452*^9}, {
            3.605878743053453*^9, 3.6058787528818083`*^9}, {
            3.617558663775219*^9, 3.617558732622171*^9}, {
            3.617558806680579*^9, 3.617558816479286*^9}, {
            3.618064562231678*^9, 3.618064575529956*^9}, {3.61875594936665*^9,
             3.61875596171507*^9}, {3.619187195037849*^9, 
            3.6191872324214697`*^9}, {3.619267685492606*^9, 
            3.619267685784041*^9}, {3.619971763353887*^9, 
            3.619971801671096*^9}, 3.619977258480773*^9, {
            3.620042813121785*^9, 3.62004285745543*^9}, {3.620047248312114*^9,
             3.6200472557574673`*^9}, {3.6406282078390713`*^9, 
            3.640628234275696*^9}, {3.6464864082236347`*^9, 
            3.646486443140626*^9}, {3.646486501495767*^9, 
            3.6464865234679213`*^9}, {3.646487406137487*^9, 
            3.646487412773883*^9}, {3.646487761627777*^9, 
            3.646487765902814*^9}, {3.646496919715475*^9, 
            3.646496937858392*^9}, {3.646659132109173*^9, 
            3.646659158948269*^9}, {3.646664141321521*^9, 
            3.64666415212984*^9}, {3.646664200653885*^9, 
            3.646664230745297*^9}, {3.646664339492073*^9, 
            3.646664339690877*^9}, {3.646664384907028*^9, 
            3.6466644285551434`*^9}, {3.657293964997163*^9, 
            3.657293991590766*^9}, {3.657294038111755*^9, 
            3.65729406740875*^9}, {3.663595114444292*^9, 
            3.663595139302693*^9}, {3.6647277992875032`*^9, 
            3.664727799472268*^9}, {3.679930623227152*^9, 
            3.6799306445664587`*^9}, {3.690720804804504*^9, 
            3.690720809369213*^9}, {3.6907209774266367`*^9, 
            3.690720992903864*^9}, {3.6907214062033873`*^9, 
            3.6907214063015423`*^9}, 3.690721529133443*^9, {
            3.690721597241845*^9, 3.6907216099741983`*^9}, {
            3.690722969983446*^9, 3.6907229800615387`*^9}, {
            3.6909743211306143`*^9, 3.690974326832349*^9}, {
            3.692719597277337*^9, 3.6927196141495113`*^9}, {
            3.722089892807097*^9, 3.722089974755394*^9}, {
            3.7220904586041927`*^9, 3.722090513741994*^9}, {
            3.723918754156233*^9, 3.723918757934252*^9}, {
            3.728153473534182*^9, 3.728153475597283*^9}, {
            3.7289035105193567`*^9, 3.72890352538942*^9}, {
            3.728903572384264*^9, 3.7289035739901323`*^9}, {
            3.7289036405738792`*^9, 3.728903730204915*^9}, {
            3.728903791845521*^9, 3.7289037953159723`*^9}, {
            3.730119240998405*^9, 3.730119243020208*^9}, 
            3.7314158080779943`*^9, {3.731415839768364*^9, 
            3.731415851682106*^9}, {3.731415924731237*^9, 
            3.731415925900419*^9}, {3.731416575976941*^9, 
            3.731416624937258*^9}, {3.731417097357421*^9, 
            3.731417134864612*^9}, {3.731417739180434*^9, 
            3.731417743611244*^9}, {3.731854671421233*^9, 
            3.7318546734669027`*^9}, {3.7380770490307407`*^9, 
            3.7380770884722433`*^9}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Style Environment Names", "Section", CellFrame -> False, 
          CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          StyleData[All, "Working"], 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.115343, 0.350561, 0.362966]}, ShowCellLabel -> 
          True, CellFrameLabelMargins -> 6, ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          ShowCellBracket -> True, CellLabelAutoDelete -> False, 
          Magnification -> 1]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Notebook Options", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "The Notebook options set page size, headers, footers, and margins. \
", "Text", 
          CellChangeTimes -> {{3.5100541289606047`*^9, 3.51005413613568*^9}, {
            3.510054319626567*^9, 3.510054352321889*^9}, 
            3.510054590222127*^9, {3.510586642872411*^9, 
            3.510586644929735*^9}, {3.6058910165151157`*^9, 
            3.6058911459457283`*^9}, {3.722090778026519*^9, 
            3.722090786598135*^9}}], 
         Cell[
          StyleData["Notebook"], PageHeaders -> {{
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber", 
              CellMargins -> {{63, Inherited}, {Inherited, Inherited}}], None, 
             Cell[
              TextData[{"Author"}], "Header", 
              CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}, {
             Cell[
              TextData[{"Title"}], "Header", 
              CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}], None, 
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber", 
              CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}}, 
          PageFooters -> {{
             Cell[
              TextData[{
                StyleBox["Complex Systems", "TI"], 
                StyleBox[", ", "TR"], 
                StyleBox["Volume", "TB"], 
                " \[Copyright] year Complex Systems Publications, Inc."}], 
              "Footer", CellMargins -> {{63, 0}, {Inherited, Inherited}}], 
             None, None}, {None, None, 
             Cell[
              TextData[{
                StyleBox["Complex Systems", "TI"], 
                StyleBox[", ", "TR"], 
                StyleBox["Volume", "TB"], 
                " \[Copyright] year Complex Systems Publications, Inc."}], 
              "Footer", 
              CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}}, 
          PrintingOptions -> {
           "FacingPages" -> True, "FirstPageHeader" -> False, 
            "PageFooterMargins" -> {24, 24}, "PageHeaderMargins" -> {36, 36}, 
            "PageSize" -> {432, 648}, "PrintRegistrationMarks" -> False, 
            "PrintingMargins" -> {{0, 0}, {54, 54}}}, 
          InputAutoReplacements -> {ParentList, Complex Systems}, 
          HyphenationOptions -> {
           "HyphenationCharacter" -> "-", "HyphenationFreeZone" -> 12, 
            "HyphenationMinLengths" -> {3, 3}}, StyleMenuListing -> None]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "FormatType Styles", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "These options are applied along with the local cell style options \
when one of these FormatType names is used.", "Text", 
          CellMargins -> {{24, 0}, {Inherited, Inherited}}, 
          CellChangeTimes -> {
           3.605879951148684*^9, {3.605880082356262*^9, 
            3.605880204428632*^9}, {3.6058802609165688`*^9, 
            3.605880322688517*^9}, {3.6058909976403713`*^9, 
            3.605890998335188*^9}, {3.605891170155469*^9, 
            3.605891172788005*^9}, {3.60589126719827*^9, 
            3.605891275196086*^9}, {3.617559027068762*^9, 
            3.617559091147119*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellExpression"], CellMargins -> {{54, 24}, {2, 4}}, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Courier", Background -> 
             GrayLevel[1]], 
            Cell[
             StyleData["CellExpression", "Printout"], 
             CellMargins -> {{72, 72}, {2, 4}}, FontFamily -> 
             "WolframCodeSans", 
             PrivateFontOptions -> {"FontType" -> "Outline"}, Background -> 
             GrayLevel[1]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InputForm"], PageWidth -> WindowWidth, FontFamily -> 
             "Courier"], 
            Cell[
             StyleData["InputForm", "Printout"], FontFamily -> 
             "WolframCodeSans", 
             PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OutputForm"], FontFamily -> "Courier"], 
            Cell[
             StyleData["OutputForm", "Printout"], FontFamily -> 
             "WolframCodeSans", 
             PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["StandardForm"], FontFamily -> "Courier"], 
            Cell[
             StyleData["StandardForm", "Printout"], FontFamily -> 
             "WolframCodeSans", 
             PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
         Cell[
          StyleData["TraditionalForm"], 
          "TwoByteSyntaxCharacterAutoReplacement" -> True, 
          LineSpacing -> {1, 2, 1}, ScriptSizeMultipliers -> {0.75}, 
          ScriptBaselineShifts -> {0.6, Automatic}, ZeroWidthTimes -> True, 
          StyleMenuListing -> None], 
         Cell[
          StyleData["InlineCellEditing"], Background -> 
          RGBColor[1, 0.749996, 0.8]], 
         Cell[
         "These options are applied along with the inline cell style options \
when one of these FormatType names is used.", "Text", 
          CellMargins -> {{24, 0}, {Inherited, Inherited}}, 
          CellChangeTimes -> {
           3.605879951148684*^9, {3.605880082356262*^9, 
            3.605880204428632*^9}, {3.6058802609165688`*^9, 
            3.605880322688517*^9}, {3.6058909976403713`*^9, 
            3.605890998335188*^9}, {3.605891170155469*^9, 
            3.605891172788005*^9}, {3.60589126719827*^9, 
            3.605891275196086*^9}, {3.617559027068762*^9, 
            3.617559091147119*^9}, {3.617621597093697*^9, 
            3.617621597969692*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InlineFormula"], CellMargins -> {{10, 4}, {0, 8}}, 
             DefaultFormatType -> TraditionalForm, MenuSortingValue -> None, 
             FontSize -> Inherited 1.], 
            Cell[
             StyleData["InlineFormula", "Printout"], 
             CellMargins -> {{2, 0}, {6, 6}}, 
             PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Inline Formatting", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
            "These change font weight and slant options exclusive of the cell \
style. They do not change the font family.", "Subsection", 
             CellChangeTimes -> {{3.605880444806999*^9, 
              3.6058804886253157`*^9}, {3.605880602689467*^9, 
              3.605880615142479*^9}, {3.605891446692519*^9, 
              3.605891492758597*^9}, {3.619264154324706*^9, 
              3.619264169115786*^9}}], 
            Cell[
            "RM changes selection to FontWeight->Plain, FontSlant->Plain", 
             "Text", CellChangeTimes -> {{3.605880503216538*^9, 
              3.6058805050054417`*^9}}], 
            Cell[
             StyleData["RM"], FontWeight -> "Plain", FontSlant -> "Plain"], 
            Cell[
            "BF changes selection to FontWeight->Bold, FontSlant->Plain", 
             "Text", CellChangeTimes -> {{3.605880513094139*^9, 
              3.605880514725292*^9}}], 
            Cell[
             StyleData["BF"], FontWeight -> "Bold", FontSlant -> "Plain"], 
            Cell[
            "IT changes selection to FontWeight->Plain, FontSlant->Italic", 
             "Text", CellChangeTimes -> {{3.60588051943922*^9, 
              3.605880522229168*^9}}], 
            Cell[
             StyleData["IT"], FontWeight -> "Plain", FontSlant -> "Italic"], 
            Cell[
            "BFI changes selection to FontWeight->Bold, FontSlant->Italic", 
             "Text", CellChangeTimes -> {{3.605880531678957*^9, 
              3.6058805338161707`*^9}}], 
            Cell[
             StyleData["BFI"], FontWeight -> "Bold", FontSlant -> "Italic"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
            "These change font weight, slant, and family options exclusive of \
the cell style. They do change the font family.", "Subsection", 
             CellChangeTimes -> {{3.6058806438765306`*^9, 
               3.605880670188501*^9}, {3.605891526936132*^9, 
               3.6058915803389883`*^9}, 3.619264176003389*^9, {
               3.731416530289076*^9, 3.731416536543614*^9}}], 
            Cell[
            "TR changes selection to normal text font (FontFamily->\
\[CloseCurlyDoubleQuote]Times\[CloseCurlyDoubleQuote] for Working \
Environment; \[OpenCurlyDoubleQuote]Sabon\[CloseCurlyDoubleQuote] for \
Printout Environment), FontWeight->Plain, FontSlant->Plain", "Text", 
             CellChangeTimes -> {
              3.390651499491132*^9, {3.605880538204113*^9, 
               3.605880581505221*^9}, 3.605880697336543*^9, 
               3.605880767590741*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["TR"], FontFamily -> "Times", FontWeight -> "Plain",
                 FontSlant -> "Plain"], 
               Cell[
                StyleData["TR", "Printout"], FontFamily -> "Sabon LT Std", 
                FontWeight -> "Plain", FontSlant -> "Plain", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "TI used to change selection to normal text font, \
FontWeight->Plain, FontSlant->Italic", "Text"], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["TI"], FontFamily -> "Times", FontWeight -> "Plain",
                 FontSlant -> "Italic"], 
               Cell[
                StyleData["TI", "Printout"], FontFamily -> "Sabon LT Std", 
                FontWeight -> "Plain", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "TB used to change selection to normal text font, \
FontWeight->Bold, FontSlant->Plain", "Text", 
             CellChangeTimes -> {3.605880730432575*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["TB"], FontFamily -> "Times", FontWeight -> "Bold", 
                FontSlant -> "Plain"], 
               Cell[
                StyleData["TB", "Printout"], FontFamily -> "Sabon LT Std", 
                FontWeight -> "Bold", FontSlant -> "Plain", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "TBI used to change selection to normal text font, \
FontWeight->Bold, FontSlant->Italic", "Text", 
             CellChangeTimes -> {3.605880740455803*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["TBI"], FontFamily -> "Times", FontWeight -> "Bold",
                 FontSlant -> "Italic"], 
               Cell[
                StyleData["TBI", "Printout"], FontFamily -> "Sabon LT Std", 
                FontWeight -> "Bold", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "MR used to change selection to a monospace font (Courier for \
Working Environment; WolframCodeSans for Printout Environment) with \
FontWeight->Plain, FontSlant->Plain ", "Text", 
             CellChangeTimes -> {{3.6058807469246483`*^9, 
              3.605880789190707*^9}, {3.605891713044837*^9, 
              3.605891746939736*^9}}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["MR"], 
                HyphenationOptions -> {
                 "HyphenationCharacter" -> "\[Continuation]"}, 
                StyleMenuListing -> None, FontFamily -> "WolframCodeSans", 
                FontWeight -> "Plain", FontSlant -> "Plain"], 
               Cell[
                StyleData["MR", "Printout"], FontFamily -> "WolframCodeSans", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "MO used to change selection to monospace font with \
FontWeight->Plain, FontSlant->Oblique", "Text", 
             CellChangeTimes -> {3.605880798326315*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["MO"], 
                HyphenationOptions -> {
                 "HyphenationCharacter" -> "\[Continuation]"}, 
                StyleMenuListing -> None, FontFamily -> "Courier", FontWeight -> 
                "Plain", FontSlant -> "Oblique"], 
               Cell[
                StyleData["MO", "Printout"], FontFamily -> "WolframCodeSans", 
                FontWeight -> "Plain", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "MB used to change selection to monospace font with \
FontWeight->Bold, FontSlant->Plain", "Text", 
             CellChangeTimes -> {3.605880802477007*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["MB"], 
                HyphenationOptions -> {
                 "HyphenationCharacter" -> "\[Continuation]"}, 
                StyleMenuListing -> None, FontFamily -> "Courier", FontWeight -> 
                "Bold", FontSlant -> "Plain"], 
               Cell[
                StyleData["MB", "Printout"], FontFamily -> "WolframCodeSans", 
                FontWeight -> "Bold", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "MBO used to change selection to monospace font with \
FontWeight->Bold, FontSlant->Oblique", "Text", 
             CellChangeTimes -> {3.6058808246737623`*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["MBO"], 
                HyphenationOptions -> {
                 "HyphenationCharacter" -> "\[Continuation]"}, 
                StyleMenuListing -> None, FontFamily -> "Courier", FontWeight -> 
                "Bold", FontSlant -> "Oblique"], 
               Cell[
                StyleData["MBO", "Printout"], FontFamily -> "WolframCodeSans",
                 FontWeight -> "Bold", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "SR used to change selection to sans serif font (Helvetica for \
Working Environment; Univers 55 for Printout Environment)", "Text", 
             CellChangeTimes -> {
              3.605880843685134*^9, {3.605891878632017*^9, 
               3.6058918895890007`*^9}}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["SR"], FontFamily -> "Helvetica", FontWeight -> 
                "Plain", FontSlant -> "Plain"], 
               Cell[
                StyleData["SR", "Printout"], FontFamily -> "Univers LT Std", 
                FontWeight -> "Plain", FontSlant -> "Plain", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "SO used to change selection to oblique sans serif font ", 
             "Text"], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["SO"], FontFamily -> "Helvetica", FontWeight -> 
                "Plain", FontSlant -> "Oblique"], 
               Cell[
                StyleData["SO", "Printout"], FontFamily -> "Univers LT Std", 
                FontWeight -> "Plain", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "SB used to change selection to sans serif font bold", "Text"], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["SB"], FontFamily -> "Helvetica", FontWeight -> 
                "Bold", FontSlant -> "Plain"], 
               Cell[
                StyleData["SB", "Printout"], FontFamily -> "Univers LT Std", 
                FontWeight -> "Bold", FontSlant -> "Plain", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
            Cell[
            "SBO used to change selection to bold oblique sans serif font ", 
             "Text", CellChangeTimes -> {3.619972377838954*^9}], 
            Cell[
             CellGroupData[{
               Cell[
                StyleData["SBO"], FontFamily -> "Helvetica", FontWeight -> 
                "Bold", FontSlant -> "Oblique"], 
               Cell[
                StyleData["SBO", "Printout"], FontFamily -> "Univers LT Std", 
                FontWeight -> "Bold", FontSlant -> "Italic", 
                PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]]}, 
           Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Headings", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "Each notebook should contain a Title cell. Title resets all \
CounterBox values to zero (except Title).", "Text", 
          CellChangeTimes -> {3.6180605463872623`*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], ShowCellBracket -> True, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {0, 15}}, CellGroupingRules -> 
             None, PageBreakBelow -> False, LineSpacing -> {1, 2, 1}, 
             CounterIncrements -> "Title", 
             CounterAssignments -> {{"Subtitle", 0}, {"Section", 0}, {
               "Subsection", 0}, {"Subsubsection", 0}, {"List", 0}, {
               "SubList", 0}, {"NumberedFigure", 0}, {"NumberedTable", 0}, {
               "NumberedProgram", 0}, {"DisplayFormulaNumbered", 0}, {
               "DisplayFormulaNumberedSubletter", 0}, {"Text", 0}, {
               "SmallText", 0}, {"romanSubList", 0}, {"NumberedProgram", 0}, {
               "Reference", 0}}, CounterStyleMenuListing -> None, FontFamily -> 
             "Times", FontSize -> 36, FontWeight -> "Bold", FontSlant -> 
             "Plain", FontColor -> GrayLevel[0], Background -> None], 
            Cell[
             StyleData["Title", "Printout"], 
             CellMargins -> {{63, 63}, {22, 6}}, CellFrameMargins -> False, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             16, FontWeight -> "Bold", FontSlant -> "Plain"]}, Closed]], 
         Cell[
         "Subtitles are optional, follows Title, precedes Author.", "Text", 
          CellChangeTimes -> {3.428068050904207*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], ShowCellBracket -> True, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {5, 2}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, LineSpacing -> {1, 2, 1}, CounterIncrements -> "Subtitle",
              MenuSortingValue -> None, MenuCommandKey -> None, 
             StyleMenuListing -> None, CounterStyleMenuListing -> None, 
             FontFamily -> "Times", FontSize -> 24, FontWeight -> "Plain", 
             FontSlant -> "Italic", FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{63, 63}, {12, 2}}, FontFamily -> "Sabon LT Std",
              FontSize -> 12, FontWeight -> "Plain", FontSlant -> "Italic"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellFrame -> {{6, 0}, {2, 0}}, CellDingbat -> 
             None, CellMargins -> {{54, 12}, {16, 27}}, PageBreakAbove -> 
             Automatic, PageBreakBelow -> False, 
             CellFrameMargins -> {{40, 0}, {0, 0}}, CellFrameColor -> 
             GrayLevel[0], CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["Section"], "."}], CellBaseline -> Baseline], 
                Inherited}, {Inherited, Inherited}}, 
             CellFrameLabelMargins -> -38, TextAlignment -> Left, 
             AspectRatioFixed -> True, CounterStyleMenuListing -> Automatic, 
             FontFamily -> "Helvetica", FontSize -> 18, FontWeight -> "Bold", 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Section", "Printout"], 
             CellFrame -> {{3, 0}, {0.5, 0}}, 
             CellMargins -> {{72, 63}, {8, 30}}, 
             CellFrameMargins -> {{20, 0}, {-0.5, 0}}, 
             CellFrameLabelMargins -> -18, LineSpacing -> {1, 2, 1}, 
             FontFamily -> "Univers LT Std", FontSize -> 9, FontWeight -> 
             "Bold"]}, Closed]], 
         Cell[
         "SectionFirst to be used after Abstract. Section should be used for \
subsequent Section level headings. ", "Text", 
          CellChangeTimes -> {{3.429008481354124*^9, 3.429008495942648*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SectionFirst", StyleDefinitions -> StyleData["Section"]], 
             MenuSortingValue -> 1249], 
            Cell[
             StyleData[
             "SectionFirst", "Printout", StyleDefinitions -> 
              StyleData["Section", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SectionTwoDigit", StyleDefinitions -> StyleData["Section"]], 
             CellFrameMargins -> {{40, 0}, {0, 0}}, CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["Section"], "."}], CellBaseline -> Baseline], 
                Inherited}, {Inherited, Inherited}}, 
             CellFrameLabelMargins -> -38, TextAlignment -> Left], 
            Cell[
             StyleData[
             "SectionTwoDigit", "Printout", StyleDefinitions -> 
              StyleData["Section", "Printout"]], 
             CellFrameMargins -> {{21, 0}, {-0.5, 0}}, 
             CellFrameLabelMargins -> -21, MenuSortingValue -> None]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> None, 
             CellMargins -> {{54, 12}, {6, 23}}, PageBreakBelow -> False, 
             CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["Section"], ".", 
                   CounterBox["Subsection"]}], "SubsectionLabel", 
                 CellBaseline -> Baseline], Inherited}, {
               Inherited, Inherited}}, CellFrameLabelMargins -> 6, 
             TextAlignment -> Left, CounterIncrements -> {"Subsection"}, 
             CounterAssignments -> {{"Subsubsection", 0}}, 
             CounterStyleMenuListing -> Automatic, FontFamily -> "Helvetica", 
             FontSize -> 15, FontWeight -> "Bold", FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Subsection", "Printout"], 
             CellFrame -> {{3, 0}, {0, 0}}, 
             CellMargins -> {{74, 63}, {2, 16}}, 
             CellElementSpacings -> {"CellMinHeight" -> 8}, 
             CellFrameMargins -> {{26, 0}, {0, 0}}, 
             CellFrameLabelMargins -> -24, LineSpacing -> {1, 2, 1}, 
             FontFamily -> "Univers LT Std", FontSize -> 9, FontWeight -> 
             "Bold"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubsectionTwoDigit", StyleDefinitions -> 
              StyleData["Subsection"]], CellMargins -> {{54, 12}, {6, 23}}, 
             CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["Section"], ".", 
                   CounterBox["Subsection"]}], "SubsectionLabel", 
                 CellBaseline -> Baseline], Inherited}, {
               Inherited, Inherited}}, CellFrameLabelMargins -> 6, 
             TextAlignment -> Left, CounterIncrements -> {"Subsection"}, 
             CounterAssignments -> {{"Subsubsection", 0}}, MenuSortingValue -> 
             None], 
            Cell[
             StyleData[
             "SubsectionTwoDigit", "Printout", StyleDefinitions -> 
              StyleData["Subsection", "Printout"]], 
             CellFrameMargins -> {{29, 0}, {0, 0}}, 
             CellFrameLabelMargins -> -29]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellDingbat -> None, 
             CellMargins -> {{54, 12}, {6, 12}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             PageBreakBelow -> False, CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["Section"], ".", 
                   CounterBox["Subsection"], ".", 
                   CounterBox["Subsubsection"]}], "SubsubsectionLabel", 
                 CellBaseline -> Baseline], Inherited}, {
               Inherited, Inherited}}, TextAlignment -> Left, 
             CounterIncrements -> {"Subsubsection"}, 
             CounterAssignments -> {{"Subsubsubsection", 0}}, 
             MenuSortingValue -> 1300, CounterStyleMenuListing -> None, 
             FontFamily -> "Helvetica", FontSize -> 12, FontWeight -> "Bold", 
             FontSlant -> "Plain", FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Subsubsection", "Printout"], 
             CellMargins -> {{63, 63}, {2, 14}}, FontFamily -> 
             "Univers LT Std", FontSize -> 9, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
         "Section*Alt used for un-numbered headings such as References or \
Acknowledgments.", "Text", 
          CellChangeTimes -> {{3.4300443213071737`*^9, 
           3.4300443397696533`*^9}, {3.6176245915879183`*^9, 
           3.617624630037994*^9}, {3.61806130433228*^9, 
           3.618061322083971*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SectionFirstAlt", StyleDefinitions -> StyleData["Section"]], 
             CellFrameMargins -> {{18, 0}, {-1, 0}}, 
             CellFrameLabels -> {{None, None}, {None, None}}, 
             MenuSortingValue -> 2149], 
            Cell[
             StyleData[
             "SectionFirstAlt", "Printout", StyleDefinitions -> 
              StyleData["Section", "Printout"]], 
             CellMargins -> {{63, 63}, {8, 0}}, 
             CellFrameMargins -> {{6, 0}, {-0.5, 0}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SectionAlt", StyleDefinitions -> StyleData["Section"]], 
             CellFrameMargins -> {{18, 0}, {-1, 0}}, 
             CellFrameLabels -> {{None, None}, {None, None}}, 
             MenuSortingValue -> 2150], 
            Cell[
             StyleData[
             "SectionAlt", "Printout", StyleDefinitions -> 
              StyleData["Section", "Printout"]], 
             CellMargins -> {{63, 63}, {8, 30}}, 
             CellFrameMargins -> {{6, 0}, {-0.5, 0}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubsectionAlt", StyleDefinitions -> StyleData["Subsection"]], 
             CellFrameLabels -> {{None, None}, {None, None}}, 
             MenuSortingValue -> 2151], 
            Cell[
             StyleData[
             "SubsectionAlt", "Printout", StyleDefinitions -> 
              StyleData["Subsection", "Printout"]], 
             CellMargins -> {{63, 63}, {2, 16}}, 
             CellFrameMargins -> {{6, 0}, {0, 0}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubsubsectionAlt", StyleDefinitions -> 
              StyleData["Subsubsection"]], 
             CellFrameLabels -> {{None, None}, {None, None}}, 
             MenuSortingValue -> 2152], 
            Cell[
             StyleData[
             "SubsubsectionAlt", "Printout", StyleDefinitions -> 
              StyleData["Subsubsection", "Printout"]], 
             CellMargins -> {{63, 63}, {2, 14}}]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Text", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {3.4348189815135612`*^9}, FontColor -> 
          GrayLevel[1], Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{54, 24}, {4, 4}}, 
             ParagraphIndent -> 18, MenuSortingValue -> 1500, FontFamily -> 
             "Times", FontSize -> 14], 
            Cell[
             StyleData["Text", "Printout"], CellMargins -> {{63, 63}, {2, 0}},
              TextJustification -> 1, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 12, FontFamily -> 
             "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SmallText"], CellMargins -> {{54, 24}, {4, 4}}, 
             MenuSortingValue -> None, FontFamily -> "Times", FontSize -> 12, 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["SmallText", "Printout"], 
             CellMargins -> {{63, 63}, {2, 0}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Quote"], 
             CellMargins -> {{70, 40}, {Inherited, Inherited}}, 
             MenuSortingValue -> None, FontFamily -> "Times", FontSize -> 14], 
            Cell[
             StyleData["Quote", "Printout"], 
             CellMargins -> {{75, 75}, {6, 4}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Epigraph"], CellMargins -> {{92, 24}, {4, 4}}, 
             TextAlignment -> Left, MenuSortingValue -> None, FontFamily -> 
             "Times", FontSize -> 14, FontSlant -> "Italic"], 
            Cell[
             StyleData["Epigraph", "Printout"], 
             CellMargins -> {{96, 63}, {4, 2}}, TextAlignment -> Left, 
             TextJustification -> 1, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             10, FontSlant -> "Italic"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["EpigraphCredit"], CellMargins -> {{92, 24}, {4, 4}}, 
             TextAlignment -> Left, MenuSortingValue -> None, FontFamily -> 
             "Times", FontSize -> 14], 
            Cell[
             StyleData["EpigraphCredit", "Printout"], 
             CellMargins -> {{96, 63}, {4, 2}}, TextAlignment -> Left, 
             TextJustification -> 1, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             10]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Wolfram Mathematica Code, Input, Output, Graphics", 
          "Section", CellFrame -> False, CellDingbat -> None, ShowCellBracket -> 
          True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.434819666729039*^9, 3.434819683668754*^9}, {
            3.510587121485278*^9, 3.510587147133595*^9}, 3.619196129287812*^9,
             3.663597233499749*^9}, FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "The cells in this section define styles used for active kernel \
sessions. The front end associates special meanings with these style names.", 
          "Text", CellChangeTimes -> {{3.6180647649438553`*^9, 
           3.6180647807156363`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellFrame -> {{0, 0}, {0, 0}}, 
             CellMargins -> {{67, 24}, {8, 10}}, CellHorizontalScrolling -> 
             True, CellLabelMargins -> {{23, Inherited}, {
               Inherited, Inherited}}, CellFrameColor -> GrayLevel[0.869993], 
             LineSpacing -> {1.25, 0}, ShowStringCharacters -> True, 
             MenuSortingValue -> 1537, CounterStyleMenuListing -> Automatic, 
             FontFamily -> "WolframCodeSans", FontSize -> 12, FontWeight -> 
             "Bold", Background -> None], 
            Cell[
             StyleData["Input", "Printout"], CellFrame -> False, 
             CellMargins -> {{101, 63}, {2, 4}}, 
             PrivateEvaluationOptions -> {"OutputFormPageWidth" -> 342}, 
             CellFrameMargins -> False, FontFamily -> "WolframCodeSans", 
             FontSize -> 8, FontWeight -> "Bold", Background -> None]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], CellFrame -> {{0, 0}, {0, 0}}, 
             CellMargins -> {{76, 24}, {13, 0}}, CellHorizontalScrolling -> 
             True, CellLabelMargins -> {{23, Inherited}, {
               Inherited, Inherited}}, CellFrameColor -> GrayLevel[0.869993], 
             LineSpacing -> {1.25, 0}, MenuSortingValue -> None, FontFamily -> 
             "WolframCodeSans", FontSize -> 12, FontWeight -> "Plain", 
             Background -> None], 
            Cell[
             StyleData["Output", "Printout"], CellFrame -> False, 
             CellMargins -> {{101, 63}, {4, 4}}, 
             CellLabelMargins -> {{72, Inherited}, {Inherited, Inherited}}, 
             FontFamily -> "WolframCodeSans", FontSize -> 8, FontWeight -> 
             "Plain", Background -> None, 
             PanelBoxOptions -> {
              BaseStyle -> {
                ButtonBoxOptions -> {ImageSize -> {Automatic, 15}}}}]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InputOnly"], CellFrame -> {{0, 0}, {0, 0}}, 
             CellMargins -> {{76, 24}, {8, 10}}, CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             CellLabelMargins -> {{23, Inherited}, {Inherited, Inherited}}, 
             CellFrameColor -> GrayLevel[0.869993], LineSpacing -> {1.25, 0}, 
             ShowStringCharacters -> True, MenuSortingValue -> None, 
             FontFamily -> "WolframCodeSans", FontSize -> 12, FontWeight -> 
             "Bold", Background -> None], 
            Cell[
             StyleData["InputOnly", "Printout"], CellFrame -> False, 
             CellMargins -> {{101, 72}, {2, 4}}, 
             PrivateEvaluationOptions -> {"OutputFormPageWidth" -> 342}, 
             FontFamily -> "WolframCodeSans", FontSize -> 8, FontWeight -> 
             "Bold", Background -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Code"], CellMargins -> {{67, 24}, {8, 10}}, 
             InitializationCell -> True, AutoIndent -> False, 
             "TwoByteSyntaxCharacterAutoReplacement" -> True, 
             MenuSortingValue -> 1539, MenuCommandKey -> None, 
             CounterStyleMenuListing -> Automatic, FontFamily -> 
             "WolframCodeSans", FontSize -> 12, FontWeight -> "Bold", 
             Background -> None], 
            Cell[
             StyleData["Code", "Printout"], PageWidth -> PaperWidth, 
             CellMargins -> {{101, 63}, {2, 4}}, LineSpacing -> {1.25, 0}, 
             FontFamily -> "WolframCodeSans", FontSize -> 8, FontWeight -> 
             "Bold", Background -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], 
             CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
             FontFamily -> "Helvetica Neue", FontSize -> 9, FontWeight -> 
             "Plain", FontSlant -> "Plain", FontColor -> GrayLevel[0.5]], 
            Cell[
             StyleData["CellLabel", "Printout"], FontSize -> 7, FontColor -> 
             GrayLevel[0.5]]}, Closed]], 
         Cell[
         "Graphics, GraphicsFrame, Graphics3DAxes, set locally. Other \
graphics outuput options come from Default.nb. These styles also set options \
that are applied to Mathematica graphics output.", "Text", 
          CellChangeTimes -> {{3.690722098264744*^9, 3.690722112000464*^9}, {
            3.690722147912774*^9, 3.690722176509766*^9}, 
            3.722096068226717*^9, {3.722163434061584*^9, 
            3.7221634426432467`*^9}, {3.7221635704659443`*^9, 
            3.722163572119252*^9}, {3.722355321083251*^9, 
            3.7223553911835947`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], CellFrame -> {{0, 0}, {0, 0}}, 
             CellMargins -> {{67, 24}, {0, 0}}, CellHorizontalScrolling -> 
             True, PageBreakWithin -> Automatic, CellFrameColor -> 
             GrayLevel[0.869993], DefaultFormatType -> 
             DefaultOutputFormatType, FormatType -> TraditionalForm, 
             ImageMargins -> {{30, Inherited}, {Inherited, 0}}, 
             CounterStyleMenuListing -> None, FontFamily -> "Helvetica", 
             FontSize -> 10, 
             GraphicsBoxOptions -> {
              BaseStyle -> {FormatType -> TraditionalForm}, 
               ImageSize -> {300, Automatic}}], 
            Cell[
             StyleData["Graphics", "Printout"], CellFrame -> False, 
             CellMargins -> {{96, 72}, {8, 10}}, CellFrameMargins -> False, 
             ImageSize -> 310, EdgeThickness -> Absolute[0.5], Thickness -> 
             Absolute[0.5], FontFamily -> "Univers LT Std", FontSize -> 8, 
             Background -> None, 
             GraphicsBoxOptions -> {ImageSize -> {300, Automatic}}]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Graphics3D", StyleDefinitions -> StyleData["Graphics"]], 
             EdgeThickness -> Absolute[0.5], PointSize -> Absolute[3], 
             Thickness -> Absolute[0.5]], 
            Cell[
             StyleData["Graphics3D", "Printout"], 
             ImageMargins -> {{30, Inherited}, {Inherited, 0}}, EdgeThickness -> 
             Absolute[0.5], PointSize -> Absolute[3], Thickness -> 
             Absolute[0.5]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GraphicsFrame"], LineColor -> GrayLevel[0], Thickness -> 
             Absolute[1], Magnification -> 1], 
            Cell[
             StyleData["GraphicsFrame", "Printout"], LineColor -> 
             GrayLevel[0], Thickness -> Absolute[0.33], Magnification -> 1]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics3DAxes"], LineColor -> GrayLevel[0.4], 
             Thickness -> Absolute[0.5]], 
            Cell[
             StyleData["Graphics3DAxes", "Printout"], LineColor -> 
             GrayLevel[0], Thickness -> Absolute[0.5]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Displayed Formulas", "Section", CellFrame -> False, 
          CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.4348035389014807`*^9, 3.434803545632875*^9}},
           FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DisplayFormula"], CellMargins -> {{90, 24}, {6, 6}}, 
             CellHorizontalScrolling -> True, PageBreakAbove -> False, 
             DefaultFormatType -> TraditionalForm, TextAlignment -> Left, 
             LineSpacing -> {1, 2, 1}, ScriptLevel -> 0, SpanMaxSize -> 
             Infinity, MenuSortingValue -> 1510, MenuCommandKey -> "8", 
             FormatTypeAutoConvert -> False, FontFamily -> "Times", FontSize -> 
             14, FontColor -> GrayLevel[0], 
             UnderoverscriptBoxOptions -> {LimitsPositioning -> True}, 
             GridBoxOptions -> {AllowScriptLevelChange -> False}], 
            Cell[
             StyleData["DisplayFormula", "Printout"], 
             CellMargins -> {{87, 63}, {6, 4}}, 
             PrivateEvaluationOptions -> {"OutputFormPageWidth" -> 342}, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ChemicalFormula"], CellMargins -> {{67, 24}, {6, 6}}, 
             PageBreakAbove -> False, DefaultFormatType -> 
             DefaultInputFormatType, LineSpacing -> {1, 2, 1}, AutoSpacing -> 
             False, ScriptBaselineShifts -> {0.6, Automatic}, ScriptLevel -> 
             1, SingleLetterItalics -> False, ZeroWidthTimes -> False, 
             SpanMaxSize -> Infinity, FontFamily -> "Times", FontSize -> 14], 
            Cell[
             StyleData["ChemicalFormula", "Printout"], 
             CellMargins -> {{87, 63}, {6, 4}}, LineSpacing -> {1, 2, 1}, 
             FontFamily -> "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
         "DisplayFormulaNumbered is for DisplayFormula cells that number \
sequentially throughout a notebook.", "Text", 
          CellChangeTimes -> {{3.428068751314455*^9, 3.428068755055952*^9}, {
           3.434799871178565*^9, 3.4347999123751087`*^9}, {
           3.617625891363956*^9, 3.617625906312582*^9}, {
           3.6192677809954576`*^9, 3.619267794739996*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaNumbered", StyleDefinitions -> 
              StyleData["DisplayFormula"]], CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(", 
                   CounterBox["DisplayFormulaNumbered"], ")"}], 
                 CellSize -> {30, Inherited}, TextAlignment -> Right]}, {
               None, None}}, CounterIncrements -> "DisplayFormulaNumbered", 
             CounterAssignments -> {{"DisplayFormulaNumberedSubletter", 0}}, 
             MenuSortingValue -> 1520, MenuCommandKey -> "9", 
             CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData[
             "DisplayFormulaNumbered", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormula", "Printout"]], 
             CellMargins -> {{87, 63}, {6, 4}}, FontFamily -> "Sabon LT Std", 
             FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaNumberedSubletter", StyleDefinitions -> 
              StyleData["DisplayFormula"]], CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(", 
                   CounterBox[
                   "DisplayFormulaNumbered", CounterFunction -> Identity], 
                   CounterBox[
                   "DisplayFormulaNumberedSubletter", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], ")"}], 
                 CellSize -> {30, Inherited}, TextAlignment -> Right]}, {
               None, None}}, CounterIncrements -> 
             "DisplayFormulaNumberedSubletter", MenuSortingValue -> 1530, 
             CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData["DisplayFormulaNumberedSubletter", "Printout"], 
             CellMargins -> {{87, 63}, {6, 0}}, FontFamily -> "Sabon LT Std", 
             FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "NumberedEquation", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], MenuSortingValue -> None], 
            Cell[
             StyleData[
             "NumberedEquation", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "EquationNumbered", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], MenuSortingValue -> None], 
            Cell[
             StyleData[
             "EquationNumbered", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "EquationGroupNumbered", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], MenuSortingValue -> None], 
            Cell[
             StyleData[
             "EquationGroupNumbered", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "EquationGroupAlignedNumbered", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], MenuSortingValue -> None], 
            Cell[
             StyleData[
             "EquationGroupAlignedNumbered", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]]]}, Closed]], 
         Cell[
         "DisplayFormulaInList is for DisplayFormula cells that are part of a \
list sequence. If the DisplayFormulaInList ends the list sequence, then use \
EndElement for extra space.", "Text", 
          CellChangeTimes -> {{3.428068751314455*^9, 3.428068755055952*^9}, {
           3.434799871178565*^9, 3.4347999123751087`*^9}, {
           3.560774409904915*^9, 3.5607744753560762`*^9}, {
           3.618062661955841*^9, 3.618062673225712*^9}, {3.619267805506024*^9,
            3.619267806608605*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaInList", StyleDefinitions -> 
              StyleData["DisplayFormula"]], CellMargins -> {{67, 24}, {6, 0}},
              MenuSortingValue -> 1512], 
            Cell[
             StyleData[
             "DisplayFormulaInList", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormula", "Printout"]], 
             CellMargins -> {{87, 63}, {4, 2}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaNumberedInList", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], 
             CellMargins -> {{67, 24}, {6, 0}}], 
            Cell[
             StyleData[
             "DisplayFormulaNumberedInList", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]], 
             CellMargins -> {{87, 63}, {4, 2}}]}, Closed]], 
         Cell[
         "DisplayFormula(Numbered)Left is for DisplayFormula cells that align \
left on text with no additional left indent.", "Text", 
          CellChangeTimes -> {{3.428068751314455*^9, 3.428068755055952*^9}, {
           3.434799871178565*^9, 3.4347999123751087`*^9}, {
           3.560774409904915*^9, 3.5607744753560762`*^9}, {
           3.618062661955841*^9, 3.618062673225712*^9}, {3.619267805506024*^9,
            3.619267806608605*^9}, {3.679930752050767*^9, 
           3.679930790828321*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaLeft", StyleDefinitions -> 
              StyleData["DisplayFormula"]], CellMargins -> {{54, 24}, {6, 6}},
              MenuSortingValue -> 1511], 
            Cell[
             StyleData[
             "DisplayFormulaLeft", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormula", "Printout"]], 
             CellMargins -> {{63, 63}, {6, 4}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DisplayFormulaNumberedLeft", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], 
             CellMargins -> {{54, 24}, {6, 6}}, MenuSortingValue -> 1520], 
            Cell[
             StyleData[
             "DisplayFormulaNumberedLeft", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]], 
             CellMargins -> {{63, 63}, {6, 4}}]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Lists", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.434803573927889*^9, 3.434803575442408*^9}, 
            3.4348194467826977`*^9}, FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "Use modifier style EndElement for extra space after last list \
item.", "Text", 
          CellChangeTimes -> {{3.429009135956418*^9, 3.429009137043396*^9}, {
            3.429009561063004*^9, 3.429009567430564*^9}, {
            3.429009625338066*^9, 3.429009673532401*^9}, 
            3.4290128779507303`*^9, {3.42902696616998*^9, 
            3.429027003082099*^9}, {3.429534940003601*^9, 
            3.429534963871669*^9}, {3.5105872367539043`*^9, 
            3.510587263695863*^9}, {3.6176290649324713`*^9, 
            3.6176290676858997`*^9}, 3.619264354212122*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BulletedList"], CellDingbat -> "\[FilledSmallSquare]",
              CellMargins -> {{105, 24}, {Inherited, Inherited}}, 
             CellGroupingRules -> {"GraphicsGrouping", 1}, 
             LineSpacing -> {1, 2, 1}, CounterAssignments -> {{"SubList", 0}},
              MenuSortingValue -> 1630, FontFamily -> "Times", FontSize -> 
             14], 
            Cell[
             StyleData["BulletedList", "Printout"], 
             CellMargins -> {{87, 63}, {0, 6}}, TextJustification -> 1, 
             Hyphenation -> True, FontFamily -> "Sabon LT Std", FontSize -> 
             9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubListBulleted", StyleDefinitions -> 
              StyleData["BulletedList"]], 
             CellMargins -> {{120, 10}, {Inherited, Inherited}}, 
             CellGroupingRules -> {"GraphicsGrouping", 2}, MenuSortingValue -> 
             1631], 
            Cell[
             StyleData[
             "SubListBulleted", "Printout", StyleDefinitions -> 
              StyleData["BulletedList", "Printout"]], 
             CellMargins -> {{100, 63}, {0, 6}}]}, Closed]], 
         Cell[
         "Brought in for compatibility, disabled menu appearance (Item \
matches BulletedList, Subitem matches SubListBulleted)", "Text", 
          CellChangeTimes -> {{3.394378613468091*^9, 3.394378650134136*^9}, {
           3.394379042604026*^9, 3.39437905673245*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Item", StyleDefinitions -> StyleData["BulletedList"]],
              MenuSortingValue -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "Item", "Printout", StyleDefinitions -> 
              StyleData["BulletedList", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Item1", StyleDefinitions -> StyleData["BulletedList"]], 
             MenuSortingValue -> None, CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData[
             "Item1", "Printout", StyleDefinitions -> 
              StyleData["BulletedList", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Subitem", StyleDefinitions -> StyleData["SubListBulleted"]], 
             MenuSortingValue -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "Subitem", "Printout", StyleDefinitions -> 
              StyleData["SubListBulleted", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Item2", StyleDefinitions -> StyleData["SubListBulleted"]], 
             MenuSortingValue -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "Item2", "Printout", StyleDefinitions -> 
              StyleData["SubListBulleted", "Printout"]]]}, Closed]], 
         Cell[
         "BeginNumberedList used to start a new numbered list sequence.", 
          "Text", 
          CellChangeTimes -> {{3.510587297929563*^9, 
           3.5105873069858837`*^9}, {3.617629131327347*^9, 
           3.617629142441625*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "BeginNumberedList", StyleDefinitions -> 
              StyleData["NumberedList"]], 
             CellMargins -> {{78, 24}, {Inherited, Inherited}}, 
             CounterAssignments -> {{"List", 0}, {"SubList", 0}, {
               "romanSubList", 0}}, MenuSortingValue -> 1640], 
            Cell[
             StyleData[
             "BeginNumberedList", "Printout", StyleDefinitions -> 
              StyleData["NumberedList", "Printout"]], 
             CellMargins -> {{63, 63}, {0, 4}}]}, Closed]], 
         Cell[
         "NumberedList to be used for subsequent items in a numbered list \
sequence. ", "Text", CellChangeTimes -> {3.5105872823727703`*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedList"], 
             CellMargins -> {{78, 24}, {Inherited, Inherited}}, 
             CellGroupingRules -> {"GraphicsGrouping", 1}, 
             CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["List"], "."}], CellSize -> {24, Inherited}, 
                 TextAlignment -> Right, CellBaseline -> Baseline], 
                Inherited}, {Inherited, Inherited}}, CellBaseline -> Baseline,
              LineSpacing -> {1, 2, 1}, CounterIncrements -> "List", 
             CounterAssignments -> {{"SubList", 0}, {"romanSubList", 0}}, 
             MenuSortingValue -> 1641, FontFamily -> "Times", FontSize -> 14], 
            Cell[
             StyleData["NumberedList", "Printout"], 
             CellMargins -> {{63, 63}, {0, 6}}, CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["List"], "."}], CellSize -> {18, Inherited}, 
                 TextAlignment -> Right, CellBaseline -> Baseline], 
                Inherited}, {Inherited, Inherited}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ItemNumbered", StyleDefinitions -> StyleData["NumberedList"]], 
             MenuSortingValue -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "ItemNumbered", "Printout", StyleDefinitions -> 
              StyleData["NumberedList", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NolabelList"], 
             CellMargins -> {{107, 10}, {Inherited, Inherited}}, 
             CellGroupingRules -> {"GraphicsGrouping", 1}, 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, MenuSortingValue -> 
             1643, CounterStyleMenuListing -> None, FontFamily -> "Times", 
             FontSize -> 14], 
            Cell[
             StyleData["NolabelList", "Printout"], 
             CellMargins -> {{88, 63}, {0, 6}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubList"], 
             CellMargins -> {{105, 10}, {Inherited, Inherited}}, 
             CellGroupingRules -> {"GraphicsGrouping", 2}, 
             CellFrameLabels -> {{
                Cell[
                 TextData[{"(", 
                   CounterBox["SubList", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], ")"}], CellBaseline -> 
                 Baseline], Inherited}, {Inherited, Inherited}}, CellBaseline -> 
             Baseline, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, 
             CounterIncrements -> "SubList", MenuSortingValue -> 1642, 
             CounterStyleMenuListing -> None, FontFamily -> "Times", FontSize -> 
             14], 
            Cell[
             StyleData["SubList", "Printout"], 
             CellMargins -> {{88, 63}, {0, 6}}, CellFrameLabels -> {{
                Cell[
                 TextData[{"(", 
                   CounterBox["SubList", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], ")"}], CellBaseline -> 
                 Baseline, CellSize -> {12, Inherited}, TextAlignment -> 
                 Left], Inherited}, {Inherited, Inherited}}, 
             CellFrameLabelMargins -> {{0, 0}, {0, 0}}, TextJustification -> 
             1., LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", 
             FontSize -> 9]}, Closed]], 
         Cell[
         "Brought in for compatibility, disabled menu appearance \
(SubitemNumbered matches SubList)", "Text", 
          CellChangeTimes -> {{3.394378613468091*^9, 3.394378650134136*^9}, {
           3.394379042604026*^9, 3.39437905673245*^9}, {3.618054650520288*^9, 
           3.6180546834923677`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubitemNumbered", StyleDefinitions -> StyleData["SubList"]], 
             MenuSortingValue -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "SubitemNumbered", "Printout", StyleDefinitions -> 
              StyleData["SubList", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "romanSubList", StyleDefinitions -> StyleData["SubList"]], 
             CellFrameLabels -> {{
                Cell[
                 TextData[{
                   StyleBox[
                    CounterBox[
                    "romanSubList", CounterFunction :> RomanNumeral], 
                    FontSlant -> "Italic"], "."}], TextAlignment -> "Left", 
                 CellBaseline -> Baseline, CellSize -> {24, Inherited}], 
                Inherited}, {Inherited, Inherited}}, CounterIncrements -> 
             "romanSubList", MenuSortingValue -> None, 
             CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "romanSubList", "Printout", StyleDefinitions -> 
              StyleData["SubList", "Printout"]], CellFrameLabels -> {{
                Cell[
                 TextData[{
                   StyleBox[
                    CounterBox[
                    "romanSubList", CounterFunction :> RomanNumeral], 
                    FontSlant -> "Italic"], "."}], CellBaseline -> Baseline, 
                 TextAlignment -> "Left", CellSize -> {18, Inherited}], 
                Inherited}, {Inherited, Inherited}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "BeginLetteredList", StyleDefinitions -> 
              StyleData["LetteredList"]], 
             CounterAssignments -> {{"List", 0}, {"SubList", 0}, {
               "romanSubList", 0}}, MenuSortingValue -> None], 
            Cell[
             StyleData[
             "BeginLetteredList", "Printout", StyleDefinitions -> 
              StyleData["LetteredList", "Printout"]], 
             CounterAssignments -> {{"List", 0}, {"SubList", 0}, {
               "romanSubList", 0}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "LetteredList", StyleDefinitions -> StyleData["NumberedList"]], 
             CellMargins -> {{81, 24}, {Inherited, Inherited}}, 
             CellFrameLabels -> {{
                Cell[
                 TextData[{"(", 
                   CounterBox["List", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], ")"}], CellBaseline -> 
                 Baseline, TextAlignment -> "Right"], Inherited}, {
               Inherited, Inherited}}, MenuSortingValue -> None, 
             CounterStyleMenuListing -> None], 
            Cell[
             StyleData[
             "LetteredList", "Printout", StyleDefinitions -> 
              StyleData["NumberedList", "Printout"]], CellFrameLabels -> {{
                Cell[
                 TextData[{"(", 
                   CounterBox["List", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], ")"}], CellBaseline -> 
                 Baseline, TextAlignment -> "Right", 
                 CellSize -> {18, Inherited}], Inherited}, {
               Inherited, Inherited}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Reference"], CellDingbat -> Cell[
               TextData[{"[", 
                 CounterBox["Reference"], "]"}], CellSize -> {40, Inherited}, 
               TextAlignment -> Right], 
             CellMargins -> {{100, 25}, {Inherited, Inherited}}, 
             CellGroupingRules -> "NormalGrouping", 
             CellFrameLabels -> {{None, None}, {None, None}}, 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, 
             CounterIncrements -> "Reference", MenuSortingValue -> 1560, 
             MenuCommandKey -> "3", CounterStyleMenuListing -> Automatic, 
             FontFamily -> "Times", FontSize -> 14], 
            Cell[
             StyleData["Reference", "Printout"], CellDingbat -> Cell[
               TextData[{"[", 
                 CounterBox["Reference"], "]"}], CellSize -> {30, Inherited}, 
               TextAlignment -> Right], CellMargins -> {{84, 63}, {2, 4}}, 
             AutoIndent -> False, TextAlignment -> -1, TextJustification -> 1,
              Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Paper Opening and Page Header/Footer", "Section", 
          CellFrame -> False, CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.6176295119716463`*^9, 
           3.617629516288972*^9}, {3.617629557633338*^9, 
           3.617629561120429*^9}, {3.617635247676792*^9, 
           3.617635274022593*^9}}, FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Header", StyleDefinitions -> None], 
             CellMargins -> {{0, 0}, {4, 1}}, StyleMenuListing -> None, 
             FontFamily -> "Times", FontSize -> 10, FontWeight -> "Plain", 
             FontSlant -> "Italic"], 
            Cell[
             StyleData["Header", "Printout", StyleDefinitions -> None], 
             CellMargins -> {{63, 63}, {0, 0}}, FontFamily -> "Sabon LT Std", 
             FontSize -> 8, FontSlant -> "Italic"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PageNumber"], CellMargins -> {{0, 0}, {4, 1}}, 
             StyleMenuListing -> None, FontFamily -> "Helvetica", FontSize -> 
             9, FontWeight -> "Bold"], 
            Cell[
             StyleData["PageNumber", "Printout"], 
             CellMargins -> {{63, 63}, {0, 0}}, FontFamily -> 
             "Univers LT Std", FontSize -> 8, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Footer", StyleDefinitions -> None], 
             CellMargins -> {{0, 0}, {0, 4}}, StyleMenuListing -> None, 
             FontFamily -> "Times", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain"], 
            Cell[
             StyleData["Footer", "Printout", StyleDefinitions -> None], 
             CellMargins -> {{63, 63}, {0, 0}}, FontFamily -> "Sabon LT Std", 
             FontSize -> 7, FontWeight -> "Plain", FontSlant -> "Plain"]}, 
           Closed]], 
         Cell[
         "Author follows Title, precedes Institution. If more than one author \
is listed with the same affiliation use Authors.", "Text", 
          CellChangeTimes -> {
           3.428068050904207*^9, {3.605873208942021*^9, 
            3.605873283044264*^9}, {3.605873473630831*^9, 
            3.605873488220956*^9}, 3.6192678499230824`*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Author"], ShowCellBracket -> True, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {0, 6}}, CellGroupingRules -> 
             "NormalGrouping", PageBreakBelow -> False, 
             LineSpacing -> {1, 2, 1}, ParagraphSpacing -> {0, 0}, 
             MenuSortingValue -> 1155, FontFamily -> "Helvetica", FontSize -> 
             14, FontWeight -> "Bold", FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Author", "Printout"], 
             CellMargins -> {{63, 63}, {-4, 6}}, FontFamily -> 
             "Univers LT Std", FontSize -> 8, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
         "Authors follows Title, precedes Institution. Use when more than one \
author is listed with the same affiliation. ", "Text", 
          CellChangeTimes -> {{3.605873303992716*^9, 3.605873337876401*^9}, 
            3.605873471732729*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Authors"], ShowCellBracket -> True, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {0, 6}}, CellGroupingRules -> 
             "NormalGrouping", PageBreakBelow -> False, 
             LineSpacing -> {1, 2, 1}, ParagraphSpacing -> {0, 0}, 
             MenuSortingValue -> 1156, FontFamily -> "Helvetica", FontSize -> 
             14, FontWeight -> "Bold", FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Authors", "Printout"], 
             CellMargins -> {{63, 63}, {2, 6}}, FontFamily -> 
             "Univers LT Std", FontSize -> 8, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Institution"], ShowCellBracket -> True, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {4, 6}}, CellGroupingRules -> 
             "NormalGrouping", PageBreakBelow -> False, 
             LineSpacing -> {1, 2, 1}, ParagraphSpacing -> {0, 0}, 
             MenuSortingValue -> 1157, FontFamily -> "Times", FontSize -> 14, 
             FontWeight -> "Plain", FontSlant -> "Italic", FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["Institution", "Printout"], 
             CellMargins -> {{63, 63}, {2, 2}}, FontFamily -> "Sabon LT Std", 
             FontSize -> 9, FontSlant -> "Italic"]}, Closed]], 
         Cell[
         "Abstract is a required element to be used after the Institution \
cell. Should contain a short summary of the article as a single paragraph.", 
          "Text", CellChangeTimes -> {{3.429010394094336*^9, 
            3.42901039738969*^9}, {3.4290104600403357`*^9, 
            3.429010484769202*^9}, 3.6192678653473883`*^9, 
            3.731416333959797*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Abstract"], CellFrame -> {{0, 0}, {1, 1}}, 
             ShowCellBracket -> True, ShowSelection -> True, 
             CellMargins -> {{54, 86}, {4, 25}}, 
             CellFrameMargins -> {{0, 0}, {6, 8}}, LineSpacing -> {1, 2, 1}, 
             MenuSortingValue -> 1166, FontFamily -> "Times", FontSize -> 14, 
             FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["Abstract", "Printout"], 
             CellFrame -> {{0, 0}, {0.5, 0.5}}, 
             CellMargins -> {{87, 63}, {0, 6}}, 
             CellFrameMargins -> {{0, 0}, {4, 6}}, TextJustification -> 1, 
             Hyphenation -> True, FontFamily -> "Sabon LT Std", FontSize -> 9,
              FontWeight -> "Plain"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "BeginAbstract", StyleDefinitions -> StyleData["Abstract"]], 
             CellFrame -> {{0, 0}, {0, 1}}, CellMargins -> {{54, 86}, {2, 6}},
              CellGroupingRules -> {"GraphicsGrouping", 5}, MenuSortingValue -> 
             1167], 
            Cell[
             StyleData[
             "BeginAbstract", "Printout", StyleDefinitions -> 
              StyleData["Abstract", "Printout"]], 
             CellFrame -> {{0, 0}, {0, 0.5}}, 
             CellMargins -> {{87, 63}, {2, 6}}, 
             CellFrameMargins -> {{0, 0}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AbstractContinuation", StyleDefinitions -> 
              StyleData["Abstract"]], CellFrame -> {{0, 0}, {0, 0}}, 
             CellMargins -> {{54, 86}, {2, 6}}, 
             CellGroupingRules -> {"GraphicsGrouping", 6}, MenuSortingValue -> 
             1168], 
            Cell[
             StyleData[
             "AbstractContinuation", "Printout", StyleDefinitions -> 
              StyleData["Abstract", "Printout"]], 
             CellFrame -> {{0, 0}, {0, 0}}, CellMargins -> {{87, 63}, {2, 0}},
              CellFrameMargins -> {{0, 0}, {0, 0}}, ParagraphIndent -> 12]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "EndAbstract", StyleDefinitions -> StyleData["Abstract"]], 
             CellFrame -> {{0, 0}, {1, 0}}, CellMargins -> {{54, 86}, {2, 6}},
              CellGroupingRules -> {"GraphicsGrouping", 6}, MenuSortingValue -> 
             1169], 
            Cell[
             StyleData[
             "EndAbstract", "Printout", StyleDefinitions -> 
              StyleData["Abstract", "Printout"]], 
             CellFrame -> {{0, 0}, {0.5, 0}}, 
             CellMargins -> {{87, 63}, {0, 0}}, 
             CellFrameMargins -> {{0, 0}, {4, 0}}, ParagraphIndent -> 12]}, 
           Closed]], 
         Cell[
         "Keywords is a required element to be used after the Abstrct cell. \
Should contain a short summary of the article as a single paragraph. The \
Keywords cell is followed by SectionFirst.", "Text", 
          CellChangeTimes -> {{3.429010394094336*^9, 3.42901039738969*^9}, {
            3.4290104600403357`*^9, 3.429010484769202*^9}, 
            3.6192678653473883`*^9, {3.731416322845416*^9, 
            3.7314163554252768`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Keywords"], 
             CellGroupingRules -> {"SectionGrouping", 30}, TextAlignment -> 
             Left, CounterStyleMenuListing -> None, FontFamily -> "Times", 
             FontSize -> 11, FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Keywords", "Working"], 
             CellMargins -> {{54, 86}, {32, 6}}, FontFamily -> "Times", 
             FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain"], 
            Cell[
             StyleData["Keywords", "Printout"], 
             CellMargins -> {{87, 63}, {30, 6}}, FontFamily -> "Sabon LT Std",
              FontSize -> 9, FontWeight -> "Plain", FontSlant -> "Plain", 
             PrivateFontOptions -> {"FontType" -> "Outline"}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["EditorialComment"], CellFrame -> False, CellDingbat -> 
             "\[FilledCircle]", 
             CellMargins -> {{36, 25}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 2, 1}, MenuSortingValue -> 1550, 
             MenuCommandKey -> "2", FontColor -> RGBColor[1, 0, 0], 
             Background -> GrayLevel[1]], 
            Cell[
             StyleData["EditorialComment", "Printout"], 
             CellMargins -> {{24, 63}, {Inherited, 0}}, FontFamily -> 
             "Sabon LT Std", FontSize -> 10]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Styles for Theorem and Other Elements", "Section", CellFrame -> 
          False, CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.617641589708102*^9, 3.6176416187428837`*^9}},
           FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "TheoremLike is base style definition for the variants, \
CounterIncrements and MenuSortingValue set separately.", "Text", 
          CellChangeTimes -> {{3.722178433584996*^9, 3.722178453372661*^9}, {
           3.722178521234597*^9, 3.72217854134778*^9}, {3.722180903351144*^9, 
           3.722180912495694*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TheoremLike"], CellMargins -> {{67, 24}, {8, 10}}, 
             CellGroupingRules -> {"GraphicsGrouping", 6}, TextJustification -> 
             0, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, FontSize -> 
             14, FontSlant -> "Plain"], 
            Cell[
             StyleData["TheoremLike", "Printout"], 
             CellMargins -> {{63, 63}, {2, 4}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 
             0, FontFamily -> "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Theorem", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Theorem", MenuSortingValue -> 1871], 
            Cell[
             StyleData[
             "Theorem", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TheoremLabel"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 12, FontWeight -> "Bold", FontSlant -> 
             "Plain"], 
            Cell[
             StyleData["TheoremLabel", "Printout"], FontFamily -> 
             "Univers LT Std", FontSize -> 8, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TheoremContinuation", StyleDefinitions -> 
              StyleData["TheoremLike"]], CellMargins -> {{67, 24}, {4, 4}}, 
             MenuSortingValue -> 1872], 
            Cell[
             StyleData[
             "TheoremContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]], 
             CellMargins -> {{63, 63}, {2, 0}}, ParagraphIndent -> 12]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Example", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Example", MenuSortingValue -> 1895], 
            Cell[
             StyleData[
             "Example", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ExampleLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "ExampleLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ExampleContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], MenuSortingValue -> 1896], 
            Cell[
             StyleData[
             "ExampleContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Proof"], CellMargins -> {{67, 24}, {6, 8}}, 
             CellGroupingRules -> {"GraphicsGrouping", 6}, TextJustification -> 
             0, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, 
             MenuSortingValue -> 1875, FontSize -> 14, FontSlant -> "Plain"], 
            Cell[
             StyleData["Proof", "Printout"], 
             CellMargins -> {{63, 63}, {2, 4}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 
             0, FontFamily -> "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ProofLabel"], StyleMenuListing -> None, FontSize -> 
             14, FontWeight -> "Plain", FontSlant -> "Italic"], 
            Cell[
             StyleData["ProofLabel", "Printout"], FontFamily -> 
             "Sabon LT Std", FontSize -> 10, FontWeight -> "Plain", FontSlant -> 
             "Italic"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ProofContinuation"], 
             CellMargins -> {{67, 24}, {4, 4}}, 
             CellGroupingRules -> {"GraphicsGrouping", 7}, TextJustification -> 
             0, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 18, 
             MenuSortingValue -> 1876, FontSize -> 14], 
            Cell[
             StyleData["ProofContinuation", "Printout"], 
             CellMargins -> {{63, 63}, {2, 0}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 
             12, FontFamily -> "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["QED"], CellMargins -> {{67, 24}, {8, 0}}, 
             StyleMenuListing -> None, FontSize -> 14], 
            Cell[
             StyleData["QED", "Printout"], CellMargins -> {{63, 63}, {6, 0}}, 
             FontFamily -> "Sabon LT Std", FontSize -> 12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Corollary", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Corollary"], 
            Cell[
             StyleData[
             "Corollary", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "CorollaryLabel", StyleDefinitions -> 
              StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "CorollaryLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CorollaryContinuation"], 
             CellMargins -> {{67, 24}, {4, 4}}, 
             CellGroupingRules -> {"GraphicsGrouping", 7}, TextJustification -> 
             0, Hyphenation -> True, LineSpacing -> {1, 2, 1}, 
             ParagraphIndent -> 18, CounterIncrements -> 
             "CorollaryContinuation", StyleMenuListing -> None, FontSize -> 
             14, FontSlant -> "Plain"], 
            Cell[
             StyleData["CorollaryContinuation", "Printout"], 
             CellMargins -> {{63, 63}, {2, 0}}, TextJustification -> 1, 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 12, FontFamily -> 
             "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Lemma"], CellMargins -> {{67, 24}, {2, 4}}, 
             CellGroupingRules -> {"GraphicsGrouping", 6}, TextJustification -> 
             0, Hyphenation -> True, LineSpacing -> {1, 2, 1}, 
             ParagraphIndent -> 0, CounterIncrements -> "Lemma", 
             MenuSortingValue -> 1890, FontSize -> 14, FontSlant -> "Plain"], 
            Cell[
             StyleData["Lemma", "Printout"], 
             CellMargins -> {{63, 63}, {2, 4}}, TextJustification -> 1, 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, FontFamily -> 
             "Sabon LT Std", FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "LemmaLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "LemmaLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "LemmaContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], MenuSortingValue -> 1891], 
            Cell[
             StyleData[
             "LemmaContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Definition", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Definition", MenuSortingValue -> 1897], 
            Cell[
             StyleData[
             "Definition", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DefinitionLabel", StyleDefinitions -> 
              StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "DefinitionLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "DefinitionContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], MenuSortingValue -> 1898], 
            Cell[
             StyleData[
             "DefinitionContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Proposition", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Proposition", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Proposition", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PropositionLabel", StyleDefinitions -> 
              StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "PropositionLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PropositionContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "PropositionContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Conjecture", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Conjecture", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Conjecture", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ConjectureLabel", StyleDefinitions -> 
              StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "ConjectureLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ConjectureContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "ConjectureContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Axiom", StyleDefinitions -> StyleData["TheoremLike"]],
              CounterIncrements -> "Axiom", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Axiom", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AxiomLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "AxiomLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AxiomContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "AxiomContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Rule", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Rule", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Rule", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "RuleLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "RuleLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "RuleContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "RuleContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Remark", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Remark", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Remark", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "RemarkLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "RemarkLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "RemarkContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "RemarkContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Solution", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Solution", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Solution", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SolutionLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "SolutionLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SolutionContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "SolutionContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Problem", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Problem", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Problem", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ProblemLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "ProblemLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ProblemContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "ProblemContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Notation", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Notation", MenuSortingValue -> None], 
            Cell[
             StyleData[
             "Notation", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "NotationLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "NotationLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "NotationContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], MenuSortingValue -> None], 
            Cell[
             StyleData[
             "NotationContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Question", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Question", StyleMenuListing -> None], 
            Cell[
             StyleData[
             "Question", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "QuestionLabel", StyleDefinitions -> StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "QuestionLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "QuestionContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], StyleMenuListing -> None], 
            Cell[
             StyleData[
             "QuestionContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "Postulate", StyleDefinitions -> StyleData["TheoremLike"]], 
             CounterIncrements -> "Postulate", MenuSortingValue -> 1899], 
            Cell[
             StyleData[
             "Postulate", "Printout", StyleDefinitions -> 
              StyleData["TheoremLike", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PostulateLabel", StyleDefinitions -> 
              StyleData["TheoremLabel"]]], 
            Cell[
             StyleData[
             "PostulateLabel", "Printout", StyleDefinitions -> 
              StyleData["TheoremLabel", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PostulateContinuation", StyleDefinitions -> 
              StyleData["TheoremContinuation"]], MenuSortingValue -> 1899], 
            Cell[
             StyleData[
             "PostulateContinuation", "Printout", StyleDefinitions -> 
              StyleData["TheoremContinuation", "Printout"]]]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Numbered Figures, Tables and Programs", "Section", CellFrame -> 
          False, CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.434803682986429*^9, 3.434803712105233*^9}, {
            3.434819484609514*^9, 3.434819492860551*^9}, 
            3.7223563427665157`*^9}, FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "PlacedGraphics cell style to be used for a graphic not displayed \
with Wolfram Mathematica input. May be followed by NumberedFigureCaption.", 
          "Text", CellChangeTimes -> {{3.617629703579113*^9, 
            3.6176297108233232`*^9}, 3.663597247496449*^9, {
            3.722355208019363*^9, 3.722355209979425*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PlacedGraphics", StyleDefinitions -> StyleData["Graphics"]], 
             CellFrame -> False, CellMargins -> {{67, 24}, {10, 18}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, ShowCellLabel -> False, TextAlignment -> Left, 
             ShowStringCharacters -> False, MenuSortingValue -> 1710], 
            Cell[
             StyleData[
             "PlacedGraphics", "Printout", StyleDefinitions -> 
              StyleData["Graphics", "Printout"]], CellFrame -> False, 
             CellMargins -> {{63, 63}, {6, 10}}, TextAlignment -> Center, 
             FontSize -> 10, Magnification -> 1, Background -> None]}, 
           Closed]], 
         Cell[
         "For scaling with Magnification->0.75.", "Text", 
          CellChangeTimes -> {{3.722355614164494*^9, 3.722355635340867*^9}, 
            3.731416384081229*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "PlacedGraphicsScaled", StyleDefinitions -> 
              StyleData["Graphics"]], Magnification -> 0.75], 
            Cell[
             StyleData[
             "PlacedGraphicsScaled", "Printout", StyleDefinitions -> 
              StyleData["Graphics", "Printout"]], Magnification -> 0.75]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CaptionLeadIn"], CellMargins -> {{63, 63}, {8, 0}}, 
             StyleMenuListing -> None, FontFamily -> "Helvetica", FontSize -> 
             12, FontWeight -> "Bold"], 
            Cell[
             StyleData["CaptionLeadIn", "Printout"], FontFamily -> 
             "Univers LT Std", FontSize -> 8, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedFigureCaption"], CellDingbat -> 
             "\[FilledUpTriangle]", CellMargins -> {{67, 24}, {18, 10}}, 
             PageBreakAbove -> False, TextAlignment -> Left, 
             LineSpacing -> {1, 2, 1}, CounterIncrements -> "NumberedFigure", 
             MenuSortingValue -> 1711, CounterStyleMenuListing -> Automatic, 
             FormatTypeAutoConvert -> False, FontFamily -> "Times", FontSize -> 
             12], 
            Cell[
             StyleData["NumberedFigureCaption", "Printout"], CellDingbat -> 
             None, CellMargins -> {{63, 63}, {18, 4}}, TextJustification -> 1,
              Hyphenation -> True, LineSpacing -> {1, 2, 1}, MenuSortingValue -> 
             1810, FontFamily -> "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "FigureCaption", StyleDefinitions -> 
              StyleData["NumberedFigureCaption"]]], 
            Cell[
             StyleData[
             "FigureCaption", "Printout", StyleDefinitions -> 
              StyleData["NumberedFigureCaption", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedTableCaption"], CellDingbat -> 
             "\[FilledUpTriangle]", CellMargins -> {{67, 24}, {18, 10}}, 
             PageBreakAbove -> False, LineSpacing -> {1, 2, 1}, 
             CounterIncrements -> "NumberedTable", MenuSortingValue -> 1713, 
             CounterStyleMenuListing -> Automatic, FontFamily -> "Times", 
             FontSize -> 12], 
            Cell[
             StyleData["NumberedTableCaption", "Printout"], CellDingbat -> 
             None, CellMargins -> {{63, 63}, {18, 4}}, TextJustification -> 1,
              Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedProgramCaption"], CellDingbat -> 
             "\[FilledUpTriangle]", CellMargins -> {{67, 24}, {10, 18}}, 
             PageBreakAbove -> False, LineSpacing -> {1, 2, 1}, 
             CounterIncrements -> "NumberedProgram", MenuSortingValue -> None,
              FormatTypeAutoConvert -> False, FontFamily -> "Times", FontSize -> 
             12], 
            Cell[
             StyleData["NumberedProgramCaption", "Printout"], CellDingbat -> 
             None, CellMargins -> {{63, 63}, {18, 4}}, TextJustification -> 1,
              Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
         "Use of Caption or FigureCaption style by itself is discouraged. See \
cell styles for NumberedFigureCaption, NumberedTableCaption, and \
NumberedProgramCaption.", "Text", 
          CellChangeTimes -> {{3.510059676896853*^9, 3.510059681565365*^9}, {
           3.617629777761853*^9, 3.617629780606626*^9}, {3.619268080116541*^9,
            3.619268080185377*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Caption"], CellDingbat -> "\[FilledUpTriangle]", 
             CellMargins -> {{67, 24}, {10, 18}}, PageBreakAbove -> False, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["Caption", "Printout"], CellDingbat -> None, 
             CellMargins -> {{63, 63}, {18, 4}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "FigureCaption", StyleDefinitions -> 
              StyleData["NumberedFigureCaption"]]], 
            Cell[
             StyleData[
             "FigureCaption", "Printout", StyleDefinitions -> 
              StyleData["NumberedFigureCaption", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedAlgorithmCaption"], CellDingbat -> 
             "\[FilledUpTriangle]", CellMargins -> {{67, 24}, {10, 18}}, 
             PageBreakAbove -> False, LineSpacing -> {1, 2, 1}, 
             CounterIncrements -> "NumberedAlgorithm", MenuSortingValue -> 
             None, FormatTypeAutoConvert -> False, FontFamily -> "Times", 
             FontSize -> 12], 
            Cell[
             StyleData["NumberedAlgorithmCaption", "Printout"], CellDingbat -> 
             None, CellMargins -> {{63, 63}, {18, 4}}, TextJustification -> 1,
              Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
         "Program cell style to be followed by NumberedProgramCaption. See  \
ProgramNoLabel cell style if nonevaluatable source code to be displayed  \
(e.g., program listings from a program language other than Wolfram \
Mathematica).", "Text", CellChangeTimes -> {3.663597250759367*^9}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Program"], CellMargins -> {{67, 25}, {Inherited, 6}}, 
             LineSpacing -> {1.25, 0}, MenuSortingValue -> None, FontFamily -> 
             "Courier", FontSize -> 10, FontWeight -> "Plain"], 
            Cell[
             StyleData["Program", "Printout"], 
             CellMargins -> {{72, 72}, {2, 16}}, LineSpacing -> {1.25, 0}, 
             FontFamily -> "WolframCodeSans", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ProgramNoLabel"], CellMargins -> {{67, 25}, {10, 10}},
              LineSpacing -> {1.25, 0}, MenuSortingValue -> None, FontFamily -> 
             "Courier", FontSize -> 10, FontWeight -> "Plain"], 
            Cell[
             StyleData["ProgramNoLabel", "Printout"], 
             CellMargins -> {{72, 72}, {2, 4}}, LineSpacing -> {1.25, 0}, 
             FontFamily -> "WolframCodeSans", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Table", StyleDefinitions -> None], 
             CellMargins -> {{67, 24}, {5, 10}}, DefaultFormatType -> 
             TraditionalForm, TextAlignment -> Left, LineSpacing -> {1, 2, 1},
              ShowStringCharacters -> False, MenuSortingValue -> 1712, 
             FontFamily -> "Times", FontSize -> 12, Background -> None, 
             GridBoxOptions -> {FrameStyle -> {
                 Directive[
                  AbsoluteThickness[0.5], 
                  GrayLevel[0]]}, 
               GridBoxItemSize -> {
                "Columns" -> {{All}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{1.25}}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["Table", "Printout"], PageWidth -> PaperWidth, 
             CellMargins -> {{63, 63}, {6, 10}}, TextAlignment -> Center, 
             FontFamily -> "Sabon LT Std", FontSize -> 9, Background -> None, 
             GridBoxOptions -> {FrameStyle -> {
                 Directive[
                  AbsoluteThickness[0.33], 
                  GrayLevel[0]]}, 
               GridBoxItemSize -> {
                "Columns" -> {{All}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{1.25}}, "RowsIndexed" -> {}}}]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Frontmatter Styles", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "Styles for front and back matter pages.", "Text", 
          CellChangeTimes -> {{3.467471993288011*^9, 3.467472032084065*^9}, {
           3.617629823817987*^9, 3.617629829903902*^9}}], 
         Cell[
         "Need expanded to include the inside front/back cover; halftitle \
page, copyright page, subscription order form", "Text", 
          CellChangeTimes -> {{3.429011468955964*^9, 3.429011513727989*^9}, {
           3.6199764723789167`*^9, 3.6199764749283113`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTitle"], ShowCellBracket -> False, ShowSelection -> 
             True, CellMargins -> {{54, 24}, {10, 25}}, 
             CellGroupingRules -> {GroupTogetherGrouping, 10000.}, 
             PageBreakBelow -> False, 
             CellChangeTimes -> {3.426735977640814*^9}, 
             LineSpacing -> {1, 2, 1}, CounterIncrements -> "Title", 
             CounterAssignments -> {{"Subtitle", 0}, {"Section", 0}, {
               "Subsection", 0}, {"Subsubsection", 0}, {"List", 0}, {
               "NumberedFigure", 0}, {"NumberedTable", 0}, {
               "NumberedProgram", 0}, {"Equation", 0}, {"Text", 0}, {
               "SmallText", 0}, {"Reference", 0}}, MenuSortingValue -> None, 
             FontFamily -> "Times", FontSize -> 36, FontWeight -> "Bold", 
             FontSlant -> "Plain"], 
            Cell[
             StyleData["CardTitle", "Printout"], 
             CellMargins -> {{63, 63}, {12, 2}}, CellFrameMargins -> False, 
             CellChangeTimes -> {{3.42673597764176*^9, 3.426735992704554*^9}},
              LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", 
             FontSize -> 26, FontColor -> GrayLevel[0], Background -> None]}, 
           Closed]], 
         Cell[
          BoxData[
           GraphicsBox[
            TagBox[
             RasterBox[CompressedData["
1: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
OjnFOYGE+Kc2+JSZa1xQIv557zUF1U91gMf19B++5W4zyUUDepJM+5V4gmYz
Yir0kqv5fDaHl7uSXwpk5vNbpWTswtsPqWAgEwaswM1mhoPE1DwxdhJRzpLE
F6Apdq7KEUAUFJKbWIkGdZKkOE0E5aSGemozQ6WRZiqWJkU38osnXrWuvHOL
HdDsLpwf4SYooIZ3sqJ9fFSF4VSMpZBB3A7TNFVQNetP17SGznU9Go2R8CEa
mbtHPkXMDAJ6E1dyIVPhQMe26nQd76rHxeRWJqEcebHtGW7d1eiW5cPBD/tF
1rZ11Tv7Aj9jupPEONJW82G8ovR8cmk8fJ7vt87EbD7fEDkSecSJ71dqvm6K
bJsZQVlDLHh6dSc2MzyPyCrzShF8qei2lBgYZPZ2djupMmi9aPDssT2AS189
ENJd2s+NmeE9q6WQcf4tsEW6tPFB/IpuJH9e82HKcFqNCormT9svT93AbjAY
DIaWgON89e3R1JVJYXarZUKn3jQ2MtqhjNFJyuHz9e4eyPAlJdOWk4YK9KsM
cgYUAfKWj+Fw96RCYocY0ZNnVwBBFZIrtu6rWAIpt56R6IetbqoyZoZfnUTU
dDeTUAqWl7OOCWsKrhSAmi94wnJ04LIX65KgMojfivs8KemDnxn8vDs3L86s
15ppGc9ASW7wgVL9dOpqG6cG+9GZ3ciF8qjJq0Z78GO3zHjVrdMLxeu/uCY1
Wz/xq8RNtLUqTR/n7AGe+kTflmIXkdhK+kyVdwI/2lhE7ASVG1RQt1ykasDs
wHtoUTU//AwPP6q1w4FnI1HpfkjLa75CpESQsXQ2H/9sL4Uyd35YONiAy0Ph
5/7+fp4WlUYLHPyw7yl/Po12G1mSwP3fxZs18iOPnxm6wlPmV1eDDuqxUc7R
n6ChOwcr50RAx1QhDwyj2eLiYksiBMW+vr4+cWm8mFw2Au3e0VBTMmrMDK+s
lkOv+TRYFaNlF/omQ8LMIM1+u3hf9G6650ltb9uUwWAwGE4FxNQAEsLkz66U
kjJGU+tKXA8aGxkN1Zma7wy5jcSkvVBfVg5IqA1e7+5dHBmlVWOeSMgLP7ci
ZwJAcisnlTXuwY8XRV0PYovUYlLOiFrrYlxN4GpdOXZVgTckA/jt2gmAkiiW
ibNFsjSZP/vP+sP3tUfLD8su0ozf06oiMjP5q8z5ZppTay1CF5MiWavttiWb
Gbyera1DzYlG4lhEy8w19LXhc0NF1jbqEQ3VtdpPp66+qx63kSOehtq/v4e6
y5lBJwuaP67Dw8NCodHm6ZhpMf44KxE/oS6wbOmAEp19KufN5xu0jQUKjfc1
ZLR4w8rZo6Ov68q+6L/jH19qlcKF99FrFhWC6LPOQsDPcChWtE/+BtZP8MQs
LS2JDot5J1fz4id+bGIUKBsw/k5a9qtvj/BUFB0pv2/J/22rGeepev78OW85
GbwctgSY9UQeu5UqvFleXuZF8V+hX6j9XEFKsTge1vwy2w7Mp9cyc+xGXpiy
k9e4r/kvK9t6nNeFRnYsn1waT7hoc82kfmQ1hK+llSz9BA+fKrusrYS1Ld/f
RM+hHmHMCTOeEhPnWPb/5YdvVp98Eu2U1Gr7zs6OoOl0XVC5ETMjgnJOW8T3
1iszB1mKfCPtuoKBsaDOABXppz+RmWnJpbnObMk1X4ghlC4+KefsTcT84C45
PuHqYcedYLT2jP78OloEKTN+GFtUgTWqUDrys/qdwWAwGM4GaJBH/5NFJkiI
Dfh6JiW1uojTNyNn0oQEPXk5dR899fCZGr99vbsX+k5Mmpo0FNWSl31ktjMK
ePgZE1q8yOkxlyg4YTI2Mip8O3B9IWe8KMNMxOKWFzv/1PLSJxOXSap0pr8p
4Cc3p29Q1jKWsVBI4CcKCRkpTe0VaSO7Cy0zC6KmLnukFVFmMfLYyT0CF72c
acjvINqJbD8znrKlLzMnjRiCbifZGYc/j4+PL/31x56yMCH+cOTH5+l0oeys
Oftj4z5eN3fKt1qNJRIvJ/jLUA6Li419AbQzK/s04URRRxY1o+dHvpi5DSn5
0/bLrT++CMuh5oPWA8r15vMNyA58CyMGZ37EovO/Hb9zNuPs9OOfULOlpN5R
jvZ77u3t5VGffYYgGtxgeKFB2NmA6eIt7fL4RF2pTFbo+/fv89dOnwENYHt7
m6u3VIxQp7u7ocKeVoBpqkpaPYadrub/6vYXujx5e8Dx4beL97vu6yYtwZ+w
KcBj/AyfiL3YOKpBIeZoWm0kbGlpiaYhiPTC+RGaeviolTZeieehJw3Xzlwu
XcCw1tQkQAxTQeTxQ9j6pvFa9O3tWzO4Sy4t/fAtjCEwnmxubuqSCZJdFV4e
jbZDCmU/bbziHRbvC5ECDgLA4r2F9adrMFjVydVoryVcMLAsfHkPRqdSIbHB
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
dEgmXHbl36L+Ej1PeAbgn+E6Dt+6Ep2wrPk6LR25NMrhuBwcQhqKOuRdtlEg
Nb/AWhe2EEFtiYZUVsZOQgQtxp83Yw+Ezk/C9LXrIl/xNST+pKhp6ZP/UFhx
lNgCHDetiX81DB0Qrrqbmg4Etvrvaj4qgx/Fh5sIEZE++T4+Xk2lZEV4ScaP
ziRNRt0kzdy/img/ggDBtWbnuMGyMBQ15mGsC9wIQB5lnWoplU/lxVZZqXh6
rGMtaog6DkbNaxAabd3WXRZCDa+X21u8DejRVaRBNBLd6TwXbUVHnLNPuRSe
RxtNL7pc+rV4DTQ+VBtpJTrOe8LHF29musvjwIU/4e3Wi1VjVlANCwSYMuhQ
WqyOOCPkMallx/U5J1Y+L0O0MG3xcYPGpY+Gw0zNzd11hq+ppGxmKVFNNflb
vL/+i2te2LzP4dxKhUYt8PL4xDerT4Sefnh4CHMf7WAiUxCP7Y3y4ha+9u1T
mRiVtTxumpYfPCz9/+y9iZdlR3kn+I+MqiqzJNuADV6wPW0W43PGWr2wGS3g
np42EvSMjRB4AZ85RkjYM9NjIfAcA/Zpg7F7TiMJ2+dYYKx6N+7LpRCSyXxZ
WqpK4MqXpRJVhT3KrcqD1Cjz3fkifvF98cVy73svMwvM0PdcpW5lxo0b8cUX
3xbfcuRogv8Kf1JKpR14fONDflTIpTMtUdXtP//QAzpHn7CDGUUzk+2cH2xp
JNdecDNXHbrnnntaRlFIw4Is7rIRigQkAVrOozWT0hQ+DxhHtXFL9A7DpneV
7DL9Ib1t9WK1sUUQAQRVJXgSHW8dItkp9QeWfyZAlq/oqWk6r2O4cnwgvnA0
M6nZKc/YAKRZdu37+y99EamZGs4Y/+ijj37knnt/7EdeSS0FOFo+OcpJqpHb
uQPlpiW83ZtoctLd3Yz/lGDjbtsGn5ZeJQ0m8Oje5ZYvyW9GfCVfGSv1dfxm
KgB2XB2g0ApFPvh8MNN+tPTPgmAweT/TjmT/0JvqyqUgxfFxjUmz2SFB7XNU
bdeVC0vvwJwitel6Jf9FSgQODFwdV1FGSn6zt51S2qS78Rz1eZP7d3uajj3s
mnxqJHeJs6iwM81SnTISiRbXxCW2E+arOb7mj1e3q9JaioBxw2r3R2befce7
aHhbG5sJBCYDeGHWGoCPPfqV173mtbMxJ03KrUIASM7T27UkKBFed4B3N30C
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
ggdh4CSZAfINbpVxs/BIFaZJiwjDmldPzMKff/qz1TFD8hgJwzgE+fFXvkof
FYkUBxvO1SSVuAPiV7zs5TgLvu2Wt7/3PXf9wUf+t0/+8SfyzG85SAklrGVv
ToAzX6QPydRGzkZKA9aQkYXGvOhhafkJDQSkaIC2Rb8kTeeRRx65//77SXaV
E2pxjbia48R/7FU/SnD44Ac/eM899xDfNwaYX7vz+hTOK7GcXLE1ciwuJass
Oyux4eOXWDWnG9ZaO0h2YgcXs2TZ6Qv9+ripSMkNvEwMd5o+jPiyLCw4OBGQ
586srjUxvuWBn1oiyv+UvzviqCvarfSJYz3j5TrFzrzYoOAmQCDunLvekXRB
a3fttdfqKJvE3UvfhNiEyfIt2zPr0dp4KDMy3iFBlm/u+Y31ETzDMh49le4g
GzZMn08Qesf6oPP06WV7ItA0sQCfbMAcE5LnVjEbVu5xfHPVIUPUrQMA6XcP
PfAgaTqomCbeaKKIve41r6Vd9rGP3v/4Vx7D9jx79hyoN23nHGIikeZDhc1W
te+v2j0YzRSWmXi7zUkXxchlWUG8YpVKOzbCzLrHZ0+MpXP5i9Cg5WRfryYw
mX6/bFW51jWSfy7ZPTivd2uO7c+vb1bBt6GAcvinPguY9opQhYRbp2DKjNyq
BRvUZz/zFx+55/fffcd/gINWEtXoginsMforXvbD11973b//d/8T8aDHHv0K
qu3Qclg2YTXxoPtoWMl69ZTs56Dab7fMLAo7dhp0WY7S/3T614JyQIooD6Hc
H/7hR4/ESbfuufvD9K49eIp3fW6ZWTt7Tmham4JAn0jWaqTMdGB5NCTaOH46
zgaO3UTApM317jveZXN0xyk7xJGG1uW2W2798Ifu/quHPm8NMqOm2U2BQAjj
DOO0voR7dqjEB5M2tBzLCkWrkoKJrkIDR1rv+8OPv+O2X33D63/OHRLNiMeI
FIj8zJ99+vxz31hbtStYOR8kzSuVljFW9G0lYsv6ZNxBAKAjIeHnfvYN8E6U
cCcYD1//2p+lYX/wd373gf/yYBB33SG7t3bzTsn5IPCq0hI+oYHxRE8msqys
DQmj1L0txWDXTBND0iKTp0Vuk3JvOzJvkp00SKnNasbok82ipxmTvqfCMNwY
RIcSQTQ/cBwp6V1a6hXXHD88VJEAKYPZzbJbuo0zB6sOyXX33POR33zf+2mV
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
7Lwh0too1qB5kOKHL/FuIX8RU+C5JC/xzs636RmSvC76KaRPWnL2m1a1QqR6
rRrTBEm+0rtDNn7xp/6nlhXRm/IvAgffHSIvFjtCCz3X7Iwa5Pi5wsp4rsSJ
ZZ5ta9Ei4qxcvBOpPfvMNMmRShtlaJg4GPaexZkmfTH3L8oPIGA89K9g88aB
5wDO0ldPJJ4nLPfOS6JXnuCOJik2Y6EJCGPYeJgkjdRDanx+SAiWYKbzHdFM
k9OrIh8E/d/IJGQxaSKm27h812KobzKiJP/Upa4RBgWxVnZc8m5ABut952Ir
zJcdos7pTEHeBW74nDBcrsQRWcywa/TyCawkfAAIqdJy+g2O5A86o6AuSSw9
Ehw65HZcrmisd+SzzVzaQx5PGJjTVUGiLTr160WJ/GpK2J7wQanENz1ehTQv
qk2Sby0c/ykGEZk+EhqOAy9HCjzdRhY4bZw5u/YNqZvJjscZIyDxI+bO9E+2
Q3pnZrEdFS1I8nsTIUNYQV5fr0AJMsgXccYkZ+tOm6gSwCZMBH/Cxqk9BGz/
RVeE2rNFVhXjMybdlZyjGQ6MSgJAEoTpljF4/C6Qk1GIoQpY7eo5rnjjIXPt
2DlWfz35RD6YPcjtFYf5FHcEJ311Z+h8cFzkEe3Q8A+CEoI2OvsoHrCpISbR
F/tzx4m8J/0AYiEAzQdtpTELCPT2BVNMValaJ/pa9ilrvCErgVgR7Hg2vH9l
C2vJAZfL+MQ5MF0i5UlqM+VQ9Ygap99Ziqs6AkQhyQmybXNGzXzJ9Fe8Zcb4
jGeJI5w0HJxYgQNeFczmHrGFXolyVLGHA23SbDowiLF3tFsarGCk9vroAM8m
tCSsCVriPL+fK5OFJK2BP8sQOZnDA317aVMp32BtI00oZ8Uusg1HM0lSCHno
iGbSPjPAPcOLIoYUlc0vKpRc6TTgEY/2sxZ7sojHeR2uSe4DiWaSVbVhwv15
JTxYaOerxuFabsAtucHHfdo/dNCrER8xbG5dggVSWsZY6lG3aCIA4eqxR6sq
ElRGZvySFQGbswI95JEUzutJHJ4jq5ph91S6NzJvujNnhrK7QUCEsWplQfL7
8Xzrjfg4203QZwAWa6EkcNPNTJyLw0R5Pss7Oj8RwFWx8xJPIXdTb7SbukoA
ovHW/l4XgNN80O8vE2UAlgvGQ6k7Y1yaxCYQk5GsoCQKhoSWSKS5VInBG0WI
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
iO+eJmyDzrhcZv1FHNa6C+zvqoTT++6nBDEicR7ixmP59Re5WnvuKKNHpbbZ
87Ne/U8//aUyOfri7V9DkmzjKz6DjN9998fdstSu3//+92DIhphbJ8Vbl1en
n/9GJYxOMZ0IO1qitFLeYNtKnaeVKGsmkf6QP9F518yFbZN0y4xYK5Vw2+jU
ZvmGApk96lur9KFQ6oVJI3AogiiXyFdsbVMVaVtY0eUhB/2sE5uxQJo7PZ80
A9oXQJNU9ShLNETeMRw695VDto/OD5JX+vAW9GA/6V47TfrZ3dBnv/nqN2cz
DLPWb3jYjY7xRx/+5boeoFkVY8UWYo33m62U6urVN1tUa2tqvi++2jaaOnba
AFZlQtX/6wyKgyrmfeGrroVo5LqfSi9e/NaKfd4NQf9Zq9R5+6rv0WsHYpZ0
77sepP2cPk91atuztQmZmFS+2epVqdHZaXvBV3eQV/yy1JPWDpjIn1uNSrEU
pQ/RARdxSN6Ghm8vU9ov+8nnp72KP4MStId+A/3LL7+cY7ytmnHf+Gq93b7i
UK7F/mm6CS6KeZFu5pAZaoRJpKBV40p7ynHn2T0/GT1+9tmv1iKlz9ICgWsE
9MJa1bw9DIcml9ZVr8/ckl/7l6ezNsNNrt/+9rcNeRt7VWnYrO9EqMY/+8Rq
TTPsTyvTzK9Zi+7WfGWUzMIQo3DKt/Sturh4uU2MRDr7Dxmuo06kyYNRl+Oj
7JuNgbtnzSvSkeroF8qe22r3pHjBYlXikA+y5TG5EwzuVo+ohK+4wkTdRvM1
4kDgyErRfdsyGgSPJwkO692sKaa5oez/LH3xaHMP6W83F7TL9ZbHtT7olWnl
oWtBsp+zARfnMXg+dTYG2Ietm1arvGnle6/Gb6mR1f4X20mXr7wuH1WOW2nj
yL4sklHXkMiqwn46W963akNYb2nVusMY1PL9ng43gPqtf2sVKOPQ4svesZl9
pBB3i7x7+PLl1w3/rxPYnfrM53CoJlAY+yBBHOZTzaJwybL9s3s6kcIarSTh
eQ1fUVbPi/SEIZD2IFI9yT9/QVo5R58JhvO2GzHYjaMmnooaH5FbRgcyvQlf
eYFy+Pq1MjznseL8XVSp1sge71BeoUmOkFB1J54ZX5Q5OAi0SEsrLMoQKTEe
sBoWW9VRT8SCU77FsRrl/+34RYX/hVYFIi/TajxSOrD7O6617DSh/m3xkJSi
dhsl+4ljrVrIRqRNEJ8413qQAdTTfWGtChIvHtfiuOctj1Xf+DwQMT78UZ6D
5zNYcJz14G0GOWsfs2zxoV9UoUrXhIDAzvi7klfvUA86HZTshwyRnZXtaLyV
WY4l4r0pFvaVr7hn2mzRlg6m7A999At9NeNYxUNypNJJ1bHfYG3qcazdMWMd
eKdU47xDPTgVvgpWDC/FLrCfny0l3xO+OpgNdGmuTcpjNSQkLsY2rOfQJAL1
/uvsqwc9GDjjkBZwdJtBKmxYfXLZzhCIGLxx8lQK7Alf3Vpe8cLEcVl0lFq1
alqFPFbiIo7DSsnQy3ZKm5pWVRf0t+QrBpKtPdad5YHJUwZi//hqm30VbdGT
pwxjS/RZ9q0SBKr+HJPa20veRFwvEruL5GEbskCWYJiKPUD20+dTPREiRutS
2xMNoUHEzpjhoKvjGK+14fsCfGk81esBeKh83UHW5POzDNTcsuBt+iKVlGmS
VxMy0FYVLJYW6+nGfAXDLGyRolPN/BNdFgx4k0SoU5FPk4KHaIVI5qJp1Fws
lzJRLA/FkMBMV1L4TFxhlAc/GT3XzUs3SzLWTb/+muaG+AynaD3J1+wh02jc
BjL8EeyTPuzzte/CN007F+lcYfOTtbudC0DuXOYv/ZUz6mOZpFGezzLqkNfU
Rw38l1/loDeWVwiedLKXQB3CFVIU1Kez81jjvCoQn9Cjzp1yffHyklLFrcGl
d/AVz+KBr4KjRNq4nHVhn3NUug4imsZQAE/0grc/6biMzdLnmpwm4uYdElXj
fCYG+OwmfDVkAI2CnqrnO2jcAqit+L07WWqXp4G+OV/timwRwz6+Nzl5KnEh
VVXnobbVwz/7fdjeeQi+Ui1DZthxdUI1NrhHidzBV29NXtnQMAEcEQX7HjXT
mVVpT6O6J2qln4PopRAgIAZ3voXosz1rXgfcBuLAqGTQN+IkO+Ca8d7TuQws
g+/gN2RX4PE+twg8M8PikKQ+LseEi4rURShksgmQWRYFq8NJKFnbuKEQj7Y1
U4DhxOSidU4QWY7AE0dd3xhCwVtDXEFz4I5V+XSOvTg5/kidWqg27KW8evt6
UE6vx2LqpqPnP5lARzIxD2taASj+NxxfTPM/D76i9kdVrmSLdCUEBOcg1XfO
lBGn843AJGeluvjeZ/nqRvbV29eD+8NXLJlynZQQVpuwcxnuZs7gA6n1Hu2r
Bz3I5WRnflw3Ak1Xc3vFV7z2Sl6RGmcphbrrkaiVFA66GZHaM/N+89V92Vch
hFFy3DjBbyHGcethH0KZ0ddHUg/VoiD6AGe9DT5x1HRvFMeNjgHymnWV8JvX
yqsNEla6xUW7a/YVO3xEvjChWXuffNUJmV10SEKmyms8u5sz26/NhikbDpVi
LlWKOyU4YEVa+8cpnMTAq8b3PsiGuxC/SMUI613LUuQOmJ3jOs1hOYyUD4sW
mH0CXlBhs2QqLw+b81/b6NkvPfSEIFzKzFTIeiC1dNm7evxx353+vYIkljdQ
Gh2djnOW3RNCEWrlEPv0zCw8sci6Q/MzImgjsfXZU4AwmLQNzipQslgqjSDX
Dqht9P8vyxZJb5EdkrOemakW5ljpUAs0Kx0leyNG+n2KBjzKRU2vd85uyFdp
ehb0rXkQj0DBEmtLB70rNo6yVFq1g69cnR0Sun+bxKZYtvIJlKyEqeSFQIck
08PLNJhgGiHJe+3Zalg/8gjX9v/BdLNL8PccRLGGF97BV29NXiFBSU2cg2ZA
7bKBFpI+Guo0u96qK6FtCiEOR43Y2aS0KcMis9mYMQbPplqGMNCFrUpwhW1V
jjFY0Yr/W2hVQMWLEdL0sWnAxheYeeMp/bA2I7GWmaib6L5W5yFl++D26uDY
4DMCWSD4UKzxNpRWuQ1Ji7SZFARIz2OaJEPzxrXg5mXPjJvcKg/Dvsqrt6wH
m6nUxDYAhW+I58pFXcpKh1O4odWQNjtYz/vIVw21zxIWwcJBfeclcFj2Q0Pt
rJ+9lO70Qv/9gUKy4xPY4HurB/eBrza+7PW1alXVjjnlLYmImvdrXz3owUEs
ZCqvV6+qrBnaF5UMe8JX017KK52DKmSQqKvh9lnmf9/56r7sq3wMwb2sKp93
G/bNXZM98xXzCOQV4rL1+QQPgdMO0m5vdmzr+46embmHG/kZbEaMLvcWOeFU
u5roOW2W9xgBco98VZjBE1vsbsZpnSwvePKpbZpCv9+k0wGDwLCHDhR6E4O7
Xo7qjlswY2+pEDw/imcVm+xNM+CZCSXvzLLBLW+e+XB6ekoto7DeSucpxZYr
a4U5qLT+XbN/ljTNPqdqEPssS5ujIscn/e7JTKeSs84x1oZDdaew2O9+dzGK
CRQSDlI/rEb25cGHcgL9QGfidbqS369QZqwx3ic3yOFPZnfseS4872LIu115
wWINa/q4yck0M9QhYm4b19PscE+id8BphIvXMlw0cVNgFkyYpwPo12qy1VCF
beMrUibCzy5zvB/oLLDe+XOdgLY8mPyAFmkzXosqbfFWvhpqvpo1v0XXZ1R5
GrdKq6Har1HXxwGbWntXqsUC//e0kwxqGrEx0+uuWelERM0iysKyIUvmqzcs
r2oVdkHqeQfHvjuQ8AtPnkVuV/Y4T95RDnrcIv8gdlAPaG88TL2k4egkw0Yy
+zgdshRtGr9yRIuFx8/3tEIuOR3BWYHcf5O3/hGHnC2HmXBBr9xTJMTgjfbs
HiYO28D9+iavUz4QVC8wId8mmTihnLweTTA+7razNzC5ZS5bzSZsG/ag62mR
wRWXs1v/YZ/k1TvRg5u0POEkwghyXa/zLiDKWvSLprdoaDV4gp4/D76qOohQ
+dps0z+bLRhcj1cf268Olh8ikwhl+DbPTK1lKpObzEDhEw8I75ke3De+0qoa
5bvDMyPtxCZ71c4fZF896EFgonKzyc8ssEyDAsr694qv9lZeoarPP18XuzHM
wEGT1A1l3ne+ukf7qopfqkX9Dund3CS7NiPigYi5bv2idnCqtuvBTbLbQ2e3
92rizjEzzZ838TNMju6uyxNrw9Rx2uxbmv/qQ8F/OF+BvJGvPEd83xL9PFt/
YRX+uw/GtDw/4KnebZoCl+QOeMJ8K2PKm4bzqvpzm62hckAVd4q2yhHCMS/i
MaXehWiMuognbcfsy5VDWw3bK82TLD0LgrxRw3o3AnDpxmSsXENke+Zp3qL/
NeRDfwe0zPtlL85gMhlTqI+SbXvRlKQW6BDSaTgb6yaz6sQkrTx+WJOdxWJW
kdRlz/sw0iHGUY6J1BNNMpDsXNrKyU+GDh66yXPQeiUncGaYIWXoCKIN2ap8
yJQw12HZz8TZP8uvPCeFpnkqesfPQoasLGYAtIeUFAOD+MEiYsjrKVo8ALJm
lq+keRNHAXPc7vO4aKq64O6UA7zRXjefXSsBwjiXzvPVGikbmJRNvOu9sV3M
++FwNmWDJ5TJenwh27WNQ0ZXCrrZAcF16jEzMp1fBs9JkREDxkf9QGy7tMvE
mckI6tv56i3IK5Zx37unC0lj1wzolAGaDjj0g8xBrw0SfqRowozuhTRUGFse
Ih7+mRJhk85Bj4mlMz584vOevJyDwScUdbSOYEYrcowLKzx1M1S/4RzMLIrj
wzXYgjd14oCyGb26B7eXwPvt0xk2cDarbA56IgkapXCVDy4Pg7hTtEc+Iwq0
Pg9lsJgJ5Gj2DAhrXBq1t+bQ2Q959W71YJyzy8PBs1b1iUcncT0N7nrtFwIZ
k0fm+J8BXylVMwREpidl+6OFpMa2Ak3lGyR2XwR2eVaG13rBVx+tD2eJpZy+
Av6ifdOD+8ZXpJWuqlIUQbUYb7QDr/u1rx70IPVgnneuB7VVs86ZfeMrXHso
r+xjHSN5sodQO9j4i5pGQl6973x1L/ZVZo8hZ2siR9Gq7wT4vDzv0bo2OWYm
51DLRoiEzSy2p3kKoWR3anZm78Uzg+tWfobz8/PBU4xhqWKFm8o5Rs03QpOK
r8gzP5yvcNx48L3L5r193wHdlrdgEpYazqPNFrYG2yw2xrN1EO5PPvnMDE5r
IW777VnM2nBlY3eZLnv46qu/s+9P0r16/NHx8cr+TAWuUsl42cNnn/2KVVkB
u61tzeu+/PKrx0+eHluBxx89TlWdnJxMMs3R7K+//tosSW9G/LSqrDyaYZ9P
njy1lqeaL1OnzlEsNiA1EsXstqpmSdHwD19k99XVN/aM1/3ieGWtRZuNDva9
vdRulFyn3DexVVYm9f1Xv/p1U3ma6VVf7PPTTz81Ip4kOpDspBVIarRi5dZf
vMJ+nt5+wTo//fSXj70SVoUWoir7fPHit/Y9Rwdd48BZSbzaRpDFOII+fJkZ
tKr0UFrl/BCfwVdKnK+++qqJAfvTn/5kdVphvB1tXvnA8ef2xlTny9SA2HVb
NOF/WcZe5zyW24mqWAAPVpU2EujZO/gKr7PyK2cqu40T7PPFV3/3O2O6VBur
Yn/xYPQkU7EkChyne5av7NmkVjWmJ09//rOT7ZLcYziHw+fP/9aJcMWJQ5Ji
9H/+18d9hIze6iIW0X3w7zNlYs3nqe9kBnziYfdcw/Xdd9+9fJnHFO00buck
4pBt46s3Kq/wIrzXquIwHXtJbRKqxcTRobdWaeONVYxhyDxomBXzSi7QeHTQ
mJAMaS1kVeyCkp0P3phLjr5VpQXs0yYOX2c1cjpzkuJhqg0V+/zmm28owy/S
p9GKneUc1EbiOXHFY60f05nttGKNFMXEgVigELOrl2CYzhRi9hPMQU4cK2bi
EZWk/l6wVRSqeLWxHxkDr2ZVJz5xrCoRMld7KK/eiR60d+oIguwu+jJJUacV
iJPRBan9aVXpzLVihexe1fvOV2ADNKmZOFby8erjn//1irKXqy02gMJNFT3a
/NOf/lWoo+5rMa470TyMYFKdauKm9tU70YN7yFcoY62KQ+xi3Er++ten/eQi
3Wjh2Aiq7bT6wfbVgx5UBYSX0urmQHz77bfJ1sh92UO+2kN51diix6Lr/+Zv
/qYnMgmCBtv1vvPVPdpXaszDGzA49s6c6J6X52a3m+l1boLR12tWP/qiS62j
ow8bp/0nxW7JAr+x2/HDofLi/iDPzOUt/QyglTEDzK3jYnSdTJ1bpr9sNaF2
C6uCFXSPfMUp0HTcLrOvLn0pfXUVJ6NOZzz8+tetc4DXMAwJk3nJyDQFcEtv
mXiSgj6u1ZbdE3WCDYIxSPoZo8a9oeTThrvYGKlxwkydWzu5W1fBXV7RdRkU
9Trfl8BM9n32UIXfTFrzNOfgqp11lwlWaxxky74/rJqjU9xFH2oQ+45EG/Yx
paBy9129g8mLsQ28Z7VMQLam5HVMWPQz6d0L9JC76LHaol8ED6Tb6J5h7Ago
++fQa3+dlUlhn+1kCb6LR7a5rI+fKzX4KyMCWxjgwg3LnpIr7DT5/tE4Fiha
1mmLiLif6N5jK2wDqu9CwVVy4+vrdvMVb5bhgy1V4IldeIV1UFD8zKGMKYiR
g6veqVm+6jo4JVp9PdRhn41fJTttvO9D1yrOMhPvCi3CB62Wzpl8wgVJFX1/
CpsIoeOr1638ypW3h7itn/lKZUL8DK/nq/uXVyiAOdvHH1rDSiVpcIPH4fcT
Bx0EnxjDKP/gCsJjQfDwcWtVyrcr8b2zbRz0vFm2CDYppm6/XgOTZmmlderm
An+V9P7IGD9elw6tHxzJyu6mtk1JUDJyq7GfOCaIBpfGwT+nToKhVaHs/oz9
HnQ8vOyichxzZGPf05Xsf4V6DmpV1fmm/ZNX70QP2qcEfJJWL0kBNmx2B7MU
SAorbVpVZd53vmpmXB0vHcsAY3CQSEW8VO0Bo/aFH23jzz3QZcaM71VD48Yf
nEUhzPdTD+4bX8V8iOOj/pB+D5O+SWdhgppYrnHejH3149WD/dWMTlx1Jtru
LV/tobzirbENDYfrN4MEvaAl7ztf3bt9xTcOw0jk3m1+9dl7XB56qGGVukjb
sCow44duuufy7KPb7ZVVoJ6ZkGHu7uiZua2fQVcTDdn7mDcxkPKX2c/gM0Xj
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
s6DOVY2PspDZO3n1ZvXg7eVVdWRykZ08eUqizpVkVv3x8VX+jIsmT+RaS+BH
nMtBkkqz8rjSEXnVyO1F919NGd0ZPK0XmJGvEq0oUvZJD75xvtLGi3c0q8ge
UXPW2L5H+yo86EGvypeo8Y2rOi2dV1Z+gmd6RzMHPsirnfKKtGq4vb+4tH+/
+ere7Kt88AHtxzpuVeX88vVg9MXtOsq03TlTNu5xHq1hfmtJjMUaPux/Miit
BL+FlJc8m0fus6221+cYQAXgNYc73EZe6ebsthf1b4RpSr7SYMsfzle6mVJb
yFWF/tt4nXQOsR0Tp+9RqCD9o88tuRCrkhSAMCdsvPrDgJvkFtNgpNGjbXW4
6csaPIxQUxexQj3JDq9UzGaV0oF5N6uj+vh8mS0HcQwmWXrby6pC6qJUFQPa
y2YoEo1N7uUePK4VR0WULLVLrYi70RHXQS7Nbpx+knV0yVidYAdOuowGmxQ0
GCQGiVVpAxAiuxxz7EToMkahRzG4Kx9+WfoItkeQ4C/Kab9SyfrgZL6QnSrP
i3SAlJ4ZUk9/guecfIoncazNy8r2ExW2VMXab1pdxg2+dGjRJafVzAKs6vZ8
lccLzWZ81FRbpAxGbTCUkBxhG1/x4fjkIzHhoh7XCFJX9xeD0EruyphvZLtV
tV6vG9F6mVKox5DyZEi7mVFEFk3Q3c6ZHZ6Z5o0bufAnNhfkdfN5hEPtxrc/
r66+edPyigORxPJH/XiFkqlzxPxygKbcbGMDhqk3loMXyIXdtCjLYU3Hg1dq
BsxIsUUwNpYCbjlIDlCw3KVvDzW0cmDneCy3zxba0AQXXQTBw0W6U3IROyXI
YA1+DrpR7jqdTbBwraplLnLayjz6MVlh2h5qQk8Rph5SqJiJOyY91GKXKRUj
LTSMhbIiO4iD5ChmP6GdTAmGqjg19lJevUE9yIcbyisfwRz2H9yM1PZHOEQ3
Yn/MfBUKw7SZMoDxNdRhEtTONWXKkioTaovx33jg7aXrjlaXMbSSimCP9OBb
4KuGGYRuI3Jf6uuaQWEN92VfTQ96MF0RTSKUxARDnW9Iuyl2eNpRLXFrD/Lq
9fJKI/zDOOOHrJ+v33e+umf7So4Dczo3IiVmwwxFX1N3L4bKGu+Ftn6/+KBK
tcb4Xms8AqJ4uxQqPiUro9xY1oOStDqdn33Z0KrpiF7KbOEG8gpOabdtxg+c
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
60gW+xUbr2zmf545k6xrXs2cM/urhq/i/56t01BE9mbf7b1NT0/Zi7rB2sL4
bA/PzmKFZ9WIK19ZVWex5Bf2XFE7/XnW88NpGW6bqqef/+Yss2WadPZfzyIl
0XeOY/XSPN3iMwyAFFb3CBsrQNgb6kgJ8l7F1TZD188xOkaumGNOo46Hw5/+
9K8wWch+GPfYNWNLH/qejCpwQPy+FxwvUHh9d3mVOV9JF79EDZ9HIs8Sv5px
3djFAX0WieMTsGVsewUaH7mtYZu6s+jIafdenfiRXX/zLHOvtITCkyPOOfiH
P/yhURam1Jr5shYZ20z8dU3JUyHy3PQsYpZDNjugmbFr8VITpJLbtQRgyVgm
q490m7jTNqfPNSagjmkjP9nBWAYcIuLFBcg7k1fvRA++BXn1wFe7+Up5Y+3q
iWxgf0PGnqyeQhTTOP/w0c9qsgjzuNFlpP7pX/5MJHlr0pctpLT5C2/AwvEr
tIOFMvuhB+/CV04cfIOZpIa6WX3+q3VjRPG+g33V8OGPUw82WiYvK9JAb1Fe
ytjZ5Egz4jmnfxG5D/LKP1HgLNlm1l/cZymuBjF+1CDC7aW1aof4ku1M1N/e
8VUzic7ual+tRSM3E83LZGbT5Zt/ebbtV3nQnZdI5M9/XXcWizsXUJ98+suh
cr0eNn4YeUYk5yFiPFIGsd8U6ZRknY2LUTg1IBr5RJ9WuwIL3oZ1dao2ckwH
NCma+Ap8/913f4REbWwVXvbnH//4x9NUr9qfqAoz1CpMGuTWfFVqS3yFLqdW
fdccmUTar/l+mQozop1G/dX7YdLEKSqg/HwNIkcvRyPoUEwpkD7LoQz6HtNm
ejiddbcOHPqDBDl+oAX6duKb0wgetVQXn9kSU3cRNirv4FfH7q61wtl36ZW2
b0og7jB3wG2dTujQGrEVa+8jnXWjOa2IubdcV/GH2P9KAZZDCUiwNjRkmdJm
6FBiz+I2lg1W04CXL792KNpD+h573iaqrROw2pXDxRM63LSyjvQdxCoeR56R
TuKs2xGYpspuQXvg8y+WXgTaaiGOrYODw3qDOA1kDa5BgpdiJgIB0GaxdcKh
2sFXKFkbmdH/cN4BbZ3F82iHZO8hYrw/bbq5ifBfHgX6Or4qAlPc+EqxwSlM
LtoR9ZTp+UFyAnfMP+RDE4CbexQyXPx1U9WQ5PMYqtNMnTCvvrEWXl1Va8C0
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
atLUbjP9C+xuFws=
              "], {{0, 198}, {1502, 0}}, {0, 255}, ColorFunction -> RGBColor], 
             BoxForm`ImageTag[
             "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, 
              Interleaving -> True, Magnification -> Automatic], Selectable -> 
             False], AspectRatio -> 0.12828175337832967`, BaseStyle -> 
            "ImageGraphics", 
            ImageSize -> {415.7515151515137, 53.333333333333364`}, 
            ImageSizeRaw -> {1502, 198}, 
            PlotRange -> {{-19.61497397685639, 1502.}, {4.927601067716267, 
             198.}}, PlotRangePadding -> None]]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardSubsection"], CellDingbat -> None, 
             CellMargins -> {{12, 12}, {12, 23}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             ConversionRules :> {
              "TeX" -> {"\n\\subsection{", Automatic, "}"}, "HTML" -> {
                 IncludeCount[
                 "<h4 class='Subsection'><span class='Ignore'>`1`.`2` \
&nbsp;</span>", "Section", "Subsection"], "</h4>"}}, PageBreakBelow -> False, 
             TextAlignment -> Left, StyleMenuListing -> None, FontSize -> 15, 
             FontWeight -> "Bold"], 
            Cell[
             StyleData["CardSubsection", "Printout"], 
             CellMargins -> {{74, 63}, {24, 0}}, TextAlignment -> Center, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardSubtitle"], ShowCellBracket -> False, 
             ShowSelection -> True, CellMargins -> {{54, 24}, {5, 2}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, LineSpacing -> {1, 2, 1}, CounterIncrements -> "Subtitle",
              FontFamily -> "Times", FontSize -> 24], 
            Cell[
             StyleData["CardSubtitle", "Printout"], 
             CellFrame -> {{0, 0}, {1, 0}}, 
             CellMargins -> {{63, 63}, {42, 2}}, CellFrameMargins -> 3, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardText"], CellMargins -> {{67, 24}, {4, 4}}, 
             FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["CardText", "Printout"], 
             CellMargins -> {{63, 63}, {2, 2}}, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextInset"], CellMargins -> {{67, 24}, {4, 4}}, 
             CounterIncrements -> "Text", FontFamily -> "Times", FontSize -> 
             12], 
            Cell[
             StyleData["CardTextInset", "Printout"], 
             CellMargins -> {{110, 155}, {26, 26}}, TextAlignment -> Center, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextInsetTop"], CellMargins -> {{67, 24}, {4, 4}},
              CounterIncrements -> "Text", FontFamily -> "Times", FontSize -> 
             12], 
            Cell[
             StyleData["CardTextInsetTop", "Printout"], 
             CellMargins -> {{100, 145}, {72, 33}}, TextAlignment -> Center, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTable"], CellMargins -> {{24, 24}, {8, 10}}, 
             CellHorizontalScrolling -> True, DefaultFormatType -> "TextForm",
              CommonDefaultFormatTypes -> {"Text" -> TextForm}, AutoIndent -> 
             False, LineSpacing -> {1, 2, 1}, AutoSpacing -> False, 
             LineIndent -> 0, FontFamily -> "Times", FontSize -> 12, 
             GridBoxOptions -> {
              GridBoxAlignment -> {
                "Columns" -> {{Right, Left}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
               GridBoxItemSize -> {"Columns" -> {
                   Scaled[0.45], {
                    Scaled[0.8]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
                 "RowsIndexed" -> {}}, GridBoxSpacings -> {"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[1.5]}, 
                   Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {
                   Offset[0.3], {
                    Offset[0.5]}, 
                   Offset[0.2]}, "RowsIndexed" -> {}}}], 
            Cell[
             StyleData["CardTable", "Printout"], PageWidth -> PaperWidth, 
             CellMargins -> {{0, 3}, {2, 8}}, LineSpacing -> {1, 2, 1}, 
             FontFamily -> "Sabon LT Std", FontSize -> 9, Background -> 
             None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextOrder"], CellMargins -> {{67, 24}, {4, 4}}, 
             FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["CardTextOrder", "Printout"], 
             CellMargins -> {{63, 63}, {2, 2}}, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextAddress"], CellMargins -> {{67, 24}, {4, 4}}, 
             FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["CardTextAddress", "Printout"], 
             CellMargins -> {{63, 63}, {2, 2}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, ParagraphIndent -> 
             12, FontFamily -> "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardList"], CellDingbat -> "\[EmptySquare]", 
             CellMargins -> {{67, 24}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 2, 1}, CounterAssignments -> {{"SubList", 0}},
              FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["CardList", "Printout"], 
             CellMargins -> {{78, 63}, {2, 1}}, TextJustification -> 1, 
             Hyphenation -> True, LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextSubscription"], 
             CellMargins -> {{67, 24}, {4, 4}}, CounterIncrements -> "Text", 
             FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["CardTextSubscription", "Printout"], 
             CellMargins -> {{63, 63}, {10, 10}}, LineSpacing -> {1, 2, 1}, 
             FontFamily -> "Sabon LT Std", FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CardTextBold"], CellMargins -> {{67, 24}, {4, 4}}, 
             CounterIncrements -> "Text", FontFamily -> "Times", FontSize -> 
             12], 
            Cell[
             StyleData["CardTextBold", "Printout"], 
             CellMargins -> {{63, 63}, {2, 8}}, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             9, FontWeight -> "Bold"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Contents"], CellMargins -> {{67, 24}, {4, 4}}, 
             FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["Contents", "Printout"], 
             CellMargins -> {{63, 63}, {2, 2}}, Hyphenation -> True, 
             LineSpacing -> {1, 2, 1}, FontFamily -> "Sabon LT Std", FontSize -> 
             10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["tocentry"], 
             CellMargins -> {{67, 24}, {Inherited, Inherited}}, AutoIndent -> 
             True, TabFilling -> " ", LineSpacing -> {1, 2, 1}, FontFamily -> 
             "Times", FontSize -> 12], 
            Cell[
             StyleData["tocentry", "Printout"], 
             CellMargins -> {{94, 50}, {8, 0}}, TextJustification -> 0, 
             Hyphenation -> False, TabFilling -> "  ", 
             LineSpacing -> {1, 2, 1}, ParagraphIndent -> 0, 
             TabSpacings -> {1.}, FontFamily -> "Sabon LT Std", FontSize -> 
             10]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Hyperlink Styles", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, FontColor -> GrayLevel[1], 
          Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[1, 0, 0], 
             ButtonBoxOptions -> {
              Active -> True, ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               ButtonData}], 
            Cell[
             StyleData["Hyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Modifier Styles", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.400247242218782*^9, 3.400247253210354*^9}, {
            3.40579119158982*^9, 3.405791211572266*^9}, 3.434803396647059*^9},
           FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "Modifier Styles are used to control specific Cell options for \
certain uses.", "Text", 
          CellChangeTimes -> {{3.406497126652602*^9, 3.406497230506072*^9}, {
            3.40649729003154*^9, 3.406497515594619*^9}, 
            3.4064975567874126`*^9, {3.40649779041434*^9, 
            3.406497850402766*^9}, {3.40649789408482*^9, 
            3.406497897876459*^9}, {3.617629931514625*^9, 
            3.61763009637059*^9}, {3.6180595390199413`*^9, 
            3.6180595668514214`*^9}, {3.618059631928873*^9, 
            3.6180596327427807`*^9}}], 
         Cell[
         "ProductionPageBreak will start a new page before the cell and set \
the above cell margin to 0 in Printout environment. ", "Text", 
          CellChangeTimes -> {{3.406497126652602*^9, 3.406497230506072*^9}, {
            3.40649729003154*^9, 3.406497515594619*^9}, 
            3.4064975567874126`*^9, {3.40649779041434*^9, 
            3.406497850402766*^9}, {3.40649789408482*^9, 
            3.406497897876459*^9}, {3.617629931514625*^9, 
            3.61763009637059*^9}, {3.6180595745576057`*^9, 
            3.618059619175015*^9}, {3.618059658472158*^9, 
            3.6180596612949038`*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ProductionPageBreak"], 
             CellBracketOptions -> {"Color" -> RGBColor[1, 0, 1]}, 
             PageBreakAbove -> True], 
            Cell[
             StyleData["ProductionPageBreak", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {Inherited, 0}}, 
             CellBracketOptions -> {"Color" -> RGBColor[1, 0, 1]}]}, Closed]], 
         Cell[
         "BottomOfPage sets the below cell margin to 0 in Printout \
environment, colors the cell bracket. ", "Text", 
          CellChangeTimes -> {{3.406497126652602*^9, 3.406497230506072*^9}, {
           3.40649729003154*^9, 3.406497515594619*^9}, {3.406497924351274*^9, 
           3.4064980826209593`*^9}, {3.40649814228194*^9, 
           3.4064981668763447`*^9}, {3.406498226024672*^9, 
           3.406498350036386*^9}, {3.429532775938574*^9, 
           3.4295328536033*^9}, {3.617630144117969*^9, 
           3.617630145476791*^9}, {3.617631239288847*^9, 
           3.617631250774288*^9}, {3.6180598048405447`*^9, 
           3.618059820043202*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BottomOfPage"], 
             CellBracketOptions -> {"Color" -> RGBColor[1, 0, 1]}], 
            Cell[
             StyleData["BottomOfPage", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {0, Inherited}}, 
             CellBracketOptions -> {"Color" -> RGBColor[1, 0, 1]}]}, Closed]], 
         Cell[
         "NoIndent sets the ParagraphIndent to 0.", "Text", 
          CellChangeTimes -> {{3.429533475313965*^9, 3.429533491641464*^9}, 
            3.6176312701586246`*^9, {3.61805983199758*^9, 
            3.618059832283268*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NoIndent"], ParagraphIndent -> 0], 
            Cell[
             StyleData["NoIndent", "Printout"], ParagraphIndent -> 0]}, 
           Closed]], 
         Cell[
         "EndElement sets the below cell margin to 6. Apply to the last \
element of a list series or as extra space to end a Theorem or Proof.", 
          "Text", CellChangeTimes -> {{3.429533475313965*^9, 
           3.429533491641464*^9}, {3.5691568447949123`*^9, 
           3.569156856989921*^9}, {3.61763128231952*^9, 
           3.61763131615884*^9}, {3.61805967810186*^9, 
           3.618059705979899*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["EndElement"], 
             CellMargins -> {{Inherited, Inherited}, {6, Inherited}}], 
            Cell[
             StyleData["EndElement", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {6, Inherited}}]}, 
           Closed]], 
         Cell[
         "BeginElement sets the above cell margin to 4. Apply to the first \
element of as extra space following a Text cell (bottom cell margin 2).", 
          "Text", CellChangeTimes -> {{3.429533475313965*^9, 
           3.429533491641464*^9}, {3.5691568447949123`*^9, 
           3.569156856989921*^9}, {3.61763128231952*^9, 
           3.61763131615884*^9}, {3.61805967810186*^9, 
           3.618059705979899*^9}, {3.7223560740372257`*^9, 
           3.72235611018653*^9}, {3.722356152337741*^9, 
           3.722356206601215*^9}, {3.722529120902062*^9, 
           3.7225291351638002`*^9}, {3.738066984805814*^9, 
           3.738066987469639*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BeginElement"], 
             CellMargins -> {{Inherited, Inherited}, {Inherited, 4}}], 
            Cell[
             StyleData["BeginElement", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {Inherited, 4}}]}, 
           Closed]], 
         Cell[
         "StackedHeadAbove sets the above cell margin to 0.", "Text", 
          CellChangeTimes -> {{3.4348034315840178`*^9, 
           3.434803463181109*^9}, {3.61763133547589*^9, 
           3.617631346578816*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["StackedHeadAbove"], 
             CellMargins -> {{Inherited, Inherited}, {Inherited, 0}}], 
            Cell[
             StyleData["StackedHeadAbove", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {Inherited, 0}}]}, 
           Closed]], 
         Cell[
         "NoSpaceBelow sets the below cell margin to 0.", "Text", 
          CellChangeTimes -> {{3.4348034315840178`*^9, 
           3.434803463181109*^9}, {3.61763133547589*^9, 
           3.617631374377503*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NoSpaceBelow"], 
             CellMargins -> {{Inherited, Inherited}, {0, Inherited}}], 
            Cell[
             StyleData["NoSpaceBelow", "Printout"], 
             CellMargins -> {{Inherited, Inherited}, {0, Inherited}}]}, 
           Closed]], 
         Cell[
         "SectionLinewrap is for Section titles with more than one line.", 
          "Text", CellChangeTimes -> {{3.5046324190237007`*^9, 
           3.5046325222290573`*^9}, {3.6176313795295*^9, 
           3.6176314342046223`*^9}, {3.6180597322145033`*^9, 
           3.61805977166807*^9}, {3.6180631348595657`*^9, 
           3.618063152766151*^9}}], 
         Cell[
          StyleData["SectionLinewrap"], 
          CellFrameMargins -> {{Inherited, Inherited}, {2.1, Inherited}}]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Appendix Styles", "Section", CellFrame -> False, CellDingbat -> 
          None, ShowCellBracket -> True, CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.400247242218782*^9, 3.400247253210354*^9}, {
           3.40579119158982*^9, 3.405791211572266*^9}, {3.415145713380501*^9, 
           3.415145719238459*^9}}, FontColor -> GrayLevel[1], Background -> 
          RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AppendixTitle"], CellDingbat -> None, 
             CellMargins -> {{54, 12}, {2, 30}}, 
             CellGroupingRules -> {"TitleGrouping", 2}, PageBreakBelow -> 
             False, TextAlignment -> Left, LineSpacing -> {1, 2, 1}, 
             CounterAssignments -> {{"AppendixSection", 0}, {
               "AppendixSubsection", 0}, {"AppendixEquation", 0}, {
               "FigureCaptionAppendix", 0}, {"TableCaptionAppendix", 0}}, 
             AspectRatioFixed -> True, MenuSortingValue -> 2160, FontFamily -> 
             "Helvetica", FontSize -> 18, FontWeight -> "Bold"], 
            Cell[
             StyleData["AppendixTitle", "Printout"], 
             CellMargins -> {{63, 63}, {2, 30}}, FontFamily -> 
             "Univers LT Std", FontSize -> 9, FontWeight -> "Bold"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AppendixSection", StyleDefinitions -> StyleData["Section"]], 
             CellFrame -> {{6, 0}, {2, 0}}, 
             CellMargins -> {{54, 12}, {16, 27}}, 
             CellFrameMargins -> {{40, 0}, {0, 0}}, CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["AppendixSection", CounterFunction :> (Part[
                    CharacterRange["A", "Z"], #]& )], "."}], CellBaseline -> 
                 Baseline], Inherited}, {Inherited, Inherited}}, 
             CellFrameLabelMargins -> -38, TextAlignment -> Left, 
             CounterIncrements -> {"AppendixSection"}, 
             CounterAssignments -> {{"AppendixSubsection", 0}, {
               "AppendixEquation", 0}, {"FigureCaptionAppendix", 0}, {
               "TableCaptionAppendix", 0}}, MenuSortingValue -> 2161, 
             CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData[
             "AppendixSection", "Printout", StyleDefinitions -> 
              StyleData["Section", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AppendixSectionFirst", StyleDefinitions -> 
              StyleData["AppendixSection"]], 
             CellMargins -> {{54, 12}, {16, 8}}], 
            Cell[
             StyleData[
             "AppendixSectionFirst", "Printout", StyleDefinitions -> 
              StyleData["AppendixSection", "Printout"]], 
             CellMargins -> {{72, 63}, {8, 2}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AppendixSubsection"], CellDingbat -> None, 
             CellMargins -> {{54, 12}, {12, 23}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 4}, 
             CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
             False, CellFrameLabels -> {{
                Cell[
                 TextData[{
                   CounterBox["AppendixSection", CounterFunction :> (Part[
                    CharacterRange["A", "Z"], #]& )], ".", 
                   CounterBox["AppendixSubsection"]}], "SubsectionLabel", 
                 CellBaseline -> Baseline], Inherited}, {
               Inherited, Inherited}}, CellFrameLabelMargins -> 6, 
             TextAlignment -> Left, LineSpacing -> {1, 2, 1}, 
             CounterIncrements -> {"AppendixSubsection"}, 
             CounterAssignments -> {{"AppendixSubsubsection", 0}}, 
             MenuSortingValue -> 2162, CounterStyleMenuListing -> Automatic, 
             FontFamily -> "Helvetica", FontSize -> 15, FontWeight -> "Bold"], 
            Cell[
             StyleData["AppendixSubsection", "Printout"], 
             CellFrame -> {{3, 0}, {0, 0}}, 
             CellMargins -> {{74, 63}, {2, 16}}, 
             CellElementSpacings -> {"CellMinHeight" -> 8}, 
             CellFrameMargins -> {{26, 0}, {0, 0}}, 
             CellFrameLabelMargins -> -24, FontFamily -> "Univers LT Std", 
             FontSize -> 9, FontWeight -> "Bold"]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "AppendixEquation", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered"]], CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(", 
                   CounterBox["AppendixSection", CounterFunction :> (Part[
                    CharacterRange["A", "Z"], #]& )], ".", 
                   CounterBox["AppendixEquation"], ")"}]]}, {None, None}}, 
             CounterIncrements -> "AppendixEquation", MenuSortingValue -> 
             2163, CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData[
             "AppendixEquation", "Printout", StyleDefinitions -> 
              StyleData["DisplayFormulaNumbered", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "FigureCaptionAppendix", StyleDefinitions -> 
              StyleData["NumberedFigureCaption"]], 
             CellMargins -> {{72, 10}, {1, 7}}, 
             CounterIncrements -> {"FigureCaptionAppendix"}, MenuSortingValue -> 
             2164, CounterStyleMenuListing -> Automatic], 
            Cell[
             StyleData[
             "FigureCaptionAppendix", "Printout", StyleDefinitions -> 
              StyleData["NumberedFigureCaption", "Printout"]]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "TableCaptionAppendix", StyleDefinitions -> 
              StyleData["NumberedTableCaption"]], 
             CellMargins -> {{72, 10}, {1, 7}}, 
             CounterIncrements -> {"TableCaptionAppendix"}, MenuSortingValue -> 
             2165, CounterStyleMenuListing -> Automatic, FontSize -> 12, 
             FontWeight -> "Plain"], 
            Cell[
             StyleData[
             "TableCaptionAppendix", "Printout", StyleDefinitions -> 
              StyleData["NumberedTableCaption", "Printout"]]]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "MenuSortingValue Settings", "Section", CellFrame -> False, 
          CellDingbat -> None, ShowCellBracket -> True, 
          CellMargins -> {{0, 0}, {10, 40}}, 
          CellFrameMargins -> {{20, 4}, {8, 8}}, 
          CellChangeTimes -> {{3.400247242218782*^9, 3.400247253210354*^9}, {
           3.40579119158982*^9, 3.405791211572266*^9}, {
           3.4585895722708273`*^9, 3.458589585489595*^9}, {
           3.51058646023171*^9, 3.510586465857525*^9}, {
           3.7223563315058002`*^9, 3.7223563324659443`*^9}}, FontColor -> 
          GrayLevel[1], Background -> RGBColor[0.269902, 0.558434, 0.715618]], 
         Cell[
         "The following definitions reset the menu positions and shortcuts \
from the inherited stylesheets for cell styles not typically used in Complex \
Systems.", "Text", 
          CellChangeTimes -> {{3.510586473896441*^9, 3.510586508545326*^9}, {
           3.6192649033113728`*^9, 3.619264926732423*^9}}], 
         Cell[
          CellGroupData[{
            Cell[
            "Titling and sectioning", "Subsection", 
             CellChangeTimes -> {{3.510585351948134*^9, 
              3.510585359450369*^9}}], 
            Cell[
             StyleData["Subsubtitle"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Subsubsubsection"], MenuSortingValue -> None], 
            Cell[
             StyleData["Subsubsubsubsection"], MenuSortingValue -> None], 
            Cell[
             StyleData["Appendix"], MenuSortingValue -> None], 
            Cell[
             StyleData["AppendixSubsubsection"], MenuSortingValue -> None, 
             CounterStyleMenuListing -> None], 
            Cell[
             StyleData["Department"], MenuSortingValue -> None], 
            Cell[
             StyleData["AcknowledgmentsSection"], MenuSortingValue -> None], 
            Cell[
             StyleData["Acknowledgments"], MenuSortingValue -> None], 
            Cell[
             StyleData["EndnoteSection"], MenuSortingValue -> None], 
            Cell[
             StyleData["Endnote"], MenuSortingValue -> None], 
            Cell[
             StyleData["ReferenceSection"], MenuSortingValue -> None]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
            "Lists", "Subsection", 
             CellChangeTimes -> {{3.51058537196165*^9, 3.51058537262431*^9}}], 
            Cell[
             StyleData["Item"], MenuSortingValue -> None, StyleMenuListing -> 
             None], 
            Cell[
             StyleData["Subitem"], MenuSortingValue -> None, StyleMenuListing -> 
             None], 
            Cell[
             StyleData["Subsubitem"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["ItemParagraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Item1Paragraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Item2Paragraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Item3Paragraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["SubitemParagraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["SubsubitemParagraph"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["ItemNumbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData["Item1Numbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Item2Numbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Item3Numbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["SubitemNumbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData["SubsubitemNumbered"], MenuSortingValue -> None, 
             StyleMenuListing -> None, CounterStyleMenuListing -> None], 
            Cell[
             StyleData["Item3"], MenuSortingValue -> None, StyleMenuListing -> 
             None], 
            Cell[
             StyleData["Chapter"], MenuSortingValue -> None, StyleMenuListing -> 
             None], 
            Cell[
             StyleData["Subchapter"], MenuSortingValue -> None, 
             StyleMenuListing -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
            "Captioning", "Subsection", 
             CellChangeTimes -> {{3.510585389601097*^9, 
              3.510585391208942*^9}}], 
            Cell[
             StyleData["FigureCaption"], MenuSortingValue -> None], 
            Cell[
             StyleData["Figure"], MenuSortingValue -> None], 
            Cell[
             StyleData["ProgramCaption"], MenuSortingValue -> None], 
            Cell[
             StyleData["TableTitle"], MenuSortingValue -> None], 
            Cell[
             StyleData["TableNote"], MenuSortingValue -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
            "Displays and other elements", "Subsection", 
             CellChangeTimes -> {{3.510585438516903*^9, 
              3.5105854466947317`*^9}}], 
            Cell[
             StyleData["Equation"], MenuSortingValue -> None, MenuCommandKey -> 
             None], 
            Cell[
             StyleData["ExternalLanguage"], MenuSortingValue -> None, 
             MenuCommandKey -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
            "Disabled Menu appearance for Presentation, SlideShow, and \
Condensed", "Subsection", 
             CellChangeTimes -> {{3.3939379369487267`*^9, 
               3.39393795032102*^9}, 3.393938092859522*^9, {
               3.6192596541093607`*^9, 3.619259658023101*^9}}], 
            Cell[
             StyleData[All, "Presentation"], ScreenStyleEnvironment -> 
             "Presentation", MenuSortingValue -> None, Magnification -> 1.25], 
            Cell[
             StyleData[All, "SlideShow"], PageWidth -> WindowWidth, 
             DockedCells -> 
             FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
             ScrollingOptions -> {
              "PagewiseDisplay" -> True, "VerticalScrollRange" -> Fit}, 
             ShowCellBracket -> False, ShowAutoStyles -> False, ScriptMinSize -> 
             9, MenuSortingValue -> 1300, StyleMenuListing -> None], 
            Cell[
             StyleData[All, "Condensed"], PageWidth -> WindowWidth, 
             CellLabelMargins -> {{8, Inherited}, {Inherited, Inherited}}, 
             ShowAutoStyles -> False, ScriptMinSize -> 8, MenuSortingValue -> 
             1400, StyleMenuListing -> None]}, Closed]]}, Closed]]}, Open]]}, 
  Visible -> False, FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "NoIndent"->{
  Cell[3309, 78, 1712, 26, 379, "Text",ExpressionUUID->"93887333-9174-4958-a722-6e816c7b9582",
   CellTags->"NoIndent"]},
 "a-review"->{
  Cell[203103, 4143, 1410, 31, 425, "Reference",ExpressionUUID->"7584f889-3ffc-43d7-8f7d-7194b1b2c0f0",
   CellTags->"a-review"]},
 "text-a"->{
  Cell[204516, 4176, 798, 15, 297, "Reference",ExpressionUUID->"2b05c214-2895-4b40-9bd3-888902eb02fd",
   CellTags->"text-a"]},
 "text-b"->{
  Cell[205317, 4193, 1366, 25, 551, "Reference",ExpressionUUID->"c7983db0-1bb9-40c9-b3c1-ccf83b74499d",
   CellTags->"text-b"]},
 "edbook"->{
  Cell[206686, 4220, 948, 18, 297, "Reference",ExpressionUUID->"74754f72-77d7-4fb7-82e3-545f01a12088",
   CellTags->"edbook"]},
 "proc"->{
  Cell[207637, 4240, 2071, 46, 803, "Reference",ExpressionUUID->"bf7a9dd1-79c0-419f-b436-639250408796",
   CellTags->"proc"]},
 "report"->{
  Cell[209711, 4288, 1276, 30, 425, "Reference",ExpressionUUID->"ca6669d7-b854-4c1b-ae17-77d600daf87a",
   CellTags->"report"]},
 "preprint"->{
  Cell[210990, 4320, 1089, 25, 551, "Reference",ExpressionUUID->"e5ccc71f-da99-4103-a613-4f1b0ca1dfc4",
   CellTags->"preprint"]},
 "manual"->{
  Cell[212082, 4347, 581, 15, 297, "Reference",ExpressionUUID->"e6ca8647-2cbc-4ad9-8a21-305307c6ee6b",
   CellTags->"manual"]},
 "future"->{
  Cell[212666, 4364, 1135, 26, 425, "Reference",ExpressionUUID->"185d65bb-6ae2-4cf6-a57f-cd9f9a1e094e",
   CellTags->"future"]},
 "talk"->{
  Cell[213804, 4392, 848, 17, 425, "Reference",ExpressionUUID->"bf8eefa5-bcce-400d-a298-f62754722b86",
   CellTags->"talk"]},
 "program"->{
  Cell[214655, 4411, 816, 16, 425, "Reference",ExpressionUUID->"d3aa0187-a2f5-4efd-9bd2-da61f40d4a9b",
   CellTags->"program"]},
 "website"->{
  Cell[215474, 4429, 916, 18, 297, "Reference",ExpressionUUID->"c475cb14-12fc-4a83-b6f6-73c723fea7bf",
   CellTags->"website"]},
 "blog"->{
  Cell[216393, 4449, 991, 20, 297, "Reference",ExpressionUUID->"f366baaf-231e-4f67-99a4-fb73cd9f149c",
   CellTags->"blog"]},
 "forum"->{
  Cell[217387, 4471, 1231, 22, 425, "Reference",ExpressionUUID->"98da19ff-c49f-4a81-94c1-b442eda8c176",
   CellTags->"forum"]},
 "demonstration"->{
  Cell[218621, 4495, 1088, 20, 425, "Reference",ExpressionUUID->"a6b9a86f-645b-4c92-9de6-b9add030a138",
   CellTags->"demonstration"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"NoIndent", 506314, 9925},
 {"a-review", 506451, 9928},
 {"text-a", 506595, 9931},
 {"text-b", 506736, 9934},
 {"edbook", 506878, 9937},
 {"proc", 507017, 9940},
 {"report", 507157, 9943},
 {"preprint", 507301, 9946},
 {"manual", 507445, 9949},
 {"future", 507586, 9952},
 {"talk", 507726, 9955},
 {"program", 507866, 9958},
 {"website", 508009, 9961},
 {"blog", 508149, 9964},
 {"forum", 508287, 9967},
 {"demonstration", 508435, 9970}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 225, 3, 194, "Title",ExpressionUUID->"09ce18dc-0378-4ff7-99dc-92bce9c94c59"],
Cell[785, 25, 205, 3, 31, "Author",ExpressionUUID->"eaa2d651-f2e4-4177-bf1d-5c2e571e002c"],
Cell[993, 30, 259, 4, 37, "Institution",ExpressionUUID->"b90d85e5-92c7-497a-8a7a-72f6c772b91d"],
Cell[1255, 36, 1268, 19, 441, "Abstract",ExpressionUUID->"96df135a-45e0-4684-9b85-cba600d8ee18"],
Cell[2526, 57, 511, 11, 103, "Keywords",ExpressionUUID->"1b54805e-3865-451b-9d9f-7226483db154"],
Cell[CellGroupData[{
Cell[3062, 72, 244, 4, 90, "Section",ExpressionUUID->"3363828f-e108-4eb5-ac80-c4fec6f92a0e"],
Cell[3309, 78, 1712, 26, 379, "Text",ExpressionUUID->"93887333-9174-4958-a722-6e816c7b9582",
 CellTags->"NoIndent"],
Cell[CellGroupData[{
Cell[5046, 108, 168, 3, 68, "Subsection",ExpressionUUID->"4bff1c31-c67a-46e8-acd6-8a425c3bcbca"],
Cell[5217, 113, 1685, 28, 485, "Text",ExpressionUUID->"0e21613e-4066-488f-9bbb-7c238d20aff8"],
Cell[CellGroupData[{
Cell[6927, 145, 220, 4, 46, "Subsubsection",ExpressionUUID->"282e94a3-4356-437a-9125-8dbb13e5f3ac"],
Cell[7150, 151, 366, 8, 61, "Text",ExpressionUUID->"641ba64d-f741-4ec3-a9b9-f542c10f4ba1"],
Cell[7519, 161, 1442, 24, 564, "Text",ExpressionUUID->"02ee70d3-fdd4-413f-ae21-88670b6f874a"],
Cell[8964, 187, 355, 8, 92, "Input",ExpressionUUID->"03234597-02ab-4e1b-94c9-76f685ddd1fb"],
Cell[9322, 197, 176, 3, 61, "NumberedFigureCaption",ExpressionUUID->"d70015af-e342-408f-862e-24f75a555bc2"],
Cell[9501, 202, 250, 6, 45, "Input",ExpressionUUID->"829e05e8-ff25-414e-a10e-7953a1be5d89"],
Cell[9754, 210, 383, 9, 61, "NumberedFigureCaption",ExpressionUUID->"81b4cf8f-5d37-4990-9211-5fa83b8c40aa"],
Cell[10140, 221, 754, 20, 184, "Input",ExpressionUUID->"357db565-c233-4e3a-b4f6-3ea2ae0dfb7b"],
Cell[10897, 243, 408, 10, 61, "NumberedFigureCaption",ExpressionUUID->"484bdb53-ef63-4fb6-952e-e282df6d5f1a"],
Cell[11308, 255, 436, 12, 115, "Input",ExpressionUUID->"e3defc39-b381-41a4-8da4-9218f723759c"],
Cell[11747, 269, 486, 9, 61, "NumberedFigureCaption",ExpressionUUID->"d0ecf446-d67b-4d54-a629-1e91fa43236a"],
Cell[12236, 280, 667, 19, 92, "Input",ExpressionUUID->"a12031a6-d96a-4f72-b70c-f7d45e8316dd"],
Cell[12906, 301, 711, 14, 105, "NumberedFigureCaption",ExpressionUUID->"b05e67a9-9e6e-4927-8e82-9dca3776278e"],
Cell[13620, 317, 789, 23, 115, "Input",ExpressionUUID->"10bf6784-78e0-422b-92a1-c0768719c1d1"],
Cell[14412, 342, 1224, 26, 149, "NumberedFigureCaption",ExpressionUUID->"898c7f24-9fc6-4bd4-8847-dbe5ab4f4428"],
Cell[15639, 370, 1086, 23, 193, "Text",ExpressionUUID->"5e8c0e07-f938-492f-9f6c-932adc4129a4"],
Cell[16728, 395, 366, 9, 34, "Text",ExpressionUUID->"4ff1089f-4108-4f76-a376-822785e22a29"],
Cell[17097, 406, 923, 25, 161, "Input",ExpressionUUID->"5d3d52a3-860b-4382-bc18-2f9484ca72bb"],
Cell[18023, 433, 230, 5, 45, "Input",ExpressionUUID->"f3510f67-62cc-447c-a608-ea4802dead92"],
Cell[18256, 440, 188, 3, 34, "Text",ExpressionUUID->"7f96f123-30cf-4cc7-873f-fa2da3b769e1"],
Cell[18447, 445, 316, 9, 45, "Input",ExpressionUUID->"d7f167bf-6109-458c-9b9b-c116f3012b8b"],
Cell[18766, 456, 217, 5, 34, "Text",ExpressionUUID->"924282ca-e474-42e3-a69a-d1ae37f7deb0"],
Cell[18986, 463, 184, 4, 45, "Input",ExpressionUUID->"eb6437a2-f69c-490b-8ed9-36c040445993"],
Cell[19173, 469, 149, 3, 34, "Text",ExpressionUUID->"151fb008-b589-4027-a040-a12e6e274c70"],
Cell[19325, 474, 201, 5, 45, "Input",ExpressionUUID->"26a9a474-6d65-4883-9915-fca256bd211a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19575, 485, 168, 3, 68, "Subsection",ExpressionUUID->"010c671a-2ea3-4c1b-9f43-7c7fe399a0c1"],
Cell[CellGroupData[{
Cell[19768, 492, 165, 3, 46, "Subsubsection",ExpressionUUID->"7cea955e-2881-44a2-961a-70ceb090f3c1"],
Cell[19936, 497, 1136, 19, 273, "Text",ExpressionUUID->"683aaad3-7791-46ba-be0c-508a9531e01c"],
Cell[21075, 518, 225, 4, 45, "Input",ExpressionUUID->"e36bc533-874c-47dd-83f6-1657823a48ad"],
Cell[21303, 524, 445, 7, 34, "Text",ExpressionUUID->"74cd64fd-834a-4c1d-8305-b7a56f84ad16"],
Cell[21751, 533, 278, 6, 45, "Input",ExpressionUUID->"5ba28b25-da37-465f-bd8b-496fb1fa5890"],
Cell[22032, 541, 331, 8, 45, "Input",ExpressionUUID->"152926e5-e37c-4159-bdd9-faca45d89fbc"],
Cell[CellGroupData[{
Cell[22388, 553, 539, 11, 69, "Input",ExpressionUUID->"d51780ea-1c18-49d6-8a03-ad0dd44d9cd6"],
Cell[22930, 566, 31846, 576, 151, "Output",ExpressionUUID->"8cbd378c-6a6a-4a3a-ad3e-6cee16abd73c"]
}, Open  ]],
Cell[54791, 1145, 765, 15, 140, "Text",ExpressionUUID->"2e40aa6f-4f87-4fb7-bd3a-0c9343139fe1"],
Cell[55559, 1162, 193, 3, 34, "Text",ExpressionUUID->"a13f9e51-8b5b-4dd5-816d-cccddb445436"],
Cell[55755, 1167, 248, 5, 45, "Input",ExpressionUUID->"b9d7ca39-98c2-4829-951e-ba039972fa83"],
Cell[56006, 1174, 1499, 29, 273, "Text",ExpressionUUID->"67dd2c53-28c0-4b6b-b313-5bd86cc96be8"],
Cell[CellGroupData[{
Cell[57530, 1207, 349, 7, 45, "Input",ExpressionUUID->"963aca0f-b094-4ed1-b42c-25ddac9df03d"],
Cell[57882, 1216, 291, 5, 62, "Output",ExpressionUUID->"74c1807a-78c0-472e-89db-70a124db2872"]
}, Open  ]],
Cell[58188, 1224, 410, 8, 45, "Input",ExpressionUUID->"7ca7abf6-4b7d-48a0-b14c-a628afd265ce"],
Cell[CellGroupData[{
Cell[58623, 1236, 476, 11, 69, "Input",ExpressionUUID->"6a566a24-b946-4dad-b4cc-d949439ae9c7"],
Cell[59102, 1249, 6019, 124, 86, "Output",ExpressionUUID->"daa3fdb8-8da1-4cc8-ae78-ca988c8a561f"]
}, Open  ]],
Cell[65136, 1376, 390, 8, 61, "Text",ExpressionUUID->"e31f430e-6502-40f2-8145-c1374d3032ae"],
Cell[CellGroupData[{
Cell[65551, 1388, 235, 4, 45, "Input",ExpressionUUID->"aae15a0a-bc36-46c8-9009-107dcecb7c08"],
Cell[65789, 1394, 315, 7, 38, "Output",ExpressionUUID->"936c6175-ec17-4eee-b5b1-621959879129"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66141, 1406, 245, 5, 45, "Input",ExpressionUUID->"3915de66-c6e1-4850-a5d2-2f0bad25d285"],
Cell[66389, 1413, 161, 3, 38, "Output",ExpressionUUID->"037c354e-3643-425c-a9e5-258efa44510a"]
}, Open  ]],
Cell[66565, 1419, 216, 5, 34, "Text",ExpressionUUID->"50a46eec-cce5-4b06-865f-acc2478c75d2"],
Cell[CellGroupData[{
Cell[66806, 1428, 229, 4, 45, "Input",ExpressionUUID->"8364fbf7-bac7-4b6d-a1b4-c4fb883392c7"],
Cell[67038, 1434, 10791, 210, 88, "Output",ExpressionUUID->"4a63fe8f-b7af-4526-8eda-46b92aa5e255"]
}, Open  ]],
Cell[77844, 1647, 302, 6, 61, "Text",ExpressionUUID->"3464e72d-68a2-4c3e-9c23-e1cb4aac91f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78183, 1658, 243, 4, 46, "Subsubsection",ExpressionUUID->"e88787be-3545-4ec5-aae7-58ff454d18f3"],
Cell[78429, 1664, 2285, 38, 803, "Text",ExpressionUUID->"d2debdf9-46f8-461e-9f13-13c8c83d3af9"],
Cell[80717, 1704, 11688, 272, 1266, "Code",ExpressionUUID->"7d4e5226-8900-4547-861c-91d02e4ecb83"],
Cell[92408, 1978, 564, 9, 114, "Text",ExpressionUUID->"71a52a75-82ef-4742-9cff-61d494f6dce3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93009, 1992, 291, 4, 46, "Subsubsection",ExpressionUUID->"bdd94af0-23ac-43ef-88c4-d476bf0e9d42"],
Cell[93303, 1998, 1073, 19, 273, "Text",ExpressionUUID->"70232321-d010-439d-9bda-3389e3f6614c"],
Cell[94379, 2019, 3215, 72, 851, "Input",ExpressionUUID->"3264d91d-0204-49b7-95ac-4e428704474c"],
Cell[97597, 2093, 298, 9, 34, "Text",ExpressionUUID->"a7dc6085-909f-42ea-a8aa-1330601be6dd"],
Cell[CellGroupData[{
Cell[97920, 2106, 407, 7, 45, "Input",ExpressionUUID->"00d3309e-c12a-4ff5-bce4-c49dd3ad5275"],
Cell[98330, 2115, 33494, 600, 301, "Output",ExpressionUUID->"b688850b-8ddb-4b80-b1cb-02033b428f0c"]
}, Open  ]],
Cell[131839, 2718, 410, 8, 87, "Text",ExpressionUUID->"bdffd4fd-bc76-4b6c-a17c-006017b1ec09"],
Cell[CellGroupData[{
Cell[132274, 2730, 272, 6, 45, "Input",ExpressionUUID->"51f1d4fd-6170-428d-92d0-b8443a8e1819"],
Cell[132549, 2738, 55232, 1012, 337, "Output",ExpressionUUID->"e6c3a7bc-03c1-4f01-a8f2-6566443580b7"]
}, Open  ]],
Cell[187796, 3753, 309, 8, 87, "Text",ExpressionUUID->"2ad88a11-4caa-4280-b860-9f0d8ca5ba3b"],
Cell[CellGroupData[{
Cell[188130, 3765, 1133, 30, 161, "Input",ExpressionUUID->"c71dea1e-0845-4660-97ac-dc1512db4e43"],
Cell[189266, 3797, 535, 16, 283, "Output",ExpressionUUID->"3b6da9a0-5cd0-4d0c-9bd0-2852cf6a7a75"]
}, Open  ]],
Cell[189816, 3816, 259, 5, 34, "Text",ExpressionUUID->"60661c2e-0bf9-4570-a462-50d86bba52a2"],
Cell[CellGroupData[{
Cell[190100, 3825, 279, 6, 45, "Input",ExpressionUUID->"b0dac091-8e11-4f3d-9e65-6a7e12a41bf3"],
Cell[190382, 3833, 257, 5, 38, "Output",ExpressionUUID->"5b7c5baf-c906-45d6-9797-9b19bfa18a4c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[190712, 3846, 189, 3, 96, "Section",ExpressionUUID->"a734c7bd-0b14-4dfe-833a-6a768b8421a8"],
Cell[190904, 3851, 743, 12, 114, "Text",ExpressionUUID->"09aff1f7-ab98-4c02-9b7d-7d01fa9404f6"],
Cell[191650, 3865, 881, 16, 220, "Text",ExpressionUUID->"48441846-c2e4-41ae-a779-65b44ccd95a5"],
Cell[192534, 3883, 148, 3, 45, "Input",ExpressionUUID->"a6179da4-eb50-4eba-a755-0302675e8914"],
Cell[192685, 3888, 674, 15, 115, "Input",ExpressionUUID->"fcd49587-53e2-418c-a09e-28475e315ce3"],
Cell[193362, 3905, 872, 22, 184, "Input",ExpressionUUID->"73646c7c-d419-4f7e-b5df-ef0f1308ee42"],
Cell[194237, 3929, 649, 15, 115, "Input",ExpressionUUID->"a359bee2-0468-4cac-94e0-8420016888d8"],
Cell[194889, 3946, 152, 3, 45, "Input",ExpressionUUID->"c594befe-2c10-479b-a86e-ca6f280dca9d"],
Cell[195044, 3951, 878, 19, 352, "Text",ExpressionUUID->"71e492dc-d22c-4576-b7bc-13ab85a5a1a1"],
Cell[195925, 3972, 239, 4, 34, "Text",ExpressionUUID->"a5249397-0ccf-4312-8b95-385954fb832b"],
Cell[CellGroupData[{
Cell[196189, 3980, 163, 3, 68, "Subsection",ExpressionUUID->"07401dfd-6bf1-452d-a492-d78b76231be2"],
Cell[196355, 3985, 166, 3, 34, "Text",ExpressionUUID->"8dd30cfb-1179-47b1-b141-73f7afd86f53"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[196570, 3994, 140, 2, 96, "Section",ExpressionUUID->"08eae83a-c7b7-497c-a800-aa27b7730341"],
Cell[196713, 3998, 286, 5, 61, "Text",ExpressionUUID->"0bc594b8-fd43-4c30-a452-a5e1874dc4d0"],
Cell[197002, 4005, 662, 14, 114, "Text",ExpressionUUID->"68aeeb35-9884-4dc4-ba3c-afc93154d5c6"],
Cell[197667, 4021, 1314, 24, 193, "Text",ExpressionUUID->"ad482503-381e-4bb1-a810-f9f6ab1409a6"],
Cell[198984, 4047, 535, 14, 114, "Text",ExpressionUUID->"e188a325-5748-47c1-871b-5220cbd13af8"],
Cell[199522, 4063, 702, 13, 140, "Text",ExpressionUUID->"2fd5c342-e438-4ee7-be8d-f630b56e4203"],
Cell[200227, 4078, 838, 14, 114, "Text",ExpressionUUID->"1cac7e0a-9129-45f9-88d6-aac1dafdd759"],
Cell[201068, 4094, 443, 8, 114, "Text",ExpressionUUID->"dd5c1a12-9a09-4eea-85af-4e3d2fb94bba"],
Cell[201514, 4104, 628, 10, 114, "Text",ExpressionUUID->"1fae204c-269c-4516-83e0-32016316a889"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202179, 4119, 96, 1, 95, "SectionAlt",ExpressionUUID->"079f9c64-1889-4963-8731-1e029c68de10"],
Cell[202278, 4122, 694, 13, 140, "Text",ExpressionUUID->"2cbd47dd-a66e-4bc8-b6d0-c40c6fac5260"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203009, 4140, 91, 1, 95, "SectionAlt",ExpressionUUID->"55ac9c15-9dfa-41e0-8795-65a9b010628a"],
Cell[203103, 4143, 1410, 31, 425, "Reference",ExpressionUUID->"7584f889-3ffc-43d7-8f7d-7194b1b2c0f0",
 CellTags->"a-review"],
Cell[204516, 4176, 798, 15, 297, "Reference",ExpressionUUID->"2b05c214-2895-4b40-9bd3-888902eb02fd",
 CellTags->"text-a"],
Cell[205317, 4193, 1366, 25, 551, "Reference",ExpressionUUID->"c7983db0-1bb9-40c9-b3c1-ccf83b74499d",
 CellTags->"text-b"],
Cell[206686, 4220, 948, 18, 297, "Reference",ExpressionUUID->"74754f72-77d7-4fb7-82e3-545f01a12088",
 CellTags->"edbook"],
Cell[207637, 4240, 2071, 46, 803, "Reference",ExpressionUUID->"bf7a9dd1-79c0-419f-b436-639250408796",
 CellTags->"proc"],
Cell[209711, 4288, 1276, 30, 425, "Reference",ExpressionUUID->"ca6669d7-b854-4c1b-ae17-77d600daf87a",
 CellTags->"report"],
Cell[210990, 4320, 1089, 25, 551, "Reference",ExpressionUUID->"e5ccc71f-da99-4103-a613-4f1b0ca1dfc4",
 CellTags->"preprint"],
Cell[212082, 4347, 581, 15, 297, "Reference",ExpressionUUID->"e6ca8647-2cbc-4ad9-8a21-305307c6ee6b",
 CellTags->"manual"],
Cell[212666, 4364, 1135, 26, 425, "Reference",ExpressionUUID->"185d65bb-6ae2-4cf6-a57f-cd9f9a1e094e",
 CellTags->"future"],
Cell[213804, 4392, 848, 17, 425, "Reference",ExpressionUUID->"bf8eefa5-bcce-400d-a298-f62754722b86",
 CellTags->"talk"],
Cell[214655, 4411, 816, 16, 425, "Reference",ExpressionUUID->"d3aa0187-a2f5-4efd-9bd2-da61f40d4a9b",
 CellTags->"program"],
Cell[215474, 4429, 916, 18, 297, "Reference",ExpressionUUID->"c475cb14-12fc-4a83-b6f6-73c723fea7bf",
 CellTags->"website"],
Cell[216393, 4449, 991, 20, 297, "Reference",ExpressionUUID->"f366baaf-231e-4f67-99a4-fb73cd9f149c",
 CellTags->"blog"],
Cell[217387, 4471, 1231, 22, 425, "Reference",ExpressionUUID->"98da19ff-c49f-4a81-94c1-b442eda8c176",
 CellTags->"forum"],
Cell[218621, 4495, 1088, 20, 425, "Reference",ExpressionUUID->"a6b9a86f-645b-4c92-9de6-b9add030a138",
 CellTags->"demonstration"],
Cell[219712, 4517, 808, 19, 551, "Reference",ExpressionUUID->"f5cb6374-7521-4a35-920a-61470e6e1879"]
}, Open  ]]
}
]
*)

